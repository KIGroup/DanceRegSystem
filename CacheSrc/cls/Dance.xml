<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Dance.Data.AgeCategory">
<Description>
Age categories, Young, Adult etc. </Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63289,4616.303823</TimeCreated>

<Property name="Name">
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="YoungestPartnerMaxAge">
<Type>%Integer</Type>
<Required>1</Required>
<Parameter name="MAXVAL" value="100"/>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="YoungestPartnerMinAge">
<Type>%Integer</Type>
<Required>1</Required>
<Parameter name="MAXVAL" value="100"/>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="OldestPartnerMaxAge">
<Type>%Integer</Type>
<Required>1</Required>
<Parameter name="MAXVAL" value="100"/>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="OldestPartnerMinAge">
<Type>%Integer</Type>
<Required>1</Required>
<Parameter name="MAXVAL" value="100"/>
<Parameter name="MINVAL" value="0"/>
</Property>

<Property name="SpecialLogic">
<Type>%Boolean</Type>
</Property>

<Property name="TitleAge">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {TitleAge} = ##class({%%CLASSNAME}).GetTitleAge({YoungestPartnerMinAge}, {YoungestPartnerMaxAge}, {OldestPartnerMinAge}, {OldestPartnerMaxAge})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="Code">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="CodeIdx">
<Properties>Code</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<FormalSpec>params:%ZEN.proxyObject=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()	
	set proxy.id = ..%Id()
	set proxy.name = ..Name.Value
	set proxy.code = ..Code
	
	set proxy.titleAge = ..TitleAge
	
	quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Create or update age category</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&st]]></FormalSpec>
<ReturnType>AgeCategory</ReturnType>
<Implementation><![CDATA[
   
    if (data.id = ""){
    	set obj = ..%New()
      	set obj.Name = ##class(Dance.Data.Localization.LText).Create(data.name)
    }
    else{
	    set obj = ..%OpenId(data.id)
      	set obj.Name.Value = data.name
    }
    
    set obj.Code = data.code
    set obj.MaxAge = data.maxAge
    set obj.MinAge = data.minAge
    
    set st = obj.%Save()
    
    quit obj
]]></Implementation>
</Method>

<Method name="GetTitleAge">
<ClassMethod>1</ClassMethod>
<FormalSpec>youngestPartnerMinAge,youngestPartnerMaxAge,oldestPartnerMinAge,oldestPartnerMaxAge</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set result = ""
	
	if (youngestPartnerMinAge = oldestPartnerMinAge){
		set result = youngestPartnerMinAge_" - "
	}
	else{
		set result = oldestPartnerMinAge_"/"_youngestPartnerMinAge_" - "
	}
	
	if (oldestPartnerMaxAge = youngestPartnerMaxAge){
		set result = result_oldestPartnerMaxAge
	}
	else{
		set result = result_oldestPartnerMaxAge_"/"_youngestPartnerMaxAge
	}
	
	quit result
]]></Implementation>
</Method>

<Method name="ReUpdate">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	
	
	do ..ReUpdateOne("1", "Взрослые", "7108024F-7A08-4FC5-9F76-18220887A7C8", 19, 99, 19, 99)
	do ..ReUpdateOne("2", "Молодежь", "C4515A91-C0ED-4F68-809A-9F1443AF3544", 16, 18, 16, 18)
	do ..ReUpdateOne("3", "Д-1", "C61DD6D3-C807-4FCF-AD63-5311E5C0BF43", 0, 9, 0, 9)
	do ..ReUpdateOne("4", "Д-2", "BF7A236F-F28E-42D3-A07F-6D931E48A9B9", 10, 11, 10, 11)
	do ..ReUpdateOne("5", "Ю-1", "8665AFB4-90A3-4E87-BEF6-970D483CB82A", 12, 13, 12, 13)
	do ..ReUpdateOne("6", "Ю-2", "9E0168F9-6003-4EC7-AEB9-1CE52D688A35", 14, 15, 14, 15)
	do ..ReUpdateOne("7", "С-1", "2FC2E1E9-8A68-40A1-B943-E940125F6182", 30, 99, 35, 99, $$$YES)
	do ..ReUpdateOne("8", "С-2", "4AEB5D76-2F80-438F-A396-E16CE297BB1E", 40, 99, 45, 99, $$$YES)
	do ..ReUpdateOne("9", "С-3", "2FC2E1E9-8A68-40A1-B943-E9401SENIOR3", 50, 99, 55, 99, $$$YES)
	do ..ReUpdateOne("10", "С-4", "4AEB5D76-2F80-438F-A396-E16CESENIOR4", 60, 99, 65, 99, $$$YES)
	do ..ReUpdateOne("11", "Взрослые+Молодежь", "FB43C02D-9611-458E-BB8F-C9D6F563F308", 16, 99, 16, 99)
	do ..ReUpdateOne("12", "Ю-2+Ю-1", "A5976D0D-5049-4259-A85D-CFABAC535A61", 12, 15, 12, 15)
	do ..ReUpdateOne("13", "Д-2+Д-1", "C3E499CF-300B-4D19-B5CF-2B497D8D2899", 0, 11, 0, 11)
	do ..ReUpdateOne("14", "Сеньоры 2+1", "F65CDBD0-3C7B-42B8-B9A7-585453E71075", 30, 99, 35, 99, $$$YES)
	do ..ReUpdateOne("15", "Н-6", "516F4FAC-F1CE-43A2-A97B-B40BBE203EEE", 0, 10, 0, 10)
	do ..ReUpdateOne("16", "Н-5", "C66DB327-9BB0-4E6C-BDF5-C0CD67DDBA62", 0, 10, 0, 10)
	do ..ReUpdateOne("17", "Н-4", "A5763E6E-6A29-4AF2-9D11-859008C62F21", 0, 10, 0, 10)
	do ..ReUpdateOne("18", "Н-3", "DE134BC9-A46D-40D3-BCDC-0D4236EFD95F", 0, 10, 0, 10)
	do ..ReUpdateOne("19", "Н-2", "97CB1BCC-F46C-466F-AFA7-EAEDD151B5A2", 0, 10, 0, 10)
	do ..ReUpdateOne("20", "Молодежь до 21", "74B08EC4-8F76-4AA7-BD27-234B25006831", 16, 20, 16, 20)
	do ..ReUpdateOne("21", "WDSF Open", "EADFE474-71FE-43B1-9F39-2304E2DFB45D", 16, 99, 16, 99)
	do ..ReUpdateOne("22", "Молодежь-2", "8E10AE1D-579E-40ED-8525-76A6E51C9592", 19, 20, 19, 20)
	do ..ReUpdateOne("23", "Н5+Н6", "9D098846-6FA2-4CEA-9ABD-A2CCF30DFA13", 0, 10, 0, 10)
]]></Implementation>
</Method>

<Method name="ReUpdateOne">
<ClassMethod>1</ClassMethod>
<FormalSpec>oldId,code,lTextId,ypMin,ypMax,opMin,opMax,spec=0</FormalSpec>
<Implementation><![CDATA[
	set obj = ..%New()
	set obj.Code = code
	set obj.Name = ##class(Dance.Data.Localization.LText).GuidIdxOpen(lTextId)
	set obj.YoungestPartnerMaxAge = ypMax
	set obj.YoungestPartnerMinAge = ypMin
	set obj.OldestPartnerMaxAge = opMax
	set obj.OldestPartnerMinAge = opMin
	set obj.SpecialLogic = spec
	set st = obj.%Save()
	w !,st
	if (obj.%Id() '= oldId){
		w !, "oldId not set ="_oldId
	}
]]></Implementation>
</Method>

<Method name="TestAges">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do ..TestCouple(14, 17)
	do ..TestCouple(20, 22)
	do ..TestCouple(31, 34)
	do ..TestCouple(31, 36)
	do ..TestCouple(29, 40)
]]></Implementation>
</Method>

<Method name="TestCouple">
<ClassMethod>1</ClassMethod>
<FormalSpec>maleAge,femaleAge</FormalSpec>
<Implementation><![CDATA[
	w !,!, "MaleAge = "_maleAge_", FemaleAge = "_femaleAge
	
	set minAge = femaleAge
	set maxAge = maleAge
	
	if (femaleAge > maleAge){
		set minAge = maleAge
		set maxAge = femaleAge
	}
	
	&sql(DECLARE CurAgeCategories CURSOR FOR 
		 	SELECT Code, TitleAge
		 	FROM Dance_Data.AgeCategory
		 	WHERE YoungestPartnerMinAge <= :minAge AND :minAge <= YoungestPartnerMaxAge 
      		    AND OldestPartnerMinAge <= :maxAge AND :maxAge <= OldestPartnerMaxAge)	
		
	&sql(OPEN CurAgeCategories)
	for  
	{	
		&sql(FETCH CurAgeCategories INTO :code, :titleAge) 
		quit:(SQLCODE '= 0)
		
		w !,"-> "_code_" ("_titleAge_")"
			
	}
	
	&sql(CLOSE CurAgeCategories)
]]></Implementation>
</Method>

<Method name="GetAgeGategoriesForCouple">
<ClassMethod>1</ClassMethod>
<FormalSpec>maleAge:%Integer,femaleAge:%Integer</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set list = ##class(%ListOfObjects).%New()
	
	set minAge = femaleAge
	set maxAge = maleAge
	
	if (femaleAge > maleAge){
		set minAge = maleAge
		set maxAge = femaleAge
	}
	
	&sql(DECLARE CurAge2Categories CURSOR FOR 
		 	SELECT ID
		 	FROM Dance_Data.AgeCategory
		 	WHERE YoungestPartnerMinAge <= :minAge AND :minAge <= YoungestPartnerMaxAge 
      		    AND OldestPartnerMinAge <= :maxAge AND :maxAge <= OldestPartnerMaxAge)	
		
	&sql(OPEN CurAge2Categories)
	for  
	{	
		&sql(FETCH CurAge2Categories INTO :id) 
		quit:(SQLCODE '= 0)
		
		do list.Insert(..%OpenId(id).ConvertToProxyObject())
	}
	
	&sql(CLOSE CurAge2Categories)
	
	quit list
]]></Implementation>
</Method>

<Method name="GetAllAvailableList">
<ClassMethod>1</ClassMethod>
<FormalSpec>maleAge:%Integer,femaleAge:%Integer</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	set list = $LISTBUILD("0")
	
	set minAge = femaleAge
	set maxAge = maleAge
	
	if (femaleAge > maleAge){
		set minAge = maleAge
		set maxAge = femaleAge
	}
	
	set count = 0
	
	&sql(DECLARE CurAC CURSOR FOR 
		 	SELECT 
			ID
			FROM Dance_Data.AgeCategory
			WHERE SpecialLogic = 0 AND YoungestPartnerMinAge <= :maxAge AND :maxAge <= OldestPartnerMaxAge
			
			UNION
			
			SELECT 
			ID
			FROM Dance_Data.AgeCategory
			WHERE SpecialLogic = 1 AND YoungestPartnerMinAge <= :minAge AND :minAge <= YoungestPartnerMaxAge 
      		   					     AND OldestPartnerMinAge <= :maxAge AND :maxAge <= OldestPartnerMaxAge)	
		
	&sql(OPEN CurAC)
	for  
	{	
		&sql(FETCH CurAC INTO :id) 
		quit:(SQLCODE '= 0)
		
		set count = count + 1
		set $LIST(list, count) = id
	}
	
	&sql(CLOSE CurAC)
	
	
	if ($LISTLENGTH(list) = 0) set list = $LISTBUILD("0")
	
	quit list
]]></Implementation>
</Method>

<Method name="TestPrt">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	try{
		set count = 0
		&sql(DECLARE Prt2Cur CURSOR FOR 
		 	SELECT ID, FullName, Couple
		 	FROM Dance_Data.ParticipantCoupleUDSR
		 	WHERE Competition->Tournament = 6)	
		
		&sql(OPEN Prt2Cur)
		for  
		{	
			&sql(FETCH Prt2Cur INTO :id, :fullName, :coupleId) 
			quit:(SQLCODE '= 0)
		
			set count = count + 1
		
		
			set prt = ##class(ParticipantCoupleUDSR).%OpenId(id)
		
			set couple = ##class(Dance.Data.CoupleUDSR).%OpenId(coupleId).ConvertToProxyObject()
			set maleAge = $P($ZD($NOW(),3), "-", 1) - $P(couple.man.dob, "-", 1)
			set femaleAge = $P($ZD($NOW(),3), "-", 1) - $P(couple.woman.dob, "-", 1)

			set prtCatList = ..GetAllAvailableList(maleAge, femaleAge)
		
			if ($LISTFIND(prtCatList, prt.Competition.AgeCategory.%Id()) = 0){
				w !,!,count_" -> "_fullName_"("_maleAge_", "_femaleAge_"). List="_$LISTTOSTRING(prtCatList)
				w !,"Age category = "_prt.Competition.AgeCategory.Code
			}
		
		}
	
		&sql(CLOSE Prt2Cur)
	}
	catch(ex){
		w !, $System.Status.GetErrorText(ex.AsStatus())
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.AgeCategoryD</DataLocation>
<DefaultData>AgeCategoryDefaultData</DefaultData>
<IdLocation>^Dance.Data.AgeCategoryD</IdLocation>
<IndexLocation>^Dance.Data.AgeCategoryI</IndexLocation>
<StreamLocation>^Dance.Data.AgeCategoryS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="AgeCategoryDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>MaxAge</Value>
</Value>
<Value name="4">
<Value>MinAge</Value>
</Value>
<Value name="5">
<Value>Code</Value>
</Value>
<Value name="6">
<Value>YoungestPartnerMaxAge</Value>
</Value>
<Value name="7">
<Value>YoungestPartnerMinAge</Value>
</Value>
<Value name="8">
<Value>OldestPartnerMaxAge</Value>
</Value>
<Value name="9">
<Value>OldestPartnerMinAge</Value>
</Value>
<Value name="10">
<Value>SpecialLogic</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.AgeCategoryWDSF">
<Super>%Persistent</Super>
<TimeCreated>63444,2177.140809</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="AllowedToDance">
<Type>AgeCategoryWDSF</Type>
<Collection>list</Collection>
<Parameter name="CollectionDisplayDelimiter" value="&quot;,&quot;"/>
</Property>

<Property name="Division">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="FromAge">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="ToAge">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="MaxDob">
<Type>%Date</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {MaxDob} = ##class({%%CLASSNAME}).GetMaxDob({FromAge})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="MinDob">
<Type>%Date</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {MinDob} = ##class({%%CLASSNAME}).GetMinDob({ToAge})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Index name="NameIdx">
<Properties>Name</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<FormalSpec>params:%ZEN.proxyObject=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.name = ..Name
	set proxy.fromAge = ..FromAge
	set proxy.toAge = ..ToAge
	set proxy.maxDob = $ZD(..MaxDob, 3)
	set proxy.minDob = $ZD(..MinDob, 3)
	set proxy.division = ..Division
	
	set proxy.allowedToDance = ##class(%ListOfDataTypes).%New()
	for i=1:1:..AllowedToDance.Count(){
		do proxy.allowedToDance.Insert(..AllowedToDance.GetAt(i).Name)
	}
	
	quit proxy
]]></Implementation>
</Method>

<Method name="GetByName">
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>Discipline</ReturnType>
<Implementation><![CDATA[	quit ..NameIdxOpen(name)
]]></Implementation>
</Method>

<Method name="GetMaxDob">
<ClassMethod>1</ClassMethod>
<FormalSpec>fromAge:%Integer</FormalSpec>
<ReturnType>%Date</ReturnType>
<Implementation><![CDATA[
	set currYear = $P($ZD($ZTS, 3), "-", 1)
	quit $ZDH((currYear - fromAge)_"-12-31", 3)
]]></Implementation>
</Method>

<Method name="GetMinDob">
<ClassMethod>1</ClassMethod>
<FormalSpec>toAge:%Integer</FormalSpec>
<ReturnType>%Date</ReturnType>
<Implementation><![CDATA[
	set currYear = $P($ZD($ZTS, 3), "-", 1)
	quit $ZDH((currYear - toAge)_"-01-01", 3)
]]></Implementation>
</Method>

<Method name="CheckAllowed">
<ClassMethod>1</ClassMethod>
<FormalSpec>age:%String,checkingAge:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	quit:(age = checkingAge) $$$YES
	
	set ageObj = ..NameIdxOpen(age)
	for i=1:1:ageObj.AllowedToDance.Count(){
		if (ageObj.AllowedToDance.GetAt(i).Name = checkingAge) return $$$YES
	}
	
	quit $$$NO
]]></Implementation>
</Method>

<Method name="Import">
<Description>
w ##class(Dance.Data.AgeCategoryWDSF).Import()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		set groups = ##class(Dance.Wdsf.ControllerAPI).GetAgeGroups(.st).ageGroups
		
		for i=1:1:groups.Count(){
			set group = groups.GetAt(i)
			
			if (..NameIdxExists(group.name) = $$$YES){
				set age = ..NameIdxOpen(group.name)
			}
			else{
				set age = ..%New()
				set age.Name = group.name
			}
			
			set age.ToAge = group.toAge
			set age.FromAge = group.fromAge
			set age.Division = group.division
			
			
			$$$THROWONERROR(st, age.%Save())	 
		}
		
		for i=1:1:groups.Count(){
			set group = groups.GetAt(i)
			set age = ..NameIdxOpen(group.name)
			
			do age.AllowedToDance.Clear()
			if (age.AllowedToDance.FindObjectId(age.%Id()) = "") {
				do age.AllowedToDance.Insert(age)
			}
			
			for k=1:1:group.allowedToDance.Count(){
				set storedAge = ..NameIdxOpen(group.allowedToDance.GetAt(k))
				if (age.AllowedToDance.FindObjectId(storedAge.%Id()) = ""){
					do age.AllowedToDance.Insert(storedAge)
				}
			}
			$$$THROWONERROR(st, age.%Save())
		}
		
		TCOMMIT
	}
	catch(ex){
		TROLLBACK
		
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetAllAvailableList">
<ClassMethod>1</ClassMethod>
<FormalSpec>ageCategoryName:%String</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	set list = $LISTBUILD("0")
	
	set prtAC = ..NameIdxOpen(ageCategoryName)
	for i=1:1:prtAC.AllowedToDance.Count(){
		set $LIST(list, i) = prtAC.AllowedToDance.GetAt(i).%Id()
	}
	
	if ($LISTLENGTH(list) = 0) set list = $LISTBUILD("0")
	
	quit list
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.AgeCategoryWDSFD</DataLocation>
<DefaultData>AgeCategoryWDSFDefaultData</DefaultData>
<IdLocation>^Dance.Data.AgeCategoryWDSFD</IdLocation>
<IndexLocation>^Dance.Data.AgeCategoryWDSFI</IndexLocation>
<StreamLocation>^Dance.Data.AgeCategoryWDSFS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="AgeCategoryWDSFDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>AllowedToDance</Value>
</Value>
<Value name="4">
<Value>Division</Value>
</Value>
<Value name="5">
<Value>FromAge</Value>
</Value>
<Value name="6">
<Value>ToAge</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.Competition">
<Description>
Competition in the tournament, has participants</Description>
<Super>%Persistent</Super>
<TimeCreated>63289,41033.08287</TimeCreated>

<Property name="Tournament">
<Type>Dance.Data.Tournament</Type>
<Cardinality>one</Cardinality>
<Inverse>Competitions</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="IdInternal">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="IdExternal">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Name">
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="Discipline">
<Type>Discipline</Type>
<Required>1</Required>
</Property>

<Property name="AgeCategory">
<Type>AgeCategory</Type>
<Required>1</Required>
</Property>

<Property name="DancerClasses">
<Type>DancerClass</Type>
<Collection>array</Collection>
<Required>1</Required>
</Property>

<Property name="Type">
<Type>CompetitionType</Type>
<Required>1</Required>
</Property>

<Property name="StartDate">
<Type>%Date</Type>
<Required>1</Required>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="StartTime">
<Type>%Time</Type>
</Property>

<Property name="Price">
<Type>%Float</Type>
<Required>1</Required>
</Property>

<Property name="WDSF">
<Type>CompetitionWDSF</Type>
</Property>

<Property name="Limit">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="ParticipantsCountCalc">
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {ParticipantsCountCalc} = ##class({%%CLASSNAME}).GetParticipantsCount({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="ParticipantsCount">
<Type>%Integer</Type>
</Property>

<Property name="PaymentsCountCalc">
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {PaymentsCountCalc} = ##class({%%CLASSNAME}).GetPaymentsCount({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="PaymentsCount">
<Type>%Integer</Type>
</Property>

<Property name="IsActive">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Required>1</Required>
</Property>

<Property name="Regions">
<Type>CompetitionRegion</Type>
<Collection>array</Collection>
</Property>

<Index name="TournamentIdx">
<Properties>Tournament</Properties>
</Index>

<Index name="IdInternalIdx">
<Properties>IdInternal</Properties>
<Unique>1</Unique>
</Index>

<Index name="WDSFIdx">
<Properties>WDSF</Properties>
<Unique>1</Unique>
</Index>

<Property name="IsInternational">
<Type>%Boolean</Type>
</Property>

<Property name="IsClosed">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Index name="IsActiveIndex">
<Properties>IsActive</Properties>
</Index>

<Method name="ConvertToProxyObject">
<FormalSpec>params:%ZEN.proxyObject</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.id = ..%Id()
    set proxy.idInternal = ..IdInternal
    set proxy.idExternal = ..IdExternal 
    set proxy.isClosed = ..IsClosed = $$$YES
    
    set proxy.name = ..Name.Value
    set proxy.startDate = $ZDATE(..StartDate, 3)
    set proxy.startTime = $e(##class(%Library.Time).LogicalToDisplay(..StartTime), 1, 5)
    set proxy.price = ..Price
    set proxy.limit = ..Limit
       
    
    if (params.loadTournament){
        set proxy.tournament = ..Tournament.ConvertToProxyObject(params.tournamentParams)
    }
    
    if (params.loadDiscipline){
        set proxy.discipline = ..Discipline.ConvertToProxyObject()
    }
    
    if (params.loadAgeCategory){    
        set proxy.ageCategory = ..AgeCategory.ConvertToProxyObject()
    }
    
    if (params.loadType){
        set proxy.type = ..Type.ConvertToProxyObject()
    }
    
    if (params.loadWDSF) && $ISOBJECT(..WDSF){
        set proxy.wdsf = ..WDSF.ConvertToProxyObject()
        set proxy.isWDSF = $$$YES
    }
    
    set proxy.isInternational = ..IsInternational = $$$YES
    
    // DancerClasses array
    set proxy.dancerClasses = ##class(%ListOfObjects).%New()
    
    if (params.loadDancerClasses){
        set dcKey = ""
        for i=1:1:..DancerClasses.Count(){
            set dcKey = ..DancerClasses.Next(dcKey)
            set dc = ..DancerClasses.GetAt(dcKey)
            do proxy.dancerClasses.Insert(dc.ConvertToProxyObject())
        }
    }
    
    // DancerClasses array
    set proxy.dancerClasses = ##class(%ListOfObjects).%New()
    
    if (params.loadDancerClasses){
        set dcKey = ""
        for i=1:1:..DancerClasses.Count(){
            set dcKey = ..DancerClasses.Next(dcKey)
            set dc = ..DancerClasses.GetAt(dcKey)
            do proxy.dancerClasses.Insert(dc.ConvertToProxyObject())
        }
    }
    
    // Regions array
    set proxy.regions = ##class(%ListOfObjects).%New()
    
    if (params.loadDancerClasses){
        set key = ""
        for i=1:1:..Regions.Count(){
            set key = ..Regions.Next(key)
            set reg = ..Regions.GetAt(key)
            do proxy.regions.Insert(reg.ConvertToProxyObject())
        }
    }
    
    set proxy.participantsCount = ..ParticipantsCount
    
    set proxy.freeSlotsCount = 10000
    //if (params.loadPaymentsCount){
        set proxy.paymentsCount = ..PaymentsCount
        
        if (..Limit > 0){
            set proxy.freeSlotsCount = ..Limit - proxy.paymentsCount
            if (proxy.freeSlotsCount < 0){
                set proxy.freeSlotsCount = 0
            }
        }
    //}
    
    quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Create or update competition</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&st]]></FormalSpec>
<ReturnType>Competition</ReturnType>
<Implementation><![CDATA[
    do ##class(Dance.Utils.Journal).Create("Log", "Data.Competition.Save",
    "ID="_data.id_";"_
    "IdInternal="_data.idInternal_";"_
    "IdExternal="_data.idExternal_";"_
    "Name="_data.name_";"_
    "TournamentId="_data.tournamentId_";"_
    "DisciplineId="_data.discipline.id_";"_
    "AgeCategoryId="_data.ageCategory.id_";"_
    "TypeId="_data.type.id_";"_
    "StartDate="_data.startDate_";"_
    "Price="_data.price)
    
    
    if (data.id = ""){
        set trn = ##class(Dance.Data.Tournament).%OpenId(data.tournamentId)
        set cmp = ##class(Dance.Data.Competition).%New()
        set cmp.Name = ##class(Dance.Data.Localization.LText).Create(data.name)
        set cmp.Tournament = trn
    }
    else{
        set cmp = ##class(Dance.Data.Competition).%OpenId(data.id)
        set cmp.Name.Value = data.name
    }
    
    if (data.isWDSF = 1) && $ISOBJECT(data.wdsf){
        set cmp.WDSF = ##class(CompetitionWDSF).%OpenId(data.wdsf.id)
    }
    else{
        set cmp.WDSF = $$$NULLOREF
    }
    
    set cmp.IsInternational = data.isInternational
    set cmp.IsClosed = data.isClosed = 1
        
    set cmp.Discipline = ##class(Dance.Data.Discipline).%OpenId(data.discipline.id)
    set cmp.AgeCategory = ##class(Dance.Data.AgeCategory).%OpenId(data.ageCategory.id)
    set cmp.Type = ##class(Dance.Data.CompetitionType).%OpenId(data.type.id)
        
    set cmp.StartDate = $ZDATEH(data.startDate, 15)
    set cmp.StartTime = ##class(%Library.Time).DisplayToLogical(data.startTime)
        
    set cmp.Price = data.price
    if (data.limit = "") set data.limit = 0
    set cmp.Limit = data.limit
      
    set cmp.IdInternal = data.idInternal
    set cmp.IdExternal = data.idExternal
        
    // DancerClasses array
    do cmp.DancerClasses.Clear()
    for i=1:1:data.dancerClasses.Count(){
        continue:(data.dancerClasses.GetAt(i).selected '= $$$YES)
            
        set dancerClasses = ##class(Dance.Data.DancerClass).%OpenId(data.dancerClasses.GetAt(i).id,,.st)
        if $$$ISERR(st) return ##class(Dance.Utils.Msg).GetErrorStatus("error_DancerClassNotFound"," | "_st)
        
        do cmp.DancerClasses.SetAt(dancerClasses, dancerClasses.%Id())
    }
    
    // Regions
    do cmp.Regions.Clear()
    if (data.regions){
        for i=1:1:data.regions.Count(){
            continue:(data.regions.GetAt(i).selected '= $$$YES)
            
            set region = ##class(Dance.Data.CompetitionRegion).%OpenId(data.regions.GetAt(i).id,,.st)
            do cmp.Regions.SetAt(region, region.%Id())
        }
    }
        
    set st = cmp.%Save()
    
    if $$$ISOK(st){
        do ##class(Tournament).UpdateIsContainsLimit(cmp.Tournament.%Id())
        do ##class(Tournament).UpdateIsContainsSolo(cmp.Tournament.%Id())
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="Deactivate">
<Description>
Change IsActive property to 0</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ##class(Dance.Utils.Journal).Create("Log", "Data.Competition.Deactivate", "ID="_id_";")
    
    set cmp = ..%OpenId(id)
    set cmp.IsActive = 0
    set cmp.IdInternal = cmp.IdInternal_";"_id
    set cmp.IdExternal = cmp.IdExternal_";"_id
    
    set st = cmp.%Save()
    
    if $$$ISOK(st){
        do ##class(Tournament).UpdateIsContainsLimit(cmp.Tournament.%Id())
        do ##class(Tournament).UpdateIsContainsSolo(cmp.Tournament.%Id())
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetParticipantsCount">
<Description>
Participants count in the competition</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>competitionId:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
    set count = 0
    
    &sql(
    SELECT COUNT (FN)  As TotalCount INTO :count
	FROM
	(
		SELECT FullName->Value As FN
        FROM Dance_Data.Participant 
        WHERE Competition = :competitionId AND IsActive = 1
    	GROUP BY FullName->Value
    )
    )
    
    quit count
]]></Implementation>
</Method>

<Method name="GetPaymentsCount">
<Description>
Payments</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>competitionId:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
    set count = 0
    
    &sql(SELECT %NOLOCK COUNT(ID) INTO :count 
         FROM Dance_Data.Participant 
         WHERE Competition = :competitionId AND TicketStatus = 'Paid')
    
    quit count
]]></Implementation>
</Method>

<Method name="UpdateParticipantsCount">
<Description>
Обновить свойство: количество участников в группе</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>cmpId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set count = ..GetParticipantsCount(cmpId)
    &sql(UPDATE %NOLOCK Dance_Data.Competition
         SET ParticipantsCount = :count
         WHERE ID = :cmpId)

    quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdatePaymentsCount">
<Description>
Обновить свойство: количество платежей в группе</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>cmpId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set count = ..GetPaymentsCount(cmpId)
    &sql(UPDATE %NOLOCK Dance_Data.Competition
         SET PaymentsCount = :count
         WHERE ID = :cmpId)

    quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdateAllByTournament">
<Description>
Обновить свойства всех групп турнира</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
    
    try{       
        //TSTART
        
        &sql(DECLARE CmpCurs CURSOR FOR
             SELECT %NOLOCK ID
             FROM Dance_Data.Competition
             WHERE Tournament = :trnId)
        
        &sql(OPEN CmpCurs)
        for{
            &sql(FETCH CmpCurs INTO :id) 
            quit:(SQLCODE '= 0)
            
            do ..UpdateParticipantsCount(id)
            do ..UpdatePaymentsCount(id)
        }
        
        &sql(CLOSE CmpCurs)
        
        //TCOMMIT
    }
    catch(ex){
        //TROLLBACK 1
        
        set status = ex.AsStatus()
    }
    
    quit status
]]></Implementation>
</Method>

<Method name="IsAvailableForDancerClass">
<Description>
Доступна ли группа для класса танцора</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>cmpId:%String,classId:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    set SQLCODE = ""
    set recordId = ""
    &sql(SELECT ID INTO :recordId
         FROM Dance_Data.Competition_DancerClasses
         WHERE Competition = :cmpId AND DancerClasses = :classId)
    
    quit:(SQLCODE = 0) $$$YES
    
    quit $$$NO
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.CompetitionD</DataLocation>
<DefaultData>CompetitionDefaultData</DefaultData>
<IdLocation>^Dance.Data.CompetitionD</IdLocation>
<IndexLocation>^Dance.Data.CompetitionI</IndexLocation>
<StreamLocation>^Dance.Data.CompetitionS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="AgeCategories">
<Attribute>AgeCategories</Attribute>
<Structure>subnode</Structure>
<Subscript>"AgeCategories"</Subscript>
</Data>
<Data name="CompetitionDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Tournament</Value>
</Value>
<Value name="3">
<Value>StartDate</Value>
</Value>
<Value name="4">
<Value>StartTime</Value>
</Value>
<Value name="5">
<Value>Name</Value>
</Value>
<Value name="6">
<Value>Discipline</Value>
</Value>
<Value name="7">
<Value>Price</Value>
</Value>
<Value name="8">
<Value>Currency</Value>
</Value>
<Value name="9">
<Value>AgeCategory</Value>
</Value>
<Value name="10">
<Value>TournamentUDSRID</Value>
</Value>
<Value name="11">
<Value>GroupUDSRID</Value>
</Value>
<Value name="12">
<Value>GroupUDSRIDExt</Value>
</Value>
<Value name="13">
<Value>Limit</Value>
</Value>
<Value name="14">
<Value>Solo</Value>
</Value>
<Value name="15">
<Value>Type</Value>
</Value>
<Value name="16">
<Value>IsInternational</Value>
</Value>
<Value name="17">
<Value>IdInternal</Value>
</Value>
<Value name="18">
<Value>IdExternal</Value>
</Value>
<Value name="19">
<Value>IsActive</Value>
</Value>
<Value name="20">
<Value>IdWDSF</Value>
</Value>
<Value name="21">
<Value>WDSF</Value>
</Value>
<Value name="22">
<Value>IsClosed</Value>
</Value>
<Value name="23">
<Value>ParticipantsCount</Value>
</Value>
<Value name="24">
<Value>PaymentsCount</Value>
</Value>
</Data>
<Data name="DancerClasses">
<Attribute>DancerClasses</Attribute>
<Structure>subnode</Structure>
<Subscript>"DancerClasses"</Subscript>
</Data>
<Data name="Regions">
<Attribute>Regions</Attribute>
<Structure>subnode</Structure>
<Subscript>"Regions"</Subscript>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.CompetitionRegion">
<Super>%Persistent</Super>
<TimeCreated>63849,77704.249723</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="CodeNumbers">
<Type>%String</Type>
<Collection>list</Collection>
<Parameter name="CollectionDisplayDelimiter" value="&quot;,&quot;"/>
</Property>

<Method name="ConvertToProxyObject">
<Description>
Convert to proxyObject (for JSON)</Description>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.id = ..%Id()
    set proxy.name = ..Name
    quit proxy
]]></Implementation>
</Method>

<Method name="ImportData">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ..%KillExtent()
    do ..Import("1", "Республика Адыгея")
    do ..Import("2, 102", "Республика Башкортостан")
    do ..Import("3", "Республика Бурятия")
    do ..Import("4", "Республика Алтай (Горный Алтай)")
    do ..Import("5", "Республика Дагестан")
    do ..Import("6", "Республика Ингушетия")
    do ..Import("7", "Кабардино-Балкарская Республика")
    do ..Import("8", "Республика Калмыкия")
    do ..Import("9", "Республика Карачаево-Черкессия")
    do ..Import("10", "Республика Карелия")
    do ..Import("11", "Республика Коми")
    do ..Import("12", "Республика Марий Эл")
    do ..Import("13, 113", "Республика Мордовия")
    do ..Import("14", "Республика Саха (Якутия)")
    do ..Import("15", "Республика Северная Осетия — Алания")
    do ..Import("16, 116", "Республика Татарстан")
    do ..Import("17", "Республика Тыва")
    do ..Import("18", "Удмуртская Республика")
    do ..Import("19", "Республика Хакасия")
    do ..Import("21, 121", "Чувашская Республика")
    do ..Import("22", "Алтайский край")
    do ..Import("23, 93, 123", "Краснодарский край")
    do ..Import("24, 84, 88, 124", "Красноярский край")
    do ..Import("25, 125", "Приморский край")
    do ..Import("26", "Ставропольский край")
    do ..Import("27", "Хабаровский край")
    do ..Import("28", "Амурская область")
    do ..Import("29", "Архангельская область")
    do ..Import("30", "Астраханская область")
    do ..Import("31", "Белгородская область")
    do ..Import("32", "Брянская область")
    do ..Import("33", "Владимирская область")
    do ..Import("34, 134", "Волгоградская область")
    do ..Import("35", "Вологодская область")
    do ..Import("36", "Воронежская область")
    do ..Import("37", "Ивановская область")
    do ..Import("38, 85", "Иркутская область")
    do ..Import("39, 91", "Калининградская область")
    do ..Import("40", "Калужская область")
    do ..Import("41", "Камчатский край")
    do ..Import("42", "Кемеровская область")
    do ..Import("43", "Кировская область")
    do ..Import("44", "Костромская область")
    do ..Import("45", "Курганская область")
    do ..Import("46", "Курская область")
    do ..Import("47", "Ленинградская область")
    do ..Import("48", "Липецкая область")
    do ..Import("49", "Магаданская область")
    do ..Import("50, 90, 150, 190", "Московская область")
    do ..Import("51", "Мурманская область")
    do ..Import("52, 152", "Нижегородская область")
    do ..Import("53", "Новгородская область")
    do ..Import("54", "Новосибирская область")
    do ..Import("55", "Омская область")
    do ..Import("56", "Оренбургская область")
    do ..Import("57", "Орловская область")
    do ..Import("58", "Пензенская область")
    do ..Import("59, 81, 159", "Пермский край")
    do ..Import("60", "Псковская область")
    do ..Import("61, 161", "Ростовская область")
    do ..Import("62", "Рязанская область")
    do ..Import("63, 163", "Самарская область")
    do ..Import("64, 164", "Саратовская область")
    do ..Import("65", "Сахалинская область")
    do ..Import("66, 96", "Свердловская область")
    do ..Import("67", "Смоленская область")
    do ..Import("68", "Тамбовская область")
    do ..Import("69", "Тверская область")
    do ..Import("70", "Томская область")
    do ..Import("71", "Тульская область")
    do ..Import("72", "Тюменская область")
    do ..Import("73, 173", "Ульяновская область")
    do ..Import("74, 174", "Челябинская область")
    do ..Import("75, 80", "Забайкальский край")
    do ..Import("76", "Ярославская область")
    do ..Import("77, 97, 99, 177, 197, 199, 777", "г. Москва")
    do ..Import("78, 98, 178", "г. Санкт-Петербург")
    do ..Import("79", "Еврейская автономная область")
    do ..Import("82", "Республика Крым")
    do ..Import("83", "Ненецкий автономный округ")
    do ..Import("86, 186", "Ханты-Мансийский автономный округ — Югра")
    do ..Import("87", "Чукотский автономный округ")
    do ..Import("89", "Ямало-Ненецкий автономный округ")
    do ..Import("92", "г. Севастополь")
    //do ..Import("94", "Территории, находящиеся за пределами РФ и обслуживаемые Департаментом режимных объектов МВД России")
    do ..Import("95", "Чеченская республика")
    q $$$OK
]]></Implementation>
</Method>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<FormalSpec>codes,name</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set region = ..%New()
    set region.Name = name
    
    set list = $LISTFROMSTRING(codes, ",")
    for i=1:1:$LL(list){
        set code = $REPLACE($LIST(list, i), " ", "")
        d region.CodeNumbers.Insert(code)
    }
    
    q region.%Save()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.CompetitionRegionD</DataLocation>
<DefaultData>CompetitionRegionDefaultData</DefaultData>
<IdLocation>^Dance.Data.CompetitionRegionD</IdLocation>
<IndexLocation>^Dance.Data.CompetitionRegionI</IndexLocation>
<StreamLocation>^Dance.Data.CompetitionRegionS</StreamLocation>
<Data name="CompetitionRegionDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>CodeNumbers</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.CompetitionType">
<Description>
Type of the competition - couple, solo...</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63303,60707.699288</TimeCreated>

<Property name="Name">
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="Code">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="CodeIdx">
<Properties>Code</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<FormalSpec>params:%ZEN.proxyObject=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.name = ..Name.Value
	set proxy.code = ..Code
	quit proxy
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.CompetitionTypeD</DataLocation>
<DefaultData>CompetitionTypeDefaultData</DefaultData>
<IdLocation>^Dance.Data.CompetitionTypeD</IdLocation>
<IndexLocation>^Dance.Data.CompetitionTypeI</IndexLocation>
<StreamLocation>^Dance.Data.CompetitionTypeS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="CompetitionTypeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Code</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.CompetitionWDSF">
<Super>%Persistent</Super>
<TimeCreated>63443,54758.442836</TimeCreated>

<Property name="IdWDSF">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="AgeCategory">
<Type>AgeCategoryWDSF</Type>
<Required>1</Required>
</Property>

<Property name="Country">
<Type>Country</Type>
<Required>1</Required>
</Property>

<Property name="StartDate">
<Type>%Date</Type>
<Required>1</Required>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="Discipline">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Division">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="IsSolo">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="LastModifiedWDSF">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="LastSyncWDSF">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="Location">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="CStatus">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Type">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="TournamentId">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Index name="IdWDSFIdx">
<IdKey>1</IdKey>
<Properties>IdWDSF</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<FormalSpec>params:%ZEN.proxyObject=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.ageCategory = ..AgeCategory.ConvertToProxyObject()
	set proxy.date = $ZD(..StartDate, 3)
	set proxy.country = ..Country.ConvertToProxyObject()
	set proxy.location = ..Location
	set proxy.status = ..CStatus
	set proxy.type = ..Type
	set proxy.discipline = ..Discipline
	set proxy.division = ..Division
	set proxy.isSolo = ..IsSolo
	set proxy.LastSyncWDSF = ..LastSyncWDSF
	set proxy.LastModifiedWDSF = ..LastModifiedWDSF
	set proxy.TournamentId = ..TournamentId
	
	quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&st:%Status]]></FormalSpec>
<ReturnType>CompetitionWDSF</ReturnType>
<Implementation><![CDATA[
	#dim obj As CompetitionWDSF
	
	if (..IdWDSFIdxExists(data.id)){
		set obj = ..IdWDSFIdxOpen(data.id)
	}
	else{
		set obj = ..%New()
		set obj.IdWDSF = data.id
	}
	
	set obj.AgeCategory = ##class(AgeCategoryWDSF).GetByName(data.ageGroup)
	set obj.Country = ##class(Country).WDSFNameIdxOpen(data.country)
	set obj.StartDate = $ZDH(data.date, 3)
	set obj.Discipline = data.discipline
	set obj.Division = data.division
	set obj.IsSolo = data.isSolo
	set obj.LastModifiedWDSF = data.lastModifiedWDSF
	set obj.LastSyncWDSF = data.lastSyncWDSF
	set obj.Location = data.location
	set obj.CStatus = data.status
	set obj.Type = data.type
	set obj.TournamentId = data.tournament.id
	set st = obj.%Save()
	
	quit obj
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
 {
      "ageGroup": "MASTER CLASS I",
      "country": "Germany",
      "date": "2014-08-12",
      "discipline": "STANDARD",
      "division": "Professional",
      "id": 46870,
      "isSolo": 0,
      "lastModifiedWDSF": "2014-08-12 18:18:22",
      "lastSyncWDSF": "2014-09-01 18:40:41",
      "location": "Stuttgart",
      "selfLink": "http://localhost:57772/csp/wdsfcontroller/admin/competition/46870",
      "status": "Closed",
      "tournament": {
        "ageGroups": "YOUTH, ADULT, SENIOR I, MASTER CLASS I, MASTER CLASS II, SENIOR II, SENIOR III, SENIOR IV",
        "competitionsCount": 14,
        "country": "Germany",
        "disciplines": "LATIN, STANDARD",
        "endDate": "2014-08-16",
        "id": 5451,
        "selfLink": "http://localhost:57772/csp/wdsfcontroller/admin/tournament/5451",
        "startDate": "2014-08-12",
        "types": "GRAND SLAM, OPEN, PD, PD SUPER GRAND PRIX"
      },
      type

*/
]]></Content>
</UDLText>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.CompetitionWDSFD</DataLocation>
<DefaultData>CompetitionWDSFDefaultData</DefaultData>
<IdLocation>^Dance.Data.CompetitionWDSFD</IdLocation>
<IndexLocation>^Dance.Data.CompetitionWDSFI</IndexLocation>
<StreamLocation>^Dance.Data.CompetitionWDSFS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="CompetitionWDSFDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>AgeGroup</Value>
</Value>
<Value name="3">
<Value>Country</Value>
</Value>
<Value name="4">
<Value>Date</Value>
</Value>
<Value name="5">
<Value>Discipline</Value>
</Value>
<Value name="6">
<Value>Division</Value>
</Value>
<Value name="7">
<Value>IdWDSF</Value>
</Value>
<Value name="8">
<Value>IsSolo</Value>
</Value>
<Value name="9">
<Value>LastModifiedWDSF</Value>
</Value>
<Value name="10">
<Value>LastSyncWDSF</Value>
</Value>
<Value name="11">
<Value>Location</Value>
</Value>
<Value name="12">
<Value>Status</Value>
</Value>
<Value name="13">
<Value>TournamentId</Value>
</Value>
<Value name="14">
<Value>AgeCategory</Value>
</Value>
<Value name="15">
<Value>CStatus</Value>
</Value>
<Value name="16">
<Value>StartDate</Value>
</Value>
<Value name="17">
<Value>Type</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.Country">
<Description>
WDSF Countries</Description>
<Super>%Persistent</Super>
<TimeCreated>63296,4409.292627</TimeCreated>

<Property name="Name">
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="WDSFName">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="WDSFNameIdx">
<Properties>WDSFName</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<FormalSpec>params:%ZEN.proxyObject=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.name = ..Name.Value	
	quit proxy
]]></Implementation>
</Method>

<Method name="GetByName">
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String</FormalSpec>
<ReturnType>Country</ReturnType>
<Implementation><![CDATA[
	set id = ""
	
	&sql(SELECT country.ID INTO :id
		 FROM Dance_Data.Country as country INNER JOIN
		 Dance_Data_Localization.LTextValue as ltval ON country.Name = ltval.LText
		 WHERE ltval.Value = :name)

	set country = ..%OpenId(id)
	
	if '$ISOBJECT(country) set country = ..WDSFNameIdxOpen("--Unknown--")
	
	quit country
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.CountryD</DataLocation>
<DefaultData>CountryDefaultData</DefaultData>
<IdLocation>^Dance.Data.CountryD</IdLocation>
<IndexLocation>^Dance.Data.CountryI</IndexLocation>
<StreamLocation>^Dance.Data.CountryS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="CountryDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>WDSFName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.Couple">
<Description>
Couples</Description>
<Super>%Persistent</Super>
<TimeCreated>63274,63488.46443</TimeCreated>

<Property name="Man">
<Type>Dance.Data.Person</Type>
<Required>1</Required>
</Property>

<Property name="Woman">
<Type>Dance.Data.Person</Type>
<Required>1</Required>
</Property>

<Index name="ManIdx">
<Data>Man</Data>
<Properties>Man</Properties>
</Index>

<Index name="WomanIdx">
<Data>Woman</Data>
<Properties>Woman</Properties>
</Index>

<Index name="CommonIdx">
<Properties>Man,Woman</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<FormalSpec>params:%ZEN.proxyObject=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	
	set proxy.id = ..%Id()
	set proxy.man = ..Man.ConvertToProxyObject()
	set proxy.woman = ..Woman.ConvertToProxyObject()

	quit proxy
]]></Implementation>
</Method>

<Method name="GetFullName">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..Man.GetFullName()_"; "_..Woman.GetFullName()
]]></Implementation>
</Method>

<Method name="Create">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[manId:%String,womanId:%String,&status]]></FormalSpec>
<ReturnType>Couple</ReturnType>
<Implementation><![CDATA[
	if ..CommonIdxExists(manId, womanId) quit ..CommonIdxOpen(manId, womanId)
	
	set obj = ..%New()
	set obj.Man = ##class(Dance.Data.Person).%OpenId(manId)
	set obj.Woman = ##class(Dance.Data.Person).%OpenId(womanId)
	set status = obj.%Save()
	
	quit obj
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.CoupleD</DataLocation>
<DefaultData>CoupleDefaultData</DefaultData>
<IdLocation>^Dance.Data.CoupleD</IdLocation>
<IndexLocation>^Dance.Data.CoupleI</IndexLocation>
<StreamLocation>^Dance.Data.CoupleS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="CoupleDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Man</Value>
</Value>
<Value name="3">
<Value>Woman</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.CoupleUDSR">
<Super>Dance.Data.Couple</Super>
<TimeCreated>63436,60731.792448</TimeCreated>

<Method name="ConvertToProxyObject">
<FormalSpec>params:%ZEN.proxyObject=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##super()
    set proxy.type = "UDSR"
    set proxy.otherInfo = proxy.man.otherInfo
    
        
    if (##class(MatchingCoupleUDSRWDSF).UDSRIdxExists(..%Id())){
        set coupleWDSF = ##class(MatchingCoupleUDSRWDSF).UDSRIdxOpen(..%Id()).WDSF
        set proxy.idWDSF = coupleWDSF.%Id()
        set proxy.man.idWDSF = coupleWDSF.Man.%Id()
        set proxy.man.numberWDSF = coupleWDSF.Man.Number
        set proxy.woman.idWDSF = coupleWDSF.Woman.%Id()
        set proxy.woman.numberWDSF = coupleWDSF.Woman.Number
    }
    
    if (proxy.otherInfo.club = "") {
        set proxy.otherInfo.club = proxy.woman.otherInfo.club 
    }
    
    if (proxy.otherInfo.city = "") {
        set proxy.otherInfo.city = proxy.woman.otherInfo.city 
    }
    
    quit proxy
]]></Implementation>
</Method>

<Method name="GetByNumbers">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[manNumber:%String,womanNumber:%String,&st]]></FormalSpec>
<ReturnType>Couple</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    #dim obj As CoupleUDSR = ""
    
    set (coupleId, SQLCODE) = ""
    &sql(SELECT ID INTO :coupleId FROM Dance_Data.CoupleUDSR WHERE (Man->Number = :manNumber AND Woman->Number = :womanNumber) OR (Man->Number = :womanNumber AND Woman->Number = :manNumber))
    if (SQLCODE = 0){
        return ..%OpenId(coupleId,,.st)
    }
    
    set obj = ..%New()
    set obj.Man = ##class(PersonUDSR).NumberUDSRIdxOpen(manNumber,,.stMan)  
    set obj.Woman = ##class(PersonUDSR).NumberUDSRIdxOpen(womanNumber,,.stWoman)    
    
    if $$$ISERR(stMan){
        set st = ##class(Dance.Utils.Msg).GetErrorStatus("error_PersonUDSRNotFound", " | Male "_manNumber)
        quit $$$NULLOREF
    }
    
    if $$$ISERR(stWoman){
        set st = ##class(Dance.Utils.Msg).GetErrorStatus("error_PersonUDSRNotFound", " | Female "_womanNumber)
        quit $$$NULLOREF
    }
    
    if (obj.Man.Gender = "Female") && (obj.Woman.Gender = "Male"){
        set womanTmp = obj.Man
        set obj.Man = obj.Woman
        set obj.Woman = womanTmp
        kill womanTmp
    }
    
    if (obj.Man.Gender '= "Male"){
        set st = ##class(Dance.Utils.Msg).GetErrorStatus("error_PersonUDSRNotFound", " | Male "_obj.Man.Number)
        quit $$$NULLOREF
    }
    
    if (obj.Woman.Gender '= "Female"){
        set st = ##class(Dance.Utils.Msg).GetErrorStatus("error_PersonUDSRNotFound", " | Female "_obj.Woman.Number)
        quit $$$NULLOREF
    }
    

    
    set st = obj.%Save()
    
    quit obj
]]></Implementation>
</Method>

<Method name="GetByFilter">
<ClassMethod>1</ClassMethod>
<FormalSpec>filter:%RegisteredObject</FormalSpec>
<ReturnType>PersonWDSF</ReturnType>
<Implementation><![CDATA[
    do filter.%ToJSON()
    
    set man = ##class(PersonUDSR).GetByFullName(filter.man)
    quit:'$ISOBJECT(man) $$$NULLOREF
    
    set woman = ##class(PersonUDSR).GetByFullName(filter.woman)
    quit:'$ISOBJECT(woman) $$$NULLOREF

    quit ..GetByNumbers(man.Number, woman.Number, .st)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="Dance.Data.CoupleWDSF">
<Super>Couple</Super>
<TimeCreated>63436,60745.081748</TimeCreated>

<Property name="WDSFId">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="CStatus">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="AgeCategory">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Updated">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Method name="ConvertToProxyObject">
<FormalSpec>params:%ZEN.proxyObject=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##super()
    set proxy.type = "WDSF"
    set proxy.otherInfo = ##class(%ZEN.proxyObject).%New()
        
    if (##class(MatchingCoupleUDSRWDSF).WDSFIdxExists(..%Id())){
        set coupleUDSR = ##class(MatchingCoupleUDSRWDSF).WDSFIdxOpen(..%Id()).UDSR
        
        if (coupleUDSR.Man.IsActive){
            set proxy.idUDSR = coupleUDSR.%Id()
            set proxy.man.idUDSR = coupleUDSR.Man.%Id()
            set proxy.man.numberUDSR = coupleUDSR.Man.Number
            set proxy.woman.idUDSR = coupleUDSR.Woman.%Id()
            set proxy.woman.numberUDSR = coupleUDSR.Woman.Number
            
            if $ISOBJECT(coupleUDSR.Man.LAClass){
                set proxy.man.laClass = coupleUDSR.Man.LAClass.ConvertToProxyObject()
            }
            if $ISOBJECT(coupleUDSR.Man.STClass){
                set proxy.man.stClass = coupleUDSR.Man.STClass.ConvertToProxyObject()
            }
            if $ISOBJECT(coupleUDSR.Woman.LAClass){
                set proxy.woman.laClass = coupleUDSR.Woman.LAClass.ConvertToProxyObject()
            }
            if $ISOBJECT(coupleUDSR.Woman.STClass){
                set proxy.woman.stClass = coupleUDSR.Woman.STClass.ConvertToProxyObject()
            }
        }
    }
    

    set proxy.otherInfo.country = ..Man.Country.ConvertToProxyObject()
    set proxy.otherInfo.ageCategory = ..AgeCategory
    set proxy.otherInfo.status = ..CStatus
    quit proxy
]]></Implementation>
</Method>

<Method name="GetByNumbers">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[manNumber:%String,womanNumber:%String,&st]]></FormalSpec>
<ReturnType>Couple</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    #dim obj As CoupleWDSF = ""
    
    if (manNumber = "") || (womanNumber = ""){
        set st = $system.Status.Error(5001, "Empty WDSF numbers")
        quit obj
    }
    
    set (coupleId, SQLCODE) = ""
    &sql(SELECT ID INTO :coupleId FROM Dance_Data.CoupleWDSF WHERE Man->Number = :manNumber AND Woman->Number = :womanNumber)
    if (SQLCODE = 0){
        set obj = ..%OpenId(coupleId,,.st)
        set diffDays = $SYSTEM.SQL.DATEDIFF("dd", $P(obj.Updated, " ", 1), $P($ZDT($ZTS, 3), " ", 1))
        if (diffDays <= 1){
            return obj
        }   
    }
    
    
    set wdsfData = ##class(Dance.Wdsf.ControllerAPI).GetCoupleByNumbers(manNumber, womanNumber, .st)
    if $$$ISERR(st) {
        if $ISOBJECT(wdsfData) && (wdsfData.message '= ""){
            set st = $system.Status.Error(5001, wdsfData.message)
        }
        
        quit obj
    }
    
    quit:$$$ISERR(st) obj
    
    if '$ISOBJECT(obj){
        set obj = ..%New()
    }
    
    
    try{
        set message = ""
        if '$ISOBJECT(wdsfData){
            set message = "wdsfData - не объект "_$CLASSNAME(wdsfData)
        } 
        elseif '$ISOBJECT(wdsfData.man){
            set message = "Нет партнера"
        }
        elseif '$ISOBJECT(wdsfData.woman){
            set message = "Нет партнерши"
        }
        
        if (message '= ""){
            do ##class(Dance.Utils.Email).Send("ilsondll@gmail.com", message_"; "_manNumber_";"_womanNumber)
        }
    }
    catch(ex){
        do ##class(Dance.Utils.Email).Send("ilsondll@gmail.com", $SYSTEM.Status.GetErrorText(ex.AsStatus()_"; "_manNumber_";"_womanNumber))
    }
    
    
    
    
    set obj.WDSFId = wdsfData.id
    set obj.Man = ##class(PersonWDSF).SaveFromWDSF(wdsfData.man, .st)   
    quit:$$$ISERR(st) obj
    
    set obj.Woman = ##class(PersonWDSF).SaveFromWDSF(wdsfData.woman, .st)   
    quit:$$$ISERR(st) obj
    
    set obj.AgeCategory = wdsfData.ageGroup
    set obj.CStatus = wdsfData.status
    
    set obj.Updated = $ZDT($ZTS, 3)
    set st = obj.%Save()
    
    quit obj
]]></Implementation>
</Method>

<Method name="GetByFilter">
<ClassMethod>1</ClassMethod>
<FormalSpec>filter:%RegisteredObject</FormalSpec>
<ReturnType>PersonWDSF</ReturnType>
<Implementation><![CDATA[
    set man = ##class(PersonWDSF).GetByFilter(filter.man)
    quit:'$ISOBJECT(man) $$$NULLOREF
    
    set woman = ##class(PersonWDSF).GetByFilter(filter.woman)
    quit:'$ISOBJECT(woman) $$$NULLOREF

    quit ..GetByNumbers(man.Number, woman.Number, .st)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>CoupleWDSFDefaultData</DefaultData>
<Data name="CoupleWDSFDefaultData">
<Subscript>"CoupleWDSF"</Subscript>
<Value name="1">
<Value>WDSFId</Value>
</Value>
<Value name="2">
<Value>CStatus</Value>
</Value>
<Value name="3">
<Value>AgeCategory</Value>
</Value>
<Value name="4">
<Value>Updated</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.Currency">
<Description>
Currency</Description>
<Super>%Persistent</Super>
<TimeCreated>63660,38532.418192</TimeCreated>

<Property name="Name">
<Description>
Name of currency</Description>
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="Code">
<Description>
Code of currency</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="CodeIdx">
<IdKey>1</IdKey>
<Properties>Code</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<Description>
Convert to proxyObject (for JSON)</Description>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.id = ..%Id()
    set proxy.name = ..Name.Value
    set proxy.code = ..Code
    quit proxy
]]></Implementation>
</Method>

<Method name="CreateCurrencies">
<Description>
do ##class(Dance.Data.Currency).CreateCurrencies()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set obj = ..%New()
    set obj.Name = ##class(Dance.Data.Localization.LText).Create("")
    w obj.Name.SetValueByLang("Рубли", "ru")
    w obj.Name.SetValueByLang("Ruble", "en")
    w obj.Name.SetValueByLang("Rubel", "de")
    w obj.Name.SetValueByLang("Rubli", "it")
    set obj.Code = "RUB"
    w obj.%Save()
    
    set obj = ..%New()
    set obj.Name = ##class(Dance.Data.Localization.LText).Create("")
    w obj.Name.SetValueByLang("Доллары", "ru")
    w obj.Name.SetValueByLang("Dollars", "en")
    w obj.Name.SetValueByLang("Dollars", "de")
    w obj.Name.SetValueByLang("Dollari", "it")    
    set obj.Code = "USD"
    w obj.%Save()
    
    set obj = ..%New()
    set obj.Name = ##class(Dance.Data.Localization.LText).Create("")
    w obj.Name.SetValueByLang("Евро", "ru")
    w obj.Name.SetValueByLang("Euro", "en")
    w obj.Name.SetValueByLang("Euro", "de")
    w obj.Name.SetValueByLang("Euro", "it")
    set obj.Code = "EUR"
    w obj.%Save()
    
    
    set obj = ..%New()
    set obj.Name = ##class(Dance.Data.Localization.LText).Create("")
    do obj.Name.SetValueByLang("Фунт стерлингов", "ru")
    do obj.Name.SetValueByLang("Pound Sterling", "en")
    do obj.Name.SetValueByLang("Pfund", "de")
    do obj.Name.SetValueByLang("Libbra", "it")
    set obj.Code = "GBP"
    do obj.%Save()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.CurrencyD</DataLocation>
<DefaultData>CurrencyDefaultData</DefaultData>
<IdLocation>^Dance.Data.CurrencyD</IdLocation>
<IndexLocation>^Dance.Data.CurrencyI</IndexLocation>
<StreamLocation>^Dance.Data.CurrencyS</StreamLocation>
<Data name="CurrencyDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Code</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.DancerClass">
<Description>
Dancer classes: A,B,C ....</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63289,41260.549928</TimeCreated>

<Parameter name="JsonClass">
<Default>Dance.Web.JsonDancerClass</Default>
</Parameter>

<Property name="Name">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Code">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="CodeIdx">
<Properties>Code</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<Description>
Convert "DancerClass" object to %ZEN.proxyObject (for JSON)</Description>
<FormalSpec>params:%ZEN.proxyObject=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	
	set proxy.id = ..%Id()
	set proxy.name = ..Name
	set proxy.code = ..Code
	
	quit proxy
]]></Implementation>
</Method>

<Method name="GetByName">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[name:%String,&st:%Status=$$$OK]]></FormalSpec>
<ReturnType>DancerClass</ReturnType>
<Implementation><![CDATA[
	set id = ""
	&sql(SELECT ID INTO :id FROM Dance_Data.DancerClass WHERE Name = :name)
	quit ..%OpenId(id,,.st)
]]></Implementation>
</Method>

<Method name="GetAll">
<ClassMethod>1</ClassMethod>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.children = ##class(%ListOfObjects).%New()
	
	&sql(DECLARE Curr1 CURSOR FOR 
		 	SELECT ID, Name, Code
		 	FROM Dance_Data.DancerClass)	
		
	&sql(OPEN Curr1)
	for  
	{	
		&sql(FETCH Curr1 INTO :id, :name, :code) 
		quit:(SQLCODE '= 0)
		
		set dc = ##class(%ZEN.proxyObject).%New()	
		set dc.id = id
		set dc.name = name
		set dc.code = code
		
		do proxy.children.Insert(dc)	
	}
	
	&sql(CLOSE Curr1)
	
	q proxy
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.DancerClassD</DataLocation>
<DefaultData>DancerClassDefaultData</DefaultData>
<IdLocation>^Dance.Data.DancerClassD</IdLocation>
<IndexLocation>^Dance.Data.DancerClassI</IndexLocation>
<StreamLocation>^Dance.Data.DancerClassS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="DancerClassDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Code</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.Discipline">
<Description>
Disciplines: La, St ...</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63273,6949.675831</TimeCreated>

<Property name="Name">
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="Code">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="CodeIdx">
<Properties>Code</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<FormalSpec>params:%ZEN.proxyObject=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.code = ..Code
	set proxy.name = ..Name.Value
	quit proxy
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.DisciplineD</DataLocation>
<DefaultData>DisciplineDefaultData</DefaultData>
<IdLocation>^Dance.Data.DisciplineD</IdLocation>
<IndexLocation>^Dance.Data.DisciplineI</IndexLocation>
<StreamLocation>^Dance.Data.DisciplineS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="DisciplineDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Code</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.FeedBack">
<Super>%Persistent</Super>
<TimeCreated>63349,943.222428</TimeCreated>

<Property name="Created">
<Type>%TimeStamp</Type>
</Property>

<Property name="Author">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="Email">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="Subject">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="Msg">
<Type>%Text</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="3000"/>
</Property>

<Method name="%OnNew">
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set ..Created = $ZDT($ZTS, 3)
	Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.FeedBackD</DataLocation>
<DefaultData>FeedBackDefaultData</DefaultData>
<IdLocation>^Dance.Data.FeedBackD</IdLocation>
<IndexLocation>^Dance.Data.FeedBackI</IndexLocation>
<StreamLocation>^Dance.Data.FeedBackS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="FeedBackDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Created</Value>
</Value>
<Value name="3">
<Value>Author</Value>
</Value>
<Value name="4">
<Value>Email</Value>
</Value>
<Value name="5">
<Value>Subject</Value>
</Value>
<Value name="6">
<Value>Msg</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.Import.CompetitionDanceplat">
<Description>
Imported competitions from other system</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63438,6973.710952</TimeCreated>

<Parameter name="CorrelateName">
<Type>%String</Type>
<Default>item</Default>
</Parameter>

<Property name="TournamentIdExternal">
<Type>%String</Type>
<Parameter name="XMLNAME" value="TournirId"/>
</Property>

<Property name="IdInternal">
<Type>%String</Type>
<Parameter name="XMLNAME" value="GroupId"/>
</Property>

<Property name="IdExternal">
<Type>%String</Type>
<Parameter name="XMLNAME" value="GroupIdExt"/>
</Property>

<Property name="Name">
<Type>%String</Type>
<Parameter name="MAXLEN" value="3000"/>
<Parameter name="XMLNAME" value="name"/>
</Property>

<Property name="Rank">
<Type>%String</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="XMLNAME" value="rang"/>
</Property>

<Property name="DisciplineCode">
<Type>%String</Type>
<Parameter name="XMLNAME" value="prog"/>
</Property>

<Property name="AgeCategoryCode">
<Type>%String</Type>
<Parameter name="XMLNAME" value="cat"/>
</Property>

<Property name="DancerClassCodes">
<Type>%String</Type>
<Parameter name="XMLNAME" value="class"/>
</Property>

<Property name="StartDate">
<Type>%String</Type>
<Parameter name="XMLNAME" value="day"/>
</Property>

<Property name="Limit">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
<Parameter name="XMLNAME" value="limit"/>
</Property>

<Property name="IsSoloType">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
<Parameter name="XMLNAME" value="solo"/>
</Property>

<Property name="MaxAge">
<Type>%Integer</Type>
<Parameter name="XMLNAME" value="ageto"/>
</Property>

<Property name="MinAge">
<Type>%Integer</Type>
<Parameter name="XMLNAME" value="agefrom"/>
</Property>

<Property name="Price">
<Type>%Float</Type>
<Parameter name="XMLNAME" value="price"/>
</Property>

<Index name="IdInternalIdx">
<Properties>IdInternal</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<FormalSpec>params:%ZEN.proxyObject=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set defaultDancerClasses("Взрослые") = "6,3,2,4,5,9,8"
    set defaultDancerClasses("Молодежь") = "6,3,2,4,5,9"
    set defaultDancerClasses("Д-1") = "6,3"
    set defaultDancerClasses("Д-2") = "6,3,2"
    set defaultDancerClasses("Ю-1") = "6,3,2,4"
    set defaultDancerClasses("Ю-2") = "6,3,2,4,5"
            
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.info = ##class(%ZEN.proxyObject).%New()
    set proxy.info.errorMessages = ##class(%ListOfDataTypes).%New()
    
    try{
        set proxy.id = ..%Id()
        set proxy.tournamentIdExternal = ..TournamentIdExternal
        set proxy.idInternal = ..IdInternal
        set proxy.idExternal = ..IdExternal
        set proxy.startDate = ..StartDate
        set proxy.minAge = ..MinAge
        set proxy.maxAge = ..MaxAge
        set proxy.limit = ..Limit
        set proxy.price = ..Price
        set proxy.name = ..Name
                        
        set realDicipline = ##class(Dance.Data.Discipline).CodeIdxOpen(..DisciplineCode,,.sc)
        if ($$$ISOK(sc)){
            set proxy.discipline = realDicipline.ConvertToProxyObject()
        }
        else{
            do proxy.info.errorMessages.Insert("Дисциплина не найдена! Код = ["_..DisciplineCode_"]")    
        }
            
        set realAge = ##class(Dance.Data.AgeCategory).CodeIdxOpen(..AgeCategoryCode,,.sc)
        if ($$$ISOK(sc)){
            set proxy.ageCategory = realAge.ConvertToProxyObject()
        }
        else{
            do proxy.info.errorMessages.Insert("Возрастная группа не найдена! Код = ["_..AgeCategoryCode_"]")
        }
            
        if (..IsSoloType = $$$YES){
            set typeCode = "Solo"
        }
        else{
            set typeCode = "Couples"
        }
            
        set type = ##class(Dance.Data.CompetitionType).CodeIdxOpen(typeCode,,.sc)
        if ($$$ISOK(sc)){
            set proxy.type = type.ConvertToProxyObject()
        }
        else{
            do proxy.info.errorMessages.Insert("Тип не найден! Соло = ["_..IsSoloType_"]")
        }
        
        set proxy.dancerClasses = ##class(Dance.Data.DancerClass).GetAll().children
        set dancerClassesList = $LISTFROMSTRING(..DancerClassCodes, ",")
        for i=1:1:$LL(dancerClassesList){
            set class = $LIST(dancerClassesList, i)
            if (class = "") continue
                
            if (##class(Dance.Data.DancerClass).CodeIdxExists(class) = $$$YES){
                for cc=1:1:proxy.dancerClasses.Count(){
                    if (class = proxy.dancerClasses.GetAt(cc).code){
                        set proxy.dancerClasses.GetAt(cc).selected = $$$YES
                        quit
                    }
                }
            }
            elseif (class = "0"){
                // 0 - All classes. 7 - H class
                for cc=1:1:proxy.dancerClasses.Count(){
                    if (proxy.dancerClasses.GetAt(cc).code = 7){
                        continue
                    }
                    
                    set proxy.dancerClasses.GetAt(cc).selected = $$$YES
                }
            }
            else{
                do proxy.info.errorMessages.Insert("Класс не найден! Код = ["_class_"]") 
            }       
        }

        /*
           Проверка сформированного списка классов доступных для танцора по умолчанию, тк с  данцплата может прилететь д***мо, поэто нужны доп. проверки
        */
        set defaultDancerClasses("Взрослые") = "6,3,2,4,5,9,8"
        set defaultDancerClasses("Молодежь") = "6,3,2,4,5,9"
        set defaultDancerClasses("Д-1") = "6,3"
        set defaultDancerClasses("Д-2") = "6,3,2"
        set defaultDancerClasses("Ю-1") = "6,3,2,4"
        set defaultDancerClasses("Ю-2") = "6,3,2,4,5"
        // Объединение A v B
        set defaultDancerClasses("Молодежь+Ю-2") = "6,3,2,4,5,9"
        set defaultDancerClasses("Ю-1+Д-2") = "6,3,2,4"
        set defaultDancerClasses("Д-2+Д-1") = "6,3,2"
        set defaultDancerClasses("Ю-2+Ю-1") = "6,3,2,4,5"
        set defaultDancerClasses("Взрослые+Молодежь") = "6,3,2,4,5,9,8"
        
        set defaultClasses = $GET(defaultDancerClasses(realAge.Code))
        if (defaultClasses '= "") {
            for i=1:1:proxy.dancerClasses.Count(){
                // Если класс выбран, но он не включен в список допустимых для воз.группы, то "развыбираем" его
                if (proxy.dancerClasses.GetAt(i).selected) && ($FIND(defaultClasses, proxy.dancerClasses.GetAt(i).code) = 0){
                     set proxy.dancerClasses.GetAt(i).selected = $$$NO
                }
            }
        }
        
        set proxy.info.isExisted = ##class(Dance.Data.Competition).IdInternalIdxExists(..IdInternal)
        set proxy.info.isErrored = (proxy.info.errorMessages.Count() '= 0)
    }
    catch(ex){
        set proxy.errorText = $SYSTEM.Status.GetErrorText(ex.AsStatus())
    }
    
    quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Create or update item</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>newObj:Dance.Data.Import.CompetitionDanceplat</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set newObj.Name = $REPLACE($REPLACE(newObj.Name, $c(10), ""), "&quot;", """")
    
    if (..IdInternalIdxExists(newObj.IdInternal) = 0){
        quit newObj.%Save()
    }

    set oldObj = ..IdInternalIdxOpen(newObj.IdInternal)
    set oldObj.IdExternal = newObj.IdExternal
    set oldObj.Name = newObj.Name
    set oldObj.AgeCategoryCode = newObj.AgeCategoryCode
    set oldObj.DancerClassCodes = newObj.DancerClassCodes
    set oldObj.StartDate = newObj.StartDate
    set oldObj.DisciplineCode = newObj.DisciplineCode
    set oldObj.IsSoloType = newObj.IsSoloType
    set oldObj.Limit = newObj.Limit
    set oldObj.MaxAge = newObj.MaxAge
    set oldObj.MinAge = newObj.MinAge
    set oldObj.Price = newObj.Price
    set oldObj.Rank = newObj.Rank
    set oldObj.TournamentIdExternal = newObj.TournamentIdExternal
    
    quit oldObj.%Save()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data8B13.Competition18A0D</DataLocation>
<DefaultData>CompetitionDanceplatDefaultData</DefaultData>
<IdLocation>^Dance.Data8B13.Competition18A0D</IdLocation>
<IndexLocation>^Dance.Data8B13.Competition18A0I</IndexLocation>
<StreamLocation>^Dance.Data8B13.Competition18A0S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="CompetitionDanceplatDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>TournamentIdExternal</Value>
</Value>
<Value name="3">
<Value>IdInternal</Value>
</Value>
<Value name="4">
<Value>IdExternal</Value>
</Value>
<Value name="5">
<Value>Name</Value>
</Value>
<Value name="6">
<Value>Rank</Value>
</Value>
<Value name="7">
<Value>DisciplineCode</Value>
</Value>
<Value name="8">
<Value>AgeCategoryCode</Value>
</Value>
<Value name="9">
<Value>DancerClassCodes</Value>
</Value>
<Value name="10">
<Value>StartDate</Value>
</Value>
<Value name="11">
<Value>Limit</Value>
</Value>
<Value name="12">
<Value>IsSoloType</Value>
</Value>
<Value name="13">
<Value>MaxAge</Value>
</Value>
<Value name="14">
<Value>MinAge</Value>
</Value>
<Value name="15">
<Value>Price</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.Import.ImportDanceplat">
<Abstract>1</Abstract>
<TimeCreated>63438,7022.551555</TimeCreated>

<Method name="Import">
<Description>
Import all objects from XML to table</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String,pageWithParameters:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK

	try{
		TSTART
				
		set httprequest = ##class(%Net.HttpRequest).%New()
		set httprequest.Server = $G(^Settings("Dance", "ImportDanceplat", "Server"))
		set httprequest.ContentEncoding = "UTF-8"
		do httprequest.Get(pageWithParameters)
		
		#dim stream As %Stream.Object = httprequest.HttpResponse.Data
		#dim reader As %XML.Reader = ##class(%XML.Reader).%New()

		$$$THROWONERROR(st, reader.OpenStream(stream, "literal"))

		do reader.Correlate($CLASSMETHOD(className, "%GetParameter", "CorrelateName"), className)

		while reader.Next(.obj, .st)
		{			
			$$$THROWONERROR(st, $CLASSMETHOD(className, "Save", obj))
			kill obj
		}
		
		TCOMMIT		
	}
	catch(ex){
		TROLLBACK
		
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Data.Import.TicketDanceplat">
<Description>
Importer tickets from other system</Description>
<Super>%Persistent,%XML.Adaptor,Dance.Data.Import.ImportDanceplat</Super>
<TimeCreated>63438,7002.692458</TimeCreated>

<Parameter name="CorrelateName">
<Type>%String</Type>
<Default>item</Default>
</Parameter>

<Property name="IdInternal">
<Type>%String</Type>
<Parameter name="XMLNAME" value="biletId"/>
</Property>

<Property name="TournamentIdExternal">
<Type>%String</Type>
<Parameter name="XMLNAME" value="tournirId"/>
</Property>

<Property name="GroupIdInternal">
<Type>%String</Type>
<Parameter name="XMLNAME" value="GroupId"/>
</Property>

<Property name="MaleLastName">
<Description>
Male</Description>
<Type>%String</Type>
<Parameter name="XMLNAME" value="SurnameM"/>
</Property>

<Property name="MaleFirstName">
<Type>%String</Type>
<Parameter name="XMLNAME" value="NameM"/>
</Property>

<Property name="MaleNumber">
<Type>%String</Type>
<Parameter name="XMLNAME" value="cplMalePartnerID"/>
</Property>

<Property name="MaleDOBOrAge">
<Type>%String</Type>
<Parameter name="XMLNAME" value="AgeM"/>
</Property>

<Property name="FemaleLastName">
<Description>
Female</Description>
<Type>%String</Type>
<Parameter name="XMLNAME" value="SurnameF"/>
</Property>

<Property name="FemaleFirstName">
<Type>%String</Type>
<Parameter name="XMLNAME" value="NameF"/>
</Property>

<Property name="FemaleNumber">
<Type>%String</Type>
<Parameter name="XMLNAME" value="cplFemalePartnerID"/>
</Property>

<Property name="FemaleDOBOrAge">
<Type>%String</Type>
<Parameter name="XMLNAME" value="AgeF"/>
</Property>

<Property name="Trainers">
<Description>
Other Info</Description>
<Type>%Text</Type>
<Parameter name="MAXLEN" value="3000"/>
<Parameter name="XMLNAME" value="Trener"/>
</Property>

<Property name="City">
<Type>%String</Type>
<Parameter name="XMLNAME" value="City"/>
</Property>

<Property name="Club">
<Type>%String</Type>
<Parameter name="XMLNAME" value="Club"/>
</Property>

<Property name="Amount">
<Type>%String</Type>
<Parameter name="XMLNAME" value="sum"/>
</Property>

<Property name="TDay">
<Type>%String</Type>
<Parameter name="XMLNAME" value="day"/>
</Property>

<Property name="TStatus">
<Type>%String</Type>
<Parameter name="XMLNAME" value="status"/>
</Property>

<Property name="PaymentCreated">
<Type>%String</Type>
<Parameter name="XMLNAME" value="datepay"/>
</Property>

<Property name="OrderIdInternal">
<Type>%String</Type>
<Parameter name="XMLNAME" value="ZakazId"/>
</Property>

<Property name="CodeOne">
<Type>%String</Type>
<Parameter name="XMLNAME" value="kod"/>
</Property>

<Property name="CodeTwo">
<Type>%String</Type>
<Parameter name="XMLNAME" value="kodtwo"/>
</Property>

<Property name="Description">
<Type>%Text</Type>
<Parameter name="MAXLEN" value="3000"/>
<Parameter name="XMLNAME" value="description"/>
</Property>

<Index name="IdInternalIdx">
<Properties>IdInternal</Properties>
<Unique>1</Unique>
</Index>

<Method name="Save">
<Description>
Create or update ticket</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>newObj:Dance.Data.Import.TicketDanceplat</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set newObj.Description = $REPLACE($REPLACE(newObj.Description, $c(10), ""), "&quot;", """")
	set newObj.City = $REPLACE(newObj.City, $C(10), "")
	set newObj.Club = $REPLACE(newObj.Club, $C(10), "")
	
	// Remove " " from field
	set newObj.MaleLastName = $SELECT($L(newObj.MaleLastName) < 2 : "", $$$YES : newObj.MaleLastName)
	set newObj.FemaleLastName = $SELECT($L(newObj.FemaleLastName) < 2 : "", $$$YES : newObj.FemaleLastName)
	
	if (newObj.MaleLastName = newObj.FemaleLastName) && (newObj.MaleFirstName = newObj.FemaleFirstName){
		set newObj.FemaleLastName = ""
		set newObj.FemaleFirstName = ""
		set newObj.FemaleNumber = ""
	}
	
	if (..IdInternalIdxExists(newObj.IdInternal) = $$$NO){
		quit newObj.%Save()
	}
	
	// If exists - update
	set oldObj = ..IdInternalIdxOpen(newObj.IdInternal)
	set oldObj.Amount = newObj.Amount
	set oldObj.City = newObj.City
	set oldObj.Club = newObj.Club
	set oldObj.CodeOne = newObj.CodeOne
	set oldObj.CodeTwo = newObj.CodeTwo
	//set oldObj.Created = newObj.Created
	set oldObj.GroupIdInternal = newObj.GroupIdInternal
	set oldObj.Description = newObj.Description
	
	if ($LENGTH(newObj.FemaleLastName) < 2) set newObj.FemaleLastName = ""
	if ($LENGTH(newObj.FemaleFirstName) < 2) set newObj.FemaleFirstName = ""
	set oldObj.FemaleLastName = newObj.FemaleLastName
	set oldObj.FemaleFirstName = newObj.FemaleFirstName
	set oldObj.FemaleDOBOrAge = newObj.FemaleDOBOrAge
	set oldObj.FemaleNumber = +newObj.FemaleNumber
	
	if ($LENGTH(newObj.MaleLastName) < 2) set newObj.MaleLastName = ""
	if ($LENGTH(newObj.MaleFirstName) < 2) set newObj.MaleFirstName = ""
	set oldObj.MaleLastName = newObj.MaleLastName
	set oldObj.MaleFirstName = newObj.MaleFirstName
	set oldObj.MaleDOBOrAge = newObj.MaleDOBOrAge
	set oldObj.MaleNumber = +newObj.MaleNumber
	
	set oldObj.OrderIdInternal = newObj.OrderIdInternal
	set oldObj.TournamentIdExternal = newObj.TournamentIdExternal
	set oldObj.Trainers = newObj.Trainers
	set oldObj.TStatus = newObj.TStatus	
			
	quit oldObj.%Save()
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
ClassMethod CreatePersonFromTicket(ticket As Dance.Data.Import.Ticket, isMan As %Boolean, ByRef st) As Dance.Data.Person
{
	set st = $$$OK
	set person = ""
	
	try{
		TSTART
		
		do ##class(Dance.Utils.Journal).Create("Log", "Import.Ticket.CreatePersonFromTicket", "Start, isMan="_isMan_", prtMaleLastName="_ticket.MaleLastName_", prtFemaleLastName="_ticket.FemaleLastName)
		
		set person = ##class(Dance.Data.Person).%New()
		
		if (isMan){
			set person.Gender = "M"
			set person.LastName = ##class(Dance.Data.Localization.LText).Create($REPLACE(ticket.MaleLastName,$C(10),""))
			set person.FirstName = ##class(Dance.Data.Localization.LText).Create($REPLACE(ticket.MaleFirstName,$C(10),""))
			if ($LENGTH($REPLACE(ticket.MaleDOBOrAge,$C(10),"")) = 10) set person.DOB = $ZDH(ticket.MaleDOBOrAge, 3)
		}
		else{
			set person.Gender = "F"
			set person.LastName = ##class(Dance.Data.Localization.LText).Create($REPLACE(ticket.FemaleLastName,$C(10),""))
			set person.FirstName = ##class(Dance.Data.Localization.LText).Create($REPLACE(ticket.FemaleFirstName,$C(10),""))
			if ($LENGTH($REPLACE(ticket.FemaleDOBOrAge,$C(10),"")) = 10) set person.DOB = $ZDH(ticket.FemaleDOBOrAge, 3)
		}
		
		set person.City = $REPLACE(ticket.City,$C(10),"")
		set person.Club = $REPLACE(ticket.Club,$C(10),"")
		set person.MainTrainer = $P($REPLACE(ticket.Trainers,$C(10),""), ", ", 1)
		set person.OtherTrainers = $P($REPLACE(ticket.Trainers,$C(10),""), ", ", 2, *)
		set person.LastUpdated = $ZDT($ZTS, 3)
		
		$$$THROWONERROR(st, person.%Save())
		
		do ##class(Dance.Utils.Journal).Create("Log", "Import.Ticket.CreatePersonFromTicket", "End")
		
		TCOMMIT
	}
	catch(ex){
		TROLLBACK 1
		set st = ex.AsStatus()
		do ##class(Dance.Utils.Journal).Create("ERROR", "Import.Ticket.CreatePersonFromTicket", st)
		
	}
	
	quit person
}
*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
/*
Example:

<item>
	<biletId>754645</biletId>
	<tournirId>68</tournirId>
	<GroupId>1345</GroupId>	
	<cplMalePartnerID>10345</cplMalePartnerID>
	<SurnameM>Елагин</SurnameM>
	<NameM>Андрей</NameM>
	<AgeM>10</AgeM>
	<cplFemalePartnerID>10345</cplFemalePartnerID>
	<SurnameF>Морозова</SurnameF>
	<NameF>Виктория</NameF>
	<AgeF>11</AgeF>
	<Club><![CDATA[Ритм]]]]><![CDATA[></Club>
	<City><![CDATA[Сыктывкар]]]]><![CDATA[>
	</City>
	<Trener><![CDATA[Шульц Елена, Горохов Александр]]]]><![CDATA[>	</Trener>
	<status>pay</status>
	<sum>600.00</sum>
	<datepay>2014-04-07 20:26:07</datepay>
	<day>2014-05-09</day>
	<ZakazId>345345</ZakazId>
	<kod>45345345ee</kod>
	<kodtwo>erwer4353</kodtwo>
	
	<description><![CDATA[09 Мая 2014 10:00  XIX Кубок ЦСКА &quot;Вальс Победы&quot; 9-11 мая 2014. Дети-2 D E St<br> <strong>Партнер</strong>: Елагин Андрей, Книжка: 105500<br> <strong>Партнерша</strong>: Морозова Виктория, Книжка: 105490 <br>]]]]><![CDATA[></description>
</item>

*/
]]></Content>
</UDLText>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data8B13.TicketDance8D8DD</DataLocation>
<DefaultData>TicketDanceplatDefaultData</DefaultData>
<IdLocation>^Dance.Data8B13.TicketDance8D8DD</IdLocation>
<IndexLocation>^Dance.Data8B13.TicketDance8D8DI</IndexLocation>
<StreamLocation>^Dance.Data8B13.TicketDance8D8DS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="TicketDanceplatDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>IdInternal</Value>
</Value>
<Value name="3">
<Value>TournamentIdExternal</Value>
</Value>
<Value name="4">
<Value>GroupIdInternal</Value>
</Value>
<Value name="5">
<Value>MaleLastName</Value>
</Value>
<Value name="6">
<Value>MaleFirstName</Value>
</Value>
<Value name="7">
<Value>MaleNumber</Value>
</Value>
<Value name="8">
<Value>MaleDOBOrAge</Value>
</Value>
<Value name="9">
<Value>FemaleLastName</Value>
</Value>
<Value name="10">
<Value>FemaleFirstName</Value>
</Value>
<Value name="11">
<Value>FemaleNumber</Value>
</Value>
<Value name="12">
<Value>FemaleDOBOrAge</Value>
</Value>
<Value name="13">
<Value>Trainers</Value>
</Value>
<Value name="14">
<Value>City</Value>
</Value>
<Value name="15">
<Value>Club</Value>
</Value>
<Value name="16">
<Value>Amount</Value>
</Value>
<Value name="17">
<Value>TDay</Value>
</Value>
<Value name="18">
<Value>TStatus</Value>
</Value>
<Value name="19">
<Value>PaymentCreated</Value>
</Value>
<Value name="20">
<Value>OrderIdInternal</Value>
</Value>
<Value name="21">
<Value>CodeOne</Value>
</Value>
<Value name="22">
<Value>CodeTwo</Value>
</Value>
<Value name="23">
<Value>Description</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.Import.TournamentDanceplat">
<Description>
Imported tournaments from other system</Description>
<Super>%Persistent,%XML.Adaptor,Dance.Data.Import.ImportDanceplat</Super>
<TimeCreated>63438,6988.71093</TimeCreated>

<Parameter name="CorrelateName">
<Type>%String</Type>
<Default>item</Default>
</Parameter>

<Property name="IdExternal">
<Type>%String</Type>
<Parameter name="XMLNAME" value="TournirId"/>
</Property>

<Property name="IdInternal">
<Type>%String</Type>
<Parameter name="XMLNAME" value="TournirIdExt"/>
</Property>

<Property name="TDate">
<Type>%String</Type>
</Property>

<Property name="Hash">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Name">
<Type>%String</Type>
<Parameter name="MAXLEN" value="3000"/>
</Property>

<Property name="IsRemoved">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Index name="IdInternalIdx">
<Properties>IdInternal</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<Description>
Convert "Tournament imported" object to %ZEN.proxyObject (for JSON)</Description>
<FormalSpec>params:%ZEN.proxyObject=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	
	set proxy.id = ..%Id()
	set proxy.idInternal = ..IdInternal
	set proxy.idExternal = ..IdExternal
	set proxy.hash = ..Hash
	set proxy.startDate = ..TDate
	set proxy.name = ..Name
	
	set proxy.info = ##class(%ZEN.proxyObject).%New()
	set proxy.info.isExisted = ##class(Dance.Data.Tournament).IdInternalIdxExists(..IdInternal)
	set proxy.info.isRemoved = ..IsRemoved 
	
	quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Create or update tournament</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>newObj:Dance.Data.Import.TournamentDanceplat</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set newObj.Name = $REPLACE($REPLACE(newObj.Name, $c(10), ""), "&quot;", """")
	
	if (..IdInternalIdxExists(newObj.IdInternal) = 0){
		quit newObj.%Save()
	}

	set oldObj = ..IdInternalIdxOpen(newObj.IdInternal)
	set oldObj.IdExternal = newObj.IdExternal
	set oldObj.Name = newObj.Name
	set oldObj.Hash = newObj.Hash
	set oldObj.TDate = newObj.TDate
		
	quit oldObj.%Save()
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
Example:

<item>
	<TournirId>23</TournirId>
	<TournirIdExt>13453</TournirIdExt>
	<TDate>2011-02-23</TDate>
	<Name>
	<![CDATA[
	Кубок Оникса
	 ]]]]><![CDATA[>
	</Name>
	<Hash>630169wefwe30747e</Hash>
</item>
*/
]]></Content>
</UDLText>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data8B13.TournamentD117BD</DataLocation>
<DefaultData>TournamentDanceplatDefaultData</DefaultData>
<IdLocation>^Dance.Data8B13.TournamentD117BD</IdLocation>
<IndexLocation>^Dance.Data8B13.TournamentD117BI</IndexLocation>
<StreamLocation>^Dance.Data8B13.TournamentD117BS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="TournamentDanceplatDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>IdExternal</Value>
</Value>
<Value name="3">
<Value>IdInternal</Value>
</Value>
<Value name="4">
<Value>TDate</Value>
</Value>
<Value name="5">
<Value>Hash</Value>
</Value>
<Value name="6">
<Value>Name</Value>
</Value>
<Value name="7">
<Value>IsRemoved</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.Localization.LText">
<Description>
Localized property</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63273,7033.751118</TimeCreated>

<Property name="Guid">
<Description>
GUID = ID</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Value">
<Description>
Calculated property, returns string according to session's language</Description>
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {Value} = ##class({%%CLASSNAME}).GetValueById({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Index name="GuidIdx">
<IdKey>1</IdKey>
<Properties>Guid</Properties>
<Unique>1</Unique>
</Index>

<Property name="Values">
<Type>Dance.Data.Localization.LTextValue</Type>
<Cardinality>many</Cardinality>
<Inverse>LText</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="ValueGet">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..GetValueById(..%Id())
]]></Implementation>
</Method>

<Method name="ValueSet">
<FormalSpec>value:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(LTextValue).SetValue(value, ..%Id(), $$$SessionLanguage)
]]></Implementation>
</Method>

<Method name="GetValueById">
<Description>
Getting string value for current language by id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ##class(LTextValue).GetValue(id, $$$SessionLanguage)
]]></Implementation>
</Method>

<Method name="GetValueByLang">
<FormalSpec>lang:%String</FormalSpec>
<ReturnType>%Text</ReturnType>
<Implementation><![CDATA[	quit ##class(LTextValue).GetValue(..%Id(), lang)
]]></Implementation>
</Method>

<Method name="SetValueByLang">
<FormalSpec>value:%Text,lang:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ##class(LTextValue).SetValue(value, ..%Id(), lang)
]]></Implementation>
</Method>

<Method name="Create">
<Description>
Create multilanguage property. 
For each language creates record; if translation function not specified,
value will be same in all languages.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>value:%String,translateClassMethod:%String=""</FormalSpec>
<ReturnType>LText</ReturnType>
<Implementation><![CDATA[
	set ltxt = ..%New()
	set ltxt.Guid = $SYSTEM.Util.CreateGUID()
	 
	if $$$ISERR(ltxt.%Save()) $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("error_CreateLocalization"))
	
	set ltxt.Value = value
	
	set currLang = $$$SessionLanguage
	
	&sql(DECLARE LangCurs CURSOR FOR 
		 SELECT ID
		 FROM Dance_Data_Localization.LTextLanguage
		 WHERE ID <> :currLang)	
		
	&sql(OPEN LangCurs)
	for  
	{	
		&sql(FETCH LangCurs INTO :langId) 
		quit:(SQLCODE '= 0)
	
		if (translateClassMethod = ""){
			do ##class(LTextValue).SetValue(value, ltxt.%Id(), langId)
		}
		else{
			do ##class(LTextValue).SetValue($CLASSMETHOD($P(translateClassMethod,";",1), $P(translateClassMethod,";",2), value, currLang, langId), ltxt.%Id(), langId)
		}
	}
		
	&sql(CLOSE LangCurs)
	
	quit ltxt
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Delete object from all languages</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = ##class(LTextValue).Delete(id)
	if $$$ISERR(status) quit status
	
	set status = ..%DeleteId(id,4)
	if $$$ISERR(status) quit ##class(Dance.Utils.Msg).GetErrorStatus("error_DeleteLocalization", " | "_status)
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="SetValues">
<Description>
Set value for current language</Description>
<FormalSpec>ltxtId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(DECLARE LangCur CURSOR FOR 
		 SELECT ID
		 FROM Dance_Data_Localization.LTextLanguage)	
		
	&sql(OPEN LangCur)
	for  
	{	
		&sql(FETCH LangCur INTO :langId) 
		quit:(SQLCODE '= 0)
		
		set value = ##class(Dance.Data.Localization.LTextValue).GetValue(ltxtId, langId)
		do ##class(LTextValue).SetValue(value, ..%Id(), langId)
	}
		
	&sql(CLOSE LangCur)
	
	quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.Localization.LTextD</DataLocation>
<DefaultData>LTextDefaultData</DefaultData>
<IdLocation>^Dance.Data.Localization.LTextD</IdLocation>
<IndexLocation>^Dance.Data.Localization.LTextI</IndexLocation>
<StreamLocation>^Dance.Data.Localization.LTextS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="LTextDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.Localization.LTextLanguage">
<Description>
Available languages</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63273,7106.083188</TimeCreated>

<Property name="Name">
<Description>
Name</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Code">
<Description>
Two-letter code = ID</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="CodeIdx">
<IdKey>1</IdKey>
<Properties>Code</Properties>
<Unique>1</Unique>
</Index>

<Property name="Values">
<Type>Dance.Data.Localization.LTextValue</Type>
<Cardinality>many</Cardinality>
<Inverse>Lang</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="Create">
<Description>
w ##class(Dance.Data.Localization.LTextLanguage).Create("Italiana versione","it")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String,code:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set obj = ..%New()
    set obj.Code = code
    set obj.Name = name
    quit obj.%Save()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.LD180.LTextLanguageD</DataLocation>
<DefaultData>LTextLanguageDefaultData</DefaultData>
<IdLocation>^Dance.Data.LD180.LTextLanguageD</IdLocation>
<IndexLocation>^Dance.Data.LD180.LTextLanguageI</IndexLocation>
<StreamLocation>^Dance.Data.LD180.LTextLanguageS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="LTextLanguageDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.Localization.LTextValue">
<Description>
Localized string value - Lang for LText object</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63273,7179.147829</TimeCreated>

<Property name="LText">
<Description>
Intermediate object, get or set text for current language</Description>
<Type>Dance.Data.Localization.LText</Type>
<Cardinality>one</Cardinality>
<Inverse>Values</Inverse>
<Relationship>1</Relationship>
<Required>1</Required>
<Parameter name="XMLPROJECTION" value="XELEMENT"/>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="Lang">
<Description>
Language</Description>
<Type>Dance.Data.Localization.LTextLanguage</Type>
<Cardinality>one</Cardinality>
<Inverse>Values</Inverse>
<Relationship>1</Relationship>
<Required>1</Required>
<Parameter name="XMLPROJECTION" value="XELEMENT"/>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="Value">
<Type>%Text</Type>
<Parameter name="MAXLEN" value="3000"/>
</Property>

<Index name="KeyIdx">
<Properties>LText,Lang</Properties>
<Unique>1</Unique>
</Index>

<Index name="LangIdx">
<Properties>Lang</Properties>
</Index>

<Index name="ValueIdx">
<Properties>Value</Properties>
</Index>

<Method name="GetValue">
<Description>
Get value for language=lang for object with id=ltxt</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ltxt,lang</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    // ISO 639-1
    set lang = $e(lang, 1, 2)
    
    set id = $O(^Dance.Data.LocaD180.LTextValueI("KeyIdx", ltxt, lang, ""))
    if (id = ""){
        // Ну если нет значения для такого языка для текстового поля, то скорее всего это для нового языка, поэтому вернем для английского
        set id = $O(^Dance.Data.LocaD180.LTextValueI("KeyIdx", ltxt, "en", ""))
        quit:(id="") "No value for language - "_lang_" (ISO 639-1)"
    }   
    
    quit $LISTGET(^Dance.Data.LocaD180.LTextValueD(id), 4)
]]></Implementation>
</Method>

<Method name="SetValue">
<Description>
Set value for language=lang for object with id=ltxt</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>value,ltxt,lang</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    &sql(UPDATE Dance_Data_Localization.LTextValue (Value) VALUES (:value) 
         WHERE LText = :ltxt AND Lang = :lang)
    
    //do ##class(Dance.Utils.Journal).Create("Log", "Localization.LTextValue. SetValue", "SQLCODE="_SQLCODE_"; value="_value_"; ltxt="_ltxt_"; lang="_lang)
    
    if (SQLCODE = 100){
        set lv = ..%New()
        set lv.Lang = ##class(LTextLanguage).%OpenId(lang)
        set lv.LText = ##class(LText).%OpenId(ltxt)
        set lv.Value = value
        set sc = lv.%Save()
        
        if $$$ISERR(sc){
            set st = ##class(Dance.Utils.Msg).GetErrorStatus("error_SaveLocalization", "| "_sc)
        }
    }
    elseif (SQLCODE '= 0) {
        set st = ##class(Dance.Utils.Msg).GetErrorStatus("error_SaveLocalization", "| SQLCODE="_SQLCODE)
    }

    if $$$ISERR(st) {
        do ##class(Dance.Utils.Journal).Create("Log", "Localization.LTextValue. SetValue", "st="_$SYSTEM.Status.GetErrorText(st))
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="Delete">
<Description>
Delete all values for all languages for object LText</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ltxt</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    &sql(DELETE FROM Dance_Data_Localization.LTextValue WHERE LText = :ltxt)
    if (SQLCODE '= 0) && (SQLCODE '= 100) quit ##class(Dance.Utils.Msg).GetErrorStatus("error_DeleteLocalization", " | SQLCODE="_SQLCODE)
    
    quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.LocaD180.LTextValueD</DataLocation>
<DefaultData>LTextValueDefaultData</DefaultData>
<IdLocation>^Dance.Data.LocaD180.LTextValueD</IdLocation>
<IndexLocation>^Dance.Data.LocaD180.LTextValueI</IndexLocation>
<StreamLocation>^Dance.Data.LocaD180.LTextValueS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="LTextValueDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>LText</Value>
</Value>
<Value name="3">
<Value>Lang</Value>
</Value>
<Value name="4">
<Value>Value</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.Localization.Translation">
<TimeCreated>63286,49912.484865</TimeCreated>

<Method name="PersonLTextValue">
<Description>
Name translation method; if language is unknown, returns input string</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>inputStr:%Text,fromLang:%String,toLang:%String</FormalSpec>
<ReturnType>%Text</ReturnType>
<Implementation><![CDATA[
	set outputStr = ""
	
	for i=1:1:$L(inputStr){
		set inputChar = $E(inputStr, i)
		set lower = $ZCONVERT(inputChar, "L")
		set outputChar = $GET(^CacheMsg("Dance", fromLang, toLang, lower), inputChar)
		if (lower '= inputChar) set outputChar = $ZCONVERT($E(outputChar, 1), "U")_$E(outputChar, 2, *)
		set outputStr = outputStr_outputChar
	}
	
	quit outputStr
]]></Implementation>
</Method>

<Method name="Init">
<Description>
Translation dictionary</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ^CacheMsg("Dance", "ru", "en", "а") = "a"
	set ^CacheMsg("Dance", "ru", "en", "б") = "b"
	set ^CacheMsg("Dance", "ru", "en", "в") = "v"
	set ^CacheMsg("Dance", "ru", "en", "г") = "g"
	set ^CacheMsg("Dance", "ru", "en", "д") = "d"
	set ^CacheMsg("Dance", "ru", "en", "е") = "e"
	set ^CacheMsg("Dance", "ru", "en", "ё") = "e"
	set ^CacheMsg("Dance", "ru", "en", "ж") = "zh"
	set ^CacheMsg("Dance", "ru", "en", "з") = "z"
	set ^CacheMsg("Dance", "ru", "en", "и") = "i"
	set ^CacheMsg("Dance", "ru", "en", "й") = "y"
	set ^CacheMsg("Dance", "ru", "en", "к") = "k"
	set ^CacheMsg("Dance", "ru", "en", "л") = "l"
	set ^CacheMsg("Dance", "ru", "en", "м") = "m"
	set ^CacheMsg("Dance", "ru", "en", "н") = "n"
	set ^CacheMsg("Dance", "ru", "en", "о") = "o"
	set ^CacheMsg("Dance", "ru", "en", "п") = "p"
	set ^CacheMsg("Dance", "ru", "en", "р") = "r"	
	set ^CacheMsg("Dance", "ru", "en", "с") = "s"
	set ^CacheMsg("Dance", "ru", "en", "т") = "t"
	set ^CacheMsg("Dance", "ru", "en", "у") = "u"
	set ^CacheMsg("Dance", "ru", "en", "ф") = "f"
	set ^CacheMsg("Dance", "ru", "en", "х") = "kh"
	set ^CacheMsg("Dance", "ru", "en", "ц") = "ts"
	set ^CacheMsg("Dance", "ru", "en", "ч") = "ch"
	set ^CacheMsg("Dance", "ru", "en", "ш") = "sh"
	set ^CacheMsg("Dance", "ru", "en", "щ") = "shch"	
	set ^CacheMsg("Dance", "ru", "en", "ь") = ""
	set ^CacheMsg("Dance", "ru", "en", "ъ") = ""
	set ^CacheMsg("Dance", "ru", "en", "ы") = ""
	set ^CacheMsg("Dance", "ru", "en", "э") = "e"
	set ^CacheMsg("Dance", "ru", "en", "ю") = "yu"
	set ^CacheMsg("Dance", "ru", "en", "я") = "ya"
	
	// Reverse translation is not good enough
	set ^CacheMsg("Dance", "en", "ru", "a") = "а"
	set ^CacheMsg("Dance", "en", "ru", "b") = "б"
	set ^CacheMsg("Dance", "en", "ru", "c") = "ц"
	set ^CacheMsg("Dance", "en", "ru", "d") = "д"
	set ^CacheMsg("Dance", "en", "ru", "e") = "е"
	set ^CacheMsg("Dance", "en", "ru", "f") = "ф"
	set ^CacheMsg("Dance", "en", "ru", "g") = "ж"
	set ^CacheMsg("Dance", "en", "ru", "h") = "ш"
	set ^CacheMsg("Dance", "en", "ru", "i") = "и"
	set ^CacheMsg("Dance", "en", "ru", "j") = "й"
	set ^CacheMsg("Dance", "en", "ru", "k") = "к"
	set ^CacheMsg("Dance", "en", "ru", "l") = "л"
	set ^CacheMsg("Dance", "en", "ru", "m") = "м"
	set ^CacheMsg("Dance", "en", "ru", "n") = "н"
	set ^CacheMsg("Dance", "en", "ru", "o") = "о"
	set ^CacheMsg("Dance", "en", "ru", "p") = "п"
	set ^CacheMsg("Dance", "en", "ru", "r") = "р"
	set ^CacheMsg("Dance", "en", "ru", "s") = "с"	
	set ^CacheMsg("Dance", "en", "ru", "q") = "ку"
	set ^CacheMsg("Dance", "en", "ru", "t") = "т"
	set ^CacheMsg("Dance", "en", "ru", "u") = "у"
	set ^CacheMsg("Dance", "en", "ru", "v") = "в"
	set ^CacheMsg("Dance", "en", "ru", "w") = "в"
	set ^CacheMsg("Dance", "en", "ru", "x") = "кс"
	set ^CacheMsg("Dance", "en", "ru", "y") = "у"
	set ^CacheMsg("Dance", "en", "ru", "z") = "з"
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Data.MatchingCoupleUDSRWDSF">
<Super>%Persistent</Super>
<TimeCreated>63506,77351.424993</TimeCreated>

<Property name="UDSR">
<Type>CoupleUDSR</Type>
<Required>1</Required>
</Property>

<Property name="WDSF">
<Type>CoupleWDSF</Type>
<Required>1</Required>
</Property>

<Index name="UDSRIdx">
<Properties>UDSR</Properties>
<Unique>1</Unique>
</Index>

<Index name="WDSFIdx">
<Properties>WDSF</Properties>
<Unique>1</Unique>
</Index>

<Index name="UDSRWDSFIdx">
<Properties>UDSR,WDSF</Properties>
<Unique>1</Unique>
</Index>

<Method name="CreateByUDSR">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[coupleUDSR:CoupleUDSR,&st:%Status]]></FormalSpec>
<ReturnType>MatchingCoupleUDSRWDSF</ReturnType>
<Implementation><![CDATA[
    set match = $$$NULLOREF
    
    if (..UDSRIdxExists(coupleUDSR.%Id())){
        quit ..UDSRIdxOpen(coupleUDSR.%Id(),,.st)       
    }
    
    try
    {
        TSTART
        
        #dim coupleWDSF As CoupleWDSF = ""
        
        if (coupleUDSR.Man.NumberWDSF '= "") && (coupleUDSR.Woman.NumberWDSF '= "") && (coupleUDSR.Man.NumberWDSF '= "0") && (coupleUDSR.Woman.NumberWDSF '= "0"){
            set coupleWDSF = ##class(CoupleWDSF).GetByNumbers(coupleUDSR.Man.NumberWDSF, coupleUDSR.Woman.NumberWDSF, .st)
            
            if $$$ISOK(st){
                if (coupleWDSF.Man.LastName.GetValueByLang("en") '= coupleUDSR.Man.LastName.GetValueByLang("en")) && (coupleWDSF.Woman.LastName.GetValueByLang("en") '= coupleUDSR.Woman.LastName.GetValueByLang("en")){
                    $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("MatchUdsrWdsf.CreateByUDSR wrong couple lastname."))
                }
            }
            else{
                w !,$SYSTEM.Status.GetErrorText(st)
            }
        }
        
        if $ISOBJECT(coupleWDSF) = $$$NO
        {
            // Searching in controller DB by name
            set wdsfData = ##class(Dance.Wdsf.ControllerAPI).GetCoupleByName(
            coupleUDSR.Man.LastName.GetValueByLang("en")_","_coupleUDSR.Man.FirstName.GetValueByLang("en"), 
            coupleUDSR.Woman.LastName.GetValueByLang("en")_","_coupleUDSR.Woman.FirstName.GetValueByLang("en"), 
            .st)
        
            $$$THROWONERROR(st, st)
        
            set coupleWDSF = ##class(CoupleWDSF).GetByNumbers(wdsfData.man.id, wdsfData.woman.id, .stGetWdsf)
        }
        
        if $ISOBJECT(coupleWDSF){
            $$$THROWONERROR(st, coupleWDSF.Man.LastName.SetValueByLang(coupleUDSR.Man.LastName.GetValueByLang("ru"), "ru"))
            $$$THROWONERROR(st, coupleWDSF.Man.FirstName.SetValueByLang(coupleUDSR.Man.FirstName.GetValueByLang("ru"), "ru"))
            $$$THROWONERROR(st, coupleWDSF.Woman.LastName.SetValueByLang(coupleUDSR.Woman.LastName.GetValueByLang("ru"), "ru"))
            $$$THROWONERROR(st, coupleWDSF.Woman.FirstName.SetValueByLang(coupleUDSR.Woman.FirstName.GetValueByLang("ru"), "ru"))
            
            $$$THROWONERROR(st, coupleUDSR.Man.LastName.SetValueByLang(coupleWDSF.Man.LastName.GetValueByLang("en"), "en"))
            $$$THROWONERROR(st, coupleUDSR.Man.FirstName.SetValueByLang(coupleWDSF.Man.FirstName.GetValueByLang("en"), "en"))
            $$$THROWONERROR(st, coupleUDSR.Woman.LastName.SetValueByLang(coupleWDSF.Woman.LastName.GetValueByLang("en"), "en"))
            $$$THROWONERROR(st, coupleUDSR.Woman.FirstName.SetValueByLang(coupleWDSF.Woman.FirstName.GetValueByLang("en"), "en"))
            
            set match = ..%New()
            set match.UDSR = coupleUDSR
            set match.WDSF = coupleWDSF
            set st = match.%Save()
        }
        
        TCOMMIT
    }
    catch(ex){
        TROLLBACK
        set st = ex.AsStatus()
        do ##class(Dance.Utils.Journal).Create("Log", "MatchingCoupleUDSRWDSF CreateByUDSR", "st="_$SYSTEM.Status.GetErrorText(st))
    }
    
    do ..FixLocalization()
    
    quit match
]]></Implementation>
</Method>

<Method name="CreateByWDSF">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[coupleWDSF:CoupleWDSF,&st:%Status]]></FormalSpec>
<ReturnType>MatchingCoupleUDSRWDSF</ReturnType>
<Implementation><![CDATA[
    set match = $$$NULLOREF
    
    if (..WDSFIdxExists(coupleWDSF.%Id())){
        quit ..WDSFIdxOpen(coupleWDSF.%Id(),,.st)       
    }
    
    try
    {
        TSTART
        
        set manLastName = coupleWDSF.Man.LastName.GetValueByLang("en")
        set manFirstName = coupleWDSF.Man.FirstName.GetValueByLang("en")
        set womanLastName = coupleWDSF.Woman.LastName.GetValueByLang("en")
        set womanFirstName = coupleWDSF.Woman.FirstName.GetValueByLang("en")
        set udsrManNumber = ""
        set udsrWomanNumber = ""
        
        // Поиск по номеру вдсф
        &sql(SELECT Number INTO :udsrManNumber FROM Dance_Data.PersonUDSR WHERE NumberWDSF = :coupleWDSF.Man.Number)
        &sql(SELECT Number INTO :udsrWomanNumber FROM Dance_Data.PersonUDSR WHERE NumberWDSF = :coupleWDSF.Woman.Number)

        if (udsrManNumber = "") || (udsrWomanNumber = ""){
            
            // Поиск по имени
            &sql(DECLARE ManCur CURSOR FOR 
                 SELECT person.Number
                 FROM Dance_Data.PersonUDSR as person 
                 INNER JOIN 
                      Dance_Data_Localization.LTextValue as ltvalLN ON ltvalLN.LText = person.LastName 
                 INNER JOIN 
                      Dance_Data_Localization.LTextValue as ltvalFN ON ltvalFN.LText = person.FirstName
                 WHERE %UPPER(ltvalLN.Value) = %UPPER(TRIM(BOTH ' ' FROM :manLastName)) 
                       AND 
                       %UPPER(ltvalFN.Value) = %UPPER(TRIM(BOTH ' ' FROM :manFirstName)))   
            &sql(OPEN ManCur)
            for  
            {   
                &sql(FETCH ManCur INTO :udsrManNumber) 
                quit:(SQLCODE '= 0)
                
                set womanUDSR = ##class(PersonUDSR).NumberUDSRIdxOpen($GET(^Dance.Data.ManPartnersUDSR(udsrManNumber)))
                if $ISOBJECT(womanUDSR) && (womanUDSR.LastName.GetValueByLang("en") = womanLastName) && (womanUDSR.FirstName.GetValueByLang("en") = womanFirstName){
                    set udsrWomanNumber = womanUDSR.Number
                    quit
                }
            }
            &sql(CLOSE ManCur)
        }
        
        set coupleUDSR = ##class(CoupleUDSR).GetByNumbers(udsrManNumber, udsrWomanNumber)
        if '$ISOBJECT(coupleUDSR){
            $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("error_CoupleUDSRNotFoundByCoupleWDSFFullName"))
        }
        
        $$$THROWONERROR(st, coupleWDSF.Man.LastName.SetValueByLang(coupleUDSR.Man.LastName.GetValueByLang("ru"), "ru"))
        $$$THROWONERROR(st, coupleWDSF.Man.FirstName.SetValueByLang(coupleUDSR.Man.FirstName.GetValueByLang("ru"), "ru"))
        $$$THROWONERROR(st, coupleWDSF.Woman.LastName.SetValueByLang(coupleUDSR.Woman.LastName.GetValueByLang("ru"), "ru"))
        $$$THROWONERROR(st, coupleWDSF.Woman.FirstName.SetValueByLang(coupleUDSR.Woman.FirstName.GetValueByLang("ru"), "ru"))
        
        set match = ..%New()
        set match.UDSR = coupleUDSR
        set match.WDSF = coupleWDSF
        set st = match.%Save()
    
        TCOMMIT
    }
    catch(ex){
        TROLLBACK 1
        set st = ex.AsStatus()
        do ##class(Dance.Utils.Journal).Create("Log", "MatchingCoupleUDSRWDSF CreateByWDSF", "st="_$SYSTEM.Status.GetErrorText(st))
    }
    
    do ..FixLocalization()
    
    quit match
]]></Implementation>
</Method>

<Method name="FixLocalization">
<Description>
do ##class(Dance.Data.MatchingCoupleUDSRWDSF).FixLocalization()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    try
    {
        TSTART
        
        &sql(DECLARE MtCur CURSOR FOR 
             SELECT UDSR, WDSF
             FROM Dance_Data.MatchingCoupleUDSRWDSF
             WHERE UDSR->Man->LastName->Value <> WDSF->Man->LastName->Value OR UDSR->Woman->LastName->Value <> WDSF->Woman->LastName->Value)    
        &sql(OPEN MtCur)
        for  
        {   
            &sql(FETCH MtCur INTO :udsrId, :wdsfId) 
            quit:(SQLCODE '= 0)
            
            do ##class(Dance.Utils.Journal).Create("Log", "Matching. FixLocalization", "Poblem match. UDSR="_udsrId_"; WDSF="_wdsfId)
            
            set coupleUDSR = ##class(Dance.Data.CoupleUDSR).%OpenId(udsrId)
            set coupleWDSF = ##class(Dance.Data.CoupleWDSF).%OpenId(wdsfId)

            $$$THROWONERROR(st, coupleWDSF.Man.LastName.SetValueByLang(coupleUDSR.Man.LastName.GetValueByLang("ru"), "ru"))
            $$$THROWONERROR(st, coupleWDSF.Man.FirstName.SetValueByLang(coupleUDSR.Man.FirstName.GetValueByLang("ru"), "ru"))
            $$$THROWONERROR(st, coupleWDSF.Woman.LastName.SetValueByLang(coupleUDSR.Woman.LastName.GetValueByLang("ru"), "ru"))
            $$$THROWONERROR(st, coupleWDSF.Woman.FirstName.SetValueByLang(coupleUDSR.Woman.FirstName.GetValueByLang("ru"), "ru"))
        }
        &sql(CLOSE MtCur)
        
        TCOMMIT
    }
    catch(ex){
        TROLLBACK 1
        do ##class(Dance.Utils.Journal).Create("Log", "Matching. FixLocalization", $SYSTEM.Status.GetErrorText(ex.AsStatus()))
    }
]]></Implementation>
</Method>

<Method name="GetWDSFCoupleIDByUDSR">
<ClassMethod>1</ClassMethod>
<FormalSpec>coupleUDSRId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set coupleId = ""
    &sql(SELECT WDSF INTO :coupleId FROM Dance_Data.MatchingCoupleUDSRWDSF WHERE UDSR = :coupleUDSRId)
    quit coupleId
]]></Implementation>
</Method>

<Method name="GetUDSRCoupleIDByWDSF">
<ClassMethod>1</ClassMethod>
<FormalSpec>coupleWDSFId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set coupleId = ""
    &sql(SELECT UDSR INTO :coupleId FROM Dance_Data.MatchingCoupleUDSRWDSF WHERE WDSF = :coupleWDSFId)
    quit coupleId
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.MatchingCouF955D</DataLocation>
<DefaultData>MatchingCoupleUDSRWDSFDefaultData</DefaultData>
<IdLocation>^Dance.Data.MatchingCouF955D</IdLocation>
<IndexLocation>^Dance.Data.MatchingCouF955I</IndexLocation>
<StreamLocation>^Dance.Data.MatchingCouF955S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="MatchingCoupleUDSRWDSFDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>UDSR</Value>
</Value>
<Value name="3">
<Value>WDSF</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.Participant">
<Description>
Участник турнира</Description>
<Super>%Persistent</Super>
<TimeCreated>63295,5554.902115</TimeCreated>

<Property name="Created">
<Description>
Дата создания записи</Description>
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="Recorder">
<Description>
Организатор, который создал эту запись</Description>
<Type>Recorder</Type>
<Required>1</Required>
</Property>

<Property name="Tournament">
<Description>
Турнир</Description>
<Type>Tournament</Type>
<Required>1</Required>
</Property>

<Property name="Competition">
<Description>
Соревнование турнира, в котором участвует</Description>
<Type>Competition</Type>
<Required>1</Required>
</Property>

<Property name="FullName">
<Description>
Полное имя пары/соло участника </Description>
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="Country">
<Description>
Страна участника</Description>
<Type>Country</Type>
<Required>1</Required>
</Property>

<Property name="City">
<Description>
Город участника</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Club">
<Description>
Клуб участника</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="MainTrainer">
<Description>
Главный тренер</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="OtherTrainers">
<Description>
Другие тренеры</Description>
<Type>%Text</Type>
<Parameter name="MAXLEN" value="2000"/>
</Property>

<Property name="IsActive">
<Description>
Является ли активной запись в базе</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Required>1</Required>
</Property>

<Property name="Tickets">
<Description>
Релейшен - билеты</Description>
<Type>Dance.Data.Ticket</Type>
<Cardinality>many</Cardinality>
<Inverse>Participant</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="PrtObjKey">
<Description>
Класс@ИД - объекта участника</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="2000"/>
</Property>

<Property name="PrtObjPaymentsCountCalc">
<Description>
Количество оплаченных билетов участника во всем турнире</Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {PrtObjPaymentsCountCalc} = ##class({%%CLASSNAME}).GetPrtObjPaymentsCount({%%ID}, {PrtObjKey}, {Tournament})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="PrtObjPaymentsCount">
<Description>
Количество оплаченных билетов участника во всем турнире</Description>
<Type>%Integer</Type>
</Property>

<Property name="PrtObjCompetitionsCountCalc">
<Description>
Количество соревнований турнира, в которых участвует участник(пара/соло) </Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {PrtObjCompetitionsCountCalc} = ##class({%%CLASSNAME}).GetPrtObjCompetitionsCount({%%ID}, {PrtObjKey}, {Tournament})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="PrtObjCompetitionsCount">
<Description>
Количество соревнований турнира, в которых участвует участник(пара/соло) </Description>
<Type>%Integer</Type>
</Property>

<Property name="TicketStatus">
<Description>
Статус билета участника</Description>
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {TicketStatus} = ##class({%%CLASSNAME}).GetTicketStatus({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Index name="TournamentPrtIdx">
<Properties>Tournament</Properties>
</Index>

<Index name="CompetitionIdx">
<Data>Competition</Data>
<Properties>Competition</Properties>
</Index>

<Index name="PrtObjKeyIndex">
<Properties>PrtObjKey</Properties>
</Index>

<Index name="IsActiveIndex">
<Properties>IsActive</Properties>
</Index>

<Index name="CommonIdx">
<Properties>Tournament,PrtObjKey,IsActive</Properties>
</Index>

<Method name="ConvertToProxyObject">
<Description>
Преобразование в json</Description>
<FormalSpec>params:%ZEN.proxyObject</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.id = ..%Id()
    set proxy.competition = ..Competition.ConvertToProxyObject(params.competitionParams)
    set proxy.isActive = ..IsActive
    set proxy.created = ..Created
    set proxy.ticketStatus = ##class(TicketStatus).CodeIdxOpen(..TicketStatus).ConvertToProxyObject()
        
    quit proxy
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description>
Обработка при создании</Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
    set ..Created = $ZDT($ZTS, 3)   
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetFullNameForLang">
<Description>
Имя участника для выбранного языка</Description>
<FormalSpec>lang:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("GetFullNameForLang - не перекрыт!"))
]]></Implementation>
</Method>

<Method name="UpdateAllParticipantsFullName">
<Description>
Обновить имена для всех участников (актуальное значение присвоить) w ##class(Dance.Data.Participant).UpdateAllParticipantsFullName()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        //TSTART
        
        &sql(DECLARE PrtFullNameCur CURSOR FOR
             SELECT %NOLOCK ID 
             FROM Dance_Data.Participant
             WHERE Tournament->IsActive = 1 AND Competition->IsActive = 1 AND IsActive = 1 AND (Tournament->TStatus->Code IN ('Registration', 'RegistrationClosed')))
        
        &sql(OPEN PrtFullNameCur)
        for{
            &sql(FETCH PrtFullNameCur INTO :prtId) 
            quit:(SQLCODE '= 0)
            
            set prt = ..%OpenId(prtId,,.st)
            $$$THROWONERROR(st, st)
            
            if $ISOBJECT(prt.FullName) = $$$NO{
                set prt.FullName = ##class(Dance.Data.Localization.LText).Create("")
                $$$THROWONERROR(st, prt.%Save())
            }
            
            $$$THROWONERROR(st, ..UpdateParticipantFullName(prt))   
            kill prt
        }
        
        &sql(CLOSE PrtFullNameCur)
        
        //TCOMMIT
    }
    catch(ex){
        //TROLLBACK
        
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="UpdateParticipantFullName">
<Description>
Обновить имя одного участника (актуальное значение присвоить) </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>prt:Participant</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        &sql(DECLARE LangCurs CURSOR FOR
             SELECT %NOLOCK  Code 
             FROM Dance_Data_Localization.LTextLanguage
             ORDER BY Code)
        
        &sql(OPEN LangCurs)
        for{
            &sql(FETCH LangCurs INTO :code) 
            quit:(SQLCODE '= 0)
            
            // Чтобы в немецком|(другом) были английские имена, всяко лучше чем по русски
            set langCodeForSearch = code
            if (code = "de") || (code = "it"){
                set langCodeForSearch = "en" 
            }
            
            $$$THROWONERROR(st, prt.FullName.SetValueByLang(prt.GetFullNameForLang(langCodeForSearch), code))   
        }
        
        &sql(CLOSE LangCurs)
        
        TCOMMIT
    }
    catch(ex){
        TROLLBACK 1
        
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="Deactivate">
<Description>
Change IsActive property to 0</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ##class(Dance.Utils.Journal).Create("Log", "Data.Participant.Deactivate", "ID="_id_";")
    
    set obj = ..%OpenId(id)
    set obj.IsActive = 0
    
    quit obj.%Save()
]]></Implementation>
</Method>

<Method name="GetTicketStatus">
<Description>
Статус билета участника</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>participantId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set status = "Not paid"
    
    &sql(SELECT %NOLOCK TStatus->Code INTO :status FROM Dance_Data.Ticket WHERE Participant = :participantId)   

    quit status
]]></Implementation>
</Method>

<Method name="GetPrtObjPaymentsCount">
<Description>
Получить количество оплаченных билетов в турнире для объекта-участника (пара или соло)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>prtId:%String,prtObjKey:%String,trnId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set count = ##class(Ticket).GetPrtObjPaymentsCountInTournament(prtObjKey, trnId)    
    
    // ID - объекта участника
    set prtObjId = $P(prtObjKey, "@", 2)
    
    if (##class(ParticipantCoupleUDSR).%ExistsId(prtId)) && (##class(MatchingCoupleUDSRWDSF).UDSRIdxExists(prtObjId)){
        // Если пара СТСР еще и является парой WDSF, то нужно посчитать ещё платежи WDSF версии пары
        set wdsfCoupleId = ##class(MatchingCoupleUDSRWDSF).GetWDSFCoupleIDByUDSR(prtObjId)
        set prtObjKey = ##class(CoupleWDSF).%ClassName(1)_"@"_wdsfCoupleId
            
        set count = count + ##class(Ticket).GetPrtObjPaymentsCountInTournament(prtObjKey, trnId)
    }
    elseif (##class(ParticipantCoupleWDSF).%ExistsId(prtId)) && (##class(MatchingCoupleUDSRWDSF).WDSFIdxExists(prtObjId)){
        // Если пара WDSF еще и является парой СТСР, то нужно посчитать ещё платежи СТСР версии пары
        set udsrCoupleId = ##class(MatchingCoupleUDSRWDSF).GetUDSRCoupleIDByWDSF(prtObjId) 
        set prtObjKey = ##class(CoupleUDSR).%ClassName(1)_"@"_udsrCoupleId
            
        set count = count + ##class(Ticket).GetPrtObjPaymentsCountInTournament(prtObjKey, trnId)
    }
    
    quit count
]]></Implementation>
</Method>

<Method name="GetPrtObjCompetitionsCount">
<Description>
Количество соревнований  участника в турнире (с учетом пар-совпадений)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>prtId:%String,prtObjKey:%String,trnId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set count = ..GetCompetitionsCountForPrtObject(prtObjKey, trnId, "")    
    
    set prtObjId = $P(prtObjKey, "@", 2)
    if (##class(ParticipantCoupleUDSR).%ExistsId(prtId)) && (##class(MatchingCoupleUDSRWDSF).UDSRIdxExists(prtObjId)){
        set wdsfCoupleId = ##class(MatchingCoupleUDSRWDSF).GetWDSFCoupleIDByUDSR(prtObjId)
        set prtObjWDSFKey = ##class(CoupleWDSF).%ClassName(1)_"@"_wdsfCoupleId
        
        set count = count + ..GetCompetitionsCountForPrtObject(prtObjWDSFKey, trnId, prtObjKey)    
    }
    elseif (##class(ParticipantCoupleWDSF).%ExistsId(prtId)) && (##class(MatchingCoupleUDSRWDSF).WDSFIdxExists(prtObjId)){
        set udsrCoupleId = ##class(MatchingCoupleUDSRWDSF).GetUDSRCoupleIDByWDSF(prtObjId)
        set prtObjUDSRKey = ##class(CoupleUDSR).%ClassName(1)_"@"_udsrCoupleId
        
        set count = count + ..GetCompetitionsCountForPrtObject(prtObjUDSRKey, trnId, prtObjKey)
    }
    
    quit count
]]></Implementation>
</Method>

<Method name="GetCompetitionsCountForPrtObject">
<Description>
Количество соревнований  определенного участника в турнире</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>prtObjKey:%String,trnId:%String,withOutPrtObj:%String</FormalSpec>
<Implementation><![CDATA[
    set count = 0   
    &sql(SELECT %NOLOCK COUNT(ID) INTO :count 
         FROM Dance_Data.Participant 
         WHERE Tournament = :trnId AND PrtObjKey = :prtObjKey AND IsActive = 1 AND Competition NOT IN 
            (SELECT %NOLOCK Competition 
             FROM Dance_Data.Participant 
             WHERE Tournament = :trnId AND PrtObjKey = :withOutPrtObj AND IsActive = 1))
    quit count
]]></Implementation>
</Method>

<Method name="GetPrtObjKey">
<Description>
ClassName@ID - объекта участника</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>prtId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set key = ""
    
    if (##class(ParticipantCoupleUDSR).%ExistsId(prtId)){
        set prt1 = ##class(ParticipantCoupleUDSR).%OpenId(prtId)
        set key = prt1.Couple.%ClassName(1)_"@"_ prt1.Couple.%Id()
    }
    elseif (##class(ParticipantCoupleWDSF).%ExistsId(prtId)){
        set prt2 = ##class(ParticipantCoupleWDSF).%OpenId(prtId)
        set key = prt2.Couple.%ClassName(1)_"@"_ prt2.Couple.%Id()      
    }
    elseif (##class(ParticipantCoupleOther).%ExistsId(prtId)){
        set prt3 = ##class(ParticipantCoupleOther).%OpenId(prtId)
        set key = prt3.%ClassName(1)_"@"_ prt3.CoupleKey        
    }
    elseif (##class(ParticipantSingleUDSR).%ExistsId(prtId)){
        set prt4 = ##class(ParticipantSingleUDSR).%OpenId(prtId)
        set key = prt4.Athlete.%ClassName(1)_"@"_ prt4.Athlete.%Id()        
    }
    elseif (##class(ParticipantSingleWDSF).%ExistsId(prtId)){
        set prt5 = ##class(ParticipantSingleWDSF).%OpenId(prtId)
        set key = prt5.Athlete.%ClassName(1)_"@"_ prt5.Athlete.%Id()        
    }
    elseif (##class(ParticipantSingleOther).%ExistsId(prtId)){
        set prt6 = ##class(ParticipantSingleOther).%OpenId(prtId)
        set key = prt6.%ClassName(1)_"@"_ prt6.AthleteKey       
    }
    
    quit key
]]></Implementation>
</Method>

<Method name="UpdatePrtKey">
<Description>
do ##class(Dance.Data.Participant).UpdatePrtKey()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    set st = $$$OK
    try{
        TSTART
        
        &sql(DECLARE PrtUPDDCurs CURSOR FOR 
             SELECT ID
             FROM Dance_Data.Participant)   
                    
        &sql(OPEN PrtUPDDCurs)
        for  
        {   
            &sql(FETCH PrtUPDDCurs INTO :id) 
            quit:(SQLCODE '= 0)
            
            set obj = ..%OpenId(id)
            set obj.PrtObjKey = ..GetPrtObjKey(obj.%Id())
            set obj.Tournament = obj.Competition.Tournament
            $$$THROWONERROR(st, obj.%Save())
        }
        
        &sql(CLOSE PrtUPDDCurs)
        
        TCOMMIT 
    }
    catch(ex){
        TROLLBACK
        
        set st = ex.AsStatus()
        w $SYSTEM.Status.GetErrorText(st)
    }
]]></Implementation>
</Method>

<Method name="UpdatePrtObjPaymentsCount">
<Description>
Обновить свойство: количество платежей объекта-участника в турнире</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>prtId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set (trnId, prtObjKey) = ""
    &sql(SELECT %NOLOCK Tournament, PrtObjKey INTO :trnId, :prtObjKey 
         FROM Dance_Data.Participant
         WHERE ID = :prtId)
    
    set count = ..GetPrtObjPaymentsCount(prtId, prtObjKey, trnId)
    &sql(UPDATE %NOLOCK Dance_Data.Participant
         SET PrtObjPaymentsCount = :count
         WHERE ID = :prtId)

    quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdatePrtObjCompetitionsCount">
<Description>
Обновить свойство: количество групп объекта-участника в турнире</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>prtId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set (trnId, prtObjKey) = ""
    
    &sql(SELECT %NOLOCK Tournament, PrtObjKey INTO :trnId, :prtObjKey 
         FROM Dance_Data.Participant
         WHERE ID = :prtId)
    
    set count = ..GetPrtObjCompetitionsCount(prtId, prtObjKey, trnId)
    
    &sql(UPDATE %NOLOCK Dance_Data.Participant
         SET PrtObjCompetitionsCount = :count
         WHERE ID = :prtId)

    quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdateAllByTournament">
<Description>
Обновить свойства всех групп турнира</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
    
    try{       
        //TSTART
        
        &sql(DECLARE PrtCurs CURSOR FOR
             SELECT %NOLOCK ID
             FROM Dance_Data.Participant
             WHERE Tournament = :trnId)
        
        &sql(OPEN PrtCurs)
        for{
            &sql(FETCH PrtCurs INTO :id) 
            quit:(SQLCODE '= 0)
            
            do ..UpdatePrtObjCompetitionsCount(id)
            do ..UpdatePrtObjPaymentsCount(id)
        }
        
        &sql(CLOSE PrtCurs)
        
        //TCOMMIT
    }
    catch(ex){
        //TROLLBACK 1
        
        set status = ex.AsStatus()
    }
    
    quit status
]]></Implementation>
</Method>

<Method name="IsParticipationExists">
<ClassMethod>1</ClassMethod>
<FormalSpec>prtObjId:%String,prtObjClassName:%String,cmpId:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
    SET SQLCODE = ""
    
    set prtObjKey = prtObjClassName_"@"_prtObjId
     
    set prtId = ""
    &sql(SELECT ID INTO :prtId
         FROM Dance_Data.Participant 
         WHERE PrtObjKey = :prtObjKey AND Competition = :cmpId AND IsActive = 1)
    
    quit:(SQLCODE=0) $$$YES
    
    quit $$$NO
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.ParticipantD</DataLocation>
<DefaultData>ParticipantDefaultData</DefaultData>
<IdLocation>^Dance.Data.ParticipantD</IdLocation>
<IndexLocation>^Dance.Data.ParticipantI</IndexLocation>
<StreamLocation>^Dance.Data.ParticipantS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ParticipantDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Created</Value>
</Value>
<Value name="3">
<Value>Recorder</Value>
</Value>
<Value name="4">
<Value>Tournament</Value>
</Value>
<Value name="5">
<Value>Competition</Value>
</Value>
<Value name="6">
<Value>FullName</Value>
</Value>
<Value name="7">
<Value>Country</Value>
</Value>
<Value name="8">
<Value>City</Value>
</Value>
<Value name="9">
<Value>Club</Value>
</Value>
<Value name="10">
<Value>MainTrainer</Value>
</Value>
<Value name="11">
<Value>OtherTrainers</Value>
</Value>
<Value name="12">
<Value>IsActive</Value>
</Value>
<Value name="13">
<Value>PrtObjKey</Value>
</Value>
<Value name="14">
<Value>PrtObjPaymentsCount</Value>
</Value>
<Value name="15">
<Value>PrtObjCompetitionsCount</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.ParticipantCoupleOther">
<Description>
Пара - другой участник</Description>
<Super>Participant</Super>
<TimeCreated>63440,4317.627564</TimeCreated>

<Property name="CoupleKey">
<Description>
Ключ как хеш полей при заполнении, для определения уникальности</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="ManLastName">
<Description>
Фамилия партнера</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="ManFirstName">
<Description>
Имя партнера</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="ManDOB">
<Description>
ДР партнера</Description>
<Type>%Date</Type>
<Required>1</Required>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="WomanLastName">
<Description>
Фамилия партнерши</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="WomanFirstName">
<Description>
Имя партнерши</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="WomanDOB">
<Description>
ДР партнерши</Description>
<Type>%Date</Type>
<Required>1</Required>
<Parameter name="FORMAT" value="3"/>
</Property>

<Index name="CoupleKeyIdx">
<Properties>CoupleKey</Properties>
</Index>

<Method name="ConvertToProxyObject">
<FormalSpec>params:%ZEN.proxyObject</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##super(params)
    set proxy.couple = ##class(%ZEN.proxyObject).%New()
    set proxy.couple.key = ..CoupleKey
    set proxy.couple.type = "Other"
    
    set proxy.couple.man = ##class(%ZEN.proxyObject).%New()
    set proxy.couple.man.gender = "Male"
    set proxy.couple.man.lastName = ..ManLastName
    set proxy.couple.man.firstName = ..ManFirstName
    set proxy.couple.man.dob = $ZD(..ManDOB, 3)
    
    set proxy.couple.woman = ##class(%ZEN.proxyObject).%New()
    set proxy.couple.woman.gender = "Female"
    set proxy.couple.woman.lastName = ..WomanLastName
    set proxy.couple.woman.firstName = ..WomanFirstName
    set proxy.couple.woman.dob = $ZD(..WomanDOB, 3)
    
    set proxy.couple.otherInfo = ##class(%ZEN.proxyObject).%New()
    set proxy.couple.otherInfo.country = ..Country.ConvertToProxyObject()
    set proxy.couple.otherInfo.city = ..City
    set proxy.couple.otherInfo.club = ..Club
    set proxy.couple.otherInfo.mainTrainer = ..MainTrainer
    set proxy.couple.otherInfo.otherTrainers = ..OtherTrainers
    
    set proxy.couple.competitionsCount = "-"
    set proxy.couple.paymentsCount = "-"
    if $ISOBJECT(proxy.competition.tournament){     
        if (params.loadPrtObjCompetitionsCount){
            set proxy.couple.competitionsCount = ..PrtObjCompetitionsCount
        }
        
        if (params.loadPrtObjPaymentsCount){
            set proxy.couple.paymentsCount = ..PrtObjPaymentsCount
        }
    }
    
    quit proxy
]]></Implementation>
</Method>

<Method name="Create">
<Description>
Создать запись</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[recorder:Recorder,competition:Competition,couple:%ZEN.proxyObject,&st]]></FormalSpec>
<ReturnType>Participant</ReturnType>
<Implementation><![CDATA[
    set obj = ..%New()

    // Свойства класса
    set obj.ManLastName = couple.man.lastName
    set obj.ManFirstName = couple.man.firstName
    set obj.ManDOB = $ZDH(couple.man.dob, 3)
    
    set obj.WomanLastName = couple.woman.lastName
    set obj.WomanFirstName = couple.woman.firstName
    set obj.WomanDOB = $ZDH(couple.woman.dob, 3)
    
    set obj.CoupleKey = couple.key  
    
    // Свойства базового класса
    set obj.Recorder = recorder
    set obj.Competition = competition 
    set obj.Tournament = competition.Tournament
    set obj.FullName = ##class(Dance.Data.Localization.LText).Create("")
    set st = ..UpdateParticipantFullName(obj)
    quit:$$$ISERR(st) $$$NULLOREF
    
    set obj.Country = ##class(Country).%OpenId(couple.otherInfo.country.id) 
    set obj.City = couple.otherInfo.city
    set obj.Club = couple.otherInfo.club
    set obj.MainTrainer = couple.otherInfo.mainTrainer
    set obj.OtherTrainers = couple.otherInfo.otherTrainers
    
    set obj.PrtObjKey = ..%ClassName(1)_"@"_couple.key
    
    set st = obj.%Save()
    
    quit obj
]]></Implementation>
</Method>

<Method name="GetByFilter">
<Description>
Найти пару по параметрам</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>filter:%RegisteredObject</FormalSpec>
<ReturnType>ParticipantCoupleOther</ReturnType>
<Implementation><![CDATA[
    set id = ""

    &sql(SELECT ID INTO :id
         FROM Dance_Data.ParticipantCoupleOther 
         WHERE Competition = :filter.competitionId 
               AND
               %UPPER(ManLastName) = %UPPER(TRIM(BOTH ' ' FROM :filter.man.lastName)) 
               AND 
               %UPPER(ManFirstName) = %UPPER(TRIM(BOTH ' ' FROM :filter.man.firstName))
               AND
               %UPPER(WomanLastName) = %UPPER(TRIM(BOTH ' ' FROM :filter.woman.lastName)) 
               AND 
               %UPPER(WomanFirstName) = %UPPER(TRIM(BOTH ' ' FROM :filter.woman.firstName))
               AND
               (
                 %UPPER(Club) = %UPPER(TRIM(BOTH ' ' FROM :filter.otherInfo.club)) 
                 OR 
                 %UPPER(City) = %UPPER(TRIM(BOTH ' ' FROM :filter.otherInfo.city))
               ))
               
    quit ..%OpenId(id)
]]></Implementation>
</Method>

<Method name="GetFullNameForLang">
<Description>
Имя участника для выбранного языка</Description>
<FormalSpec>lang:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..ManLastName_" "_..ManFirstName_" - "_..WomanLastName_" "_..WomanFirstName
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ParticipantCoupleOtherDefaultData</DefaultData>
<Data name="ParticipantCoupleOtherDefaultData">
<Subscript>"ParticipantCoupleOther"</Subscript>
<Value name="1">
<Value>CoupleKey</Value>
</Value>
<Value name="2">
<Value>ManLastName</Value>
</Value>
<Value name="3">
<Value>ManFirstName</Value>
</Value>
<Value name="4">
<Value>ManDOB</Value>
</Value>
<Value name="5">
<Value>WomanLastName</Value>
</Value>
<Value name="6">
<Value>WomanFirstName</Value>
</Value>
<Value name="7">
<Value>WomanDOB</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.ParticipantCoupleUDSR">
<Description>
Участника - пара СТСР</Description>
<Super>Participant</Super>
<TimeCreated>63440,4238.448759</TimeCreated>

<Property name="Couple">
<Description>
Пара СТСР</Description>
<Type>CoupleUDSR</Type>
<Required>1</Required>
</Property>

<Index name="CmpCplUDSRIdx">
<Properties>Competition,Couple</Properties>
<Unique>1</Unique>
</Index>

<Index name="CoupleUDSRIdx">
<Properties>Couple</Properties>
</Index>

<Method name="ConvertToProxyObject">
<Description>
Конвертация в JSON</Description>
<FormalSpec>params:%ZEN.proxyObject</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##super(params)
	set proxy.couple = ..Couple.ConvertToProxyObject()
	
	set proxy.couple.competitionsCount = "-"
	set proxy.couple.paymentsCount = "-"
	
	
	if $ISOBJECT(proxy.competition.tournament){	
		if (params.loadPrtObjCompetitionsCount){
			set proxy.couple.competitionsCount = ..PrtObjCompetitionsCount
		}
		
		if (params.loadPrtObjPaymentsCount){
			set proxy.couple.paymentsCount = ..PrtObjPaymentsCount
		}
	}
	
	quit proxy
]]></Implementation>
</Method>

<Method name="Create">
<Description>
Создание записи для участника  - пары СТСР</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[recorder:Recorder,competition:Competition,couple:%ZEN.proxyObject,&st]]></FormalSpec>
<ReturnType>Participant</ReturnType>
<Implementation><![CDATA[
	set coupleDB = ##class(Dance.Data.CoupleUDSR).%OpenId(couple.id,,.st)
	if $$$ISOK(st){
		if (coupleDB.Man.Club '= "" ) && (coupleDB.Woman.Club '= "" ) && ($ZCVT(coupleDB.Man.Club, "L") '= $ZCVT(coupleDB.Woman.Club, "L")){
			set st = ##class(Dance.Utils.Msg).GetErrorStatus("error_CoupleDifferentClubs", " "_coupleDB.Man.Number_" - "_coupleDB.Man.Club_"; "_coupleDB.Woman.Number_" - "_coupleDB.Woman.Club_".")
			quit $$$NULLOREF
		}
	}
	
	if ..CmpCplUDSRIdxExists(competition.%Id(), couple.id) {
		set obj = ..CmpCplUDSRIdxOpen(competition.%Id(), couple.id)
		set obj.IsActive = 1
		set st = obj.%Save()
		quit obj
	}
	
	set obj = ..%New()
	
	// Свойства класса
	set obj.Couple = coupleDB
	
	// Свойства базового класса
	set obj.Recorder = recorder
	set obj.Competition = competition
	set obj.Tournament = competition.Tournament
	
	set obj.FullName = ##class(Dance.Data.Localization.LText).Create("")
	set st = ..UpdateParticipantFullName(obj)
	quit:$$$ISERR(st) $$$NULLOREF
	
	set obj.Country = coupleDB.Man.Country	
	set obj.City = coupleDB.Man.City
	set obj.Club = coupleDB.Man.Club
	set obj.MainTrainer = coupleDB.Man.MainTrainer
	set obj.OtherTrainers = coupleDB.Man.OtherTrainers
	
	set obj.PrtObjKey = coupleDB.%ClassName(1)_"@"_coupleDB.%Id()
	
	set st = obj.%Save()
	
	quit obj
]]></Implementation>
</Method>

<Method name="GetFullNameForLang">
<Description>
Имя участника для выбранного языка</Description>
<FormalSpec>lang:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..Couple.Man.LastName.GetValueByLang(lang)_" "_..Couple.Man.FirstName.GetValueByLang(lang)_" - "_..Couple.Woman.LastName.GetValueByLang(lang)_" "_..Couple.Woman.FirstName.GetValueByLang(lang)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ParticipantCoupleUDSRDefaultData</DefaultData>
<Data name="ParticipantCoupleUDSRDefaultData">
<Subscript>"ParticipantCoupleUDSR"</Subscript>
<Value name="1">
<Value>Couple</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.ParticipantCoupleWDSF">
<Description>
Участник - пара WDSF</Description>
<Super>Participant</Super>
<TimeCreated>63440,4297.586433</TimeCreated>

<Property name="Couple">
<Description>
Пара WDSF</Description>
<Type>CoupleWDSF</Type>
<Required>1</Required>
</Property>

<Property name="ManDOB">
<Description>
Дата рождения партнера</Description>
<Type>%Date</Type>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="WomanDOB">
<Description>
Дата рождения партнерши</Description>
<Type>%Date</Type>
<Parameter name="FORMAT" value="3"/>
</Property>

<Index name="CmpCplWDSFIdx">
<Properties>Competition,Couple</Properties>
<Unique>1</Unique>
</Index>

<Index name="CoupleWDSFIdx">
<Properties>Couple</Properties>
</Index>

<Method name="ConvertToProxyObject">
<Description>
Коневертация в json</Description>
<FormalSpec>params:%ZEN.proxyObject</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##super(params)
	set proxy.couple = ..Couple.ConvertToProxyObject()
	
	if (..ManDOB) set proxy.couple.man.dob = $ZD(..ManDOB, 3)
	if (..WomanDOB) set proxy.couple.woman.dob = $ZD(..WomanDOB, 3)
	
	set proxy.couple.otherInfo.city = ..City
	set proxy.couple.otherInfo.club = ..Club
	set proxy.couple.otherInfo.mainTrainer = ..MainTrainer
	set proxy.couple.otherInfo.otherTrainers = ..OtherTrainers

	set proxy.couple.competitionsCount = "-"
	set proxy.couple.paymentsCount = "-"
	
	if $ISOBJECT(proxy.competition.tournament){	
		if (params.loadPrtObjCompetitionsCount){
			set proxy.couple.competitionsCount = ..PrtObjCompetitionsCount
		}
		
		if (params.loadPrtObjPaymentsCount){
			set proxy.couple.paymentsCount = ..PrtObjPaymentsCount
		}
	}
	
	quit proxy
]]></Implementation>
</Method>

<Method name="Create">
<Description>
Создать запись</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[recorder:Recorder,competition:Competition,couple:%ZEN.proxyObject,&st]]></FormalSpec>
<ReturnType>Participant</ReturnType>
<Implementation><![CDATA[
	if ..CmpCplWDSFIdxExists(competition.%Id(), couple.id) {
		set obj = ..CmpCplWDSFIdxOpen(competition.%Id(), couple.id)
		set obj.IsActive = 1
		set st = obj.%Save()
		quit obj
	}
	
	set obj = ..%New()
	
	// Свойства класса
	set obj.Couple = ##class(Dance.Data.CoupleWDSF).%OpenId(couple.id)
	if ($LENGTH(couple.man.dob) = 10) set obj.ManDOB = $ZDH(couple.man.dob, 3)
	if ($LENGTH(couple.woman.dob) = 10) set obj.WomanDOB = $ZDH(couple.woman.dob, 3)
	
	// Свойства базового класса
	set obj.Recorder = recorder
	set obj.Competition = competition 
	set obj.Tournament = competition.Tournament
	
	set obj.FullName = ##class(Dance.Data.Localization.LText).Create("")
	set st = ..UpdateParticipantFullName(obj)
	quit:$$$ISERR(st) $$$NULLOREF
	
	set obj.Country = obj.Couple.Man.Country
	set obj.City = couple.otherInfo.city
	set obj.Club = couple.otherInfo.club
	set obj.MainTrainer = couple.otherInfo.mainTrainer
	set obj.OtherTrainers = couple.otherInfo.otherTrainers
	
	set obj.PrtObjKey = obj.Couple.%ClassName(1)_"@"_obj.Couple.%Id()
	
	set st = obj.%Save()
	
	quit obj
]]></Implementation>
</Method>

<Method name="GetFullNameForLang">
<Description>
Имя участника для выбранного языка</Description>
<FormalSpec>lang:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..Couple.Man.LastName.GetValueByLang(lang)_" "_..Couple.Man.FirstName.GetValueByLang(lang)_" - "_..Couple.Woman.LastName.GetValueByLang(lang)_" "_..Couple.Woman.FirstName.GetValueByLang(lang)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ParticipantCoupleWDSFDefaultData</DefaultData>
<Data name="ParticipantCoupleWDSFDefaultData">
<Subscript>"ParticipantCoupleWDSF"</Subscript>
<Value name="1">
<Value>Couple</Value>
</Value>
<Value name="2">
<Value>ManDOB</Value>
</Value>
<Value name="3">
<Value>WomanDOB</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.ParticipantSingleOther">
<Description>
Участник - другой - одиночка</Description>
<Super>Participant</Super>
<TimeCreated>63440,4374.537436</TimeCreated>

<Property name="AthleteKey">
<Description>
Хеш полей для определения уникальности</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Gender">
<Description>
Пол</Description>
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Male,Female"/>
</Property>

<Property name="LastName">
<Description>
Фамилия</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="FirstName">
<Description>
Имя</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="DOB">
<Description>
ДР</Description>
<Type>%Date</Type>
<Required>1</Required>
<Parameter name="FORMAT" value="3"/>
</Property>

<Index name="AthleteKeyIdx">
<Properties>AthleteKey</Properties>
</Index>

<Method name="ConvertToProxyObject">
<Description>
Конвертация в JSON</Description>
<FormalSpec>params:%ZEN.proxyObject</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##super(params)
	set proxy.athlete = ##class(%ZEN.proxyObject).%New()
	set proxy.athlete.key = ..AthleteKey
	set proxy.athlete.gender = ..Gender
	set proxy.athlete.lastName = ..LastName
	set proxy.athlete.firstName = ..FirstName
	set proxy.athlete.dob = $ZD(..DOB, 3)
	
	set proxy.athlete.otherInfo = ##class(%ZEN.proxyObject).%New()
	set proxy.athlete.otherInfo.country = ..Country.ConvertToProxyObject()
	set proxy.athlete.otherInfo.city = ..City
	set proxy.athlete.otherInfo.club = ..Club
	set proxy.athlete.otherInfo.mainTrainer = ..MainTrainer
	set proxy.athlete.otherInfo.otherTrainers = ..OtherTrainers
	
	set proxy.athlete.competitionsCount = "-"
	set proxy.athlete.paymentsCount = "-"
	if $ISOBJECT(proxy.competition.tournament){
		if (params.loadPrtObjCompetitionsCount){
			set proxy.athlete.competitionsCount = ..PrtObjCompetitionsCount
		}
		
		if (params.loadPrtObjPaymentsCount){
			set proxy.athlete.paymentsCount = ..PrtObjPaymentsCount	
		}
	}
	
	quit proxy
]]></Implementation>
</Method>

<Method name="Create">
<Description>
Создание записи</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[recorder:Recorder,competition:Competition,athlete:%ZEN.proxyObject,&st]]></FormalSpec>
<ReturnType>Participant</ReturnType>
<Implementation><![CDATA[
	set obj = ..%New()
	
	// Свойства класса
	set obj.Gender = athlete.gender
	set obj.LastName = athlete.lastName
	set obj.FirstName = athlete.firstName
	set obj.DOB = $ZDH(athlete.dob, 3)
	set obj.AthleteKey = athlete.key
	
	// Свойства базового класса
	set obj.Recorder = recorder
	set obj.Competition = competition 
	set obj.Tournament = competition.Tournament 
	
	set obj.FullName = ##class(Dance.Data.Localization.LText).Create("")
	set st = ..UpdateParticipantFullName(obj)
	quit:$$$ISERR(st) $$$NULLOREF
	
	set obj.Country = ##class(Country).%OpenId(athlete.otherInfo.country.id)	
	set obj.City = athlete.otherInfo.city
	set obj.Club = athlete.otherInfo.club
	set obj.MainTrainer = athlete.otherInfo.mainTrainer
	set obj.OtherTrainers = athlete.otherInfo.otherTrainers
	
	set obj.PrtObjKey = ..%ClassName(1)_"@"_athlete.key
	
	set st = obj.%Save()
	
	quit obj
]]></Implementation>
</Method>

<Method name="GetByFilter">
<Description>
Найти по фильтру</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>filter:%RegisteredObject</FormalSpec>
<ReturnType>ParticipantCoupleOther</ReturnType>
<Implementation><![CDATA[
	set id = ""

	&sql(SELECT ID INTO :id
		 FROM Dance_Data.ParticipantSingleOther 
		 WHERE Competition = :filter.competitionId 
		 	   AND
		 	   %UPPER(LastName) = %UPPER(TRIM(BOTH ' ' FROM :filter.lastName)) 
		 	   AND 
		 	   %UPPER(FirstName) = %UPPER(TRIM(BOTH ' ' FROM :filter.firstName))
		 	   AND
		 	   (
		 	   	 %UPPER(Club) = %UPPER(TRIM(BOTH ' ' FROM :filter.otherInfo.club)) 
		 	   	 OR 
		 	     %UPPER(City) = %UPPER(TRIM(BOTH ' ' FROM :filter.otherInfo.city))
		 	   ))
		 	   
	quit ..%OpenId(id)
]]></Implementation>
</Method>

<Method name="GetFullNameForLang">
<Description>
Имя участника для выбранного языка</Description>
<FormalSpec>lang:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..LastName_" "_..FirstName
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ParticipantSingleOtherDefaultData</DefaultData>
<Data name="ParticipantSingleOtherDefaultData">
<Subscript>"ParticipantSingleOther"</Subscript>
<Value name="1">
<Value>AthleteKey</Value>
</Value>
<Value name="2">
<Value>Gender</Value>
</Value>
<Value name="3">
<Value>LastName</Value>
</Value>
<Value name="4">
<Value>FirstName</Value>
</Value>
<Value name="5">
<Value>DOB</Value>
</Value>
<Value name="6">
<Value>Country</Value>
</Value>
<Value name="7">
<Value>City</Value>
</Value>
<Value name="8">
<Value>Club</Value>
</Value>
<Value name="9">
<Value>MainTrainer</Value>
</Value>
<Value name="10">
<Value>OtherTrainers</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.ParticipantSingleUDSR">
<Description>
Участник - СТСР - одиночка</Description>
<Super>Participant</Super>
<TimeCreated>63440,4273.857207</TimeCreated>

<Property name="Athlete">
<Description>
Спортсмен СТСР</Description>
<Type>PersonUDSR</Type>
<Required>1</Required>
</Property>

<Index name="CmpAtUDSRIdx">
<Properties>Competition,Athlete</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<Description>
Конвертация в JSON</Description>
<FormalSpec>params:%ZEN.proxyObject</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##super(params)
	set proxy.athlete = ..Athlete.ConvertToProxyObject()
	
	set proxy.athlete.competitionsCount = "-"
	set proxy.athlete.paymentsCount = "-"
	if $ISOBJECT(proxy.competition.tournament){
		if (params.loadPrtObjCompetitionsCount){
			set proxy.athlete.competitionsCount = ..PrtObjCompetitionsCount
		}
		
		if (params.loadPrtObjPaymentsCount){
			set proxy.athlete.paymentsCount = ..PrtObjPaymentsCount
		}
	}
	
	quit proxy
]]></Implementation>
</Method>

<Method name="Create">
<Description>
Создание записи</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[recorder:Recorder,competition:Competition,athlete:%ZEN.proxyObject,&st]]></FormalSpec>
<ReturnType>Participant</ReturnType>
<Implementation><![CDATA[
	if ..CmpAtUDSRIdxExists(competition.%Id(), athlete.id) {
		set obj = ..CmpAtUDSRIdxOpen(competition.%Id(), athlete.id)
		set obj.IsActive = 1
		set st = obj.%Save()
		quit obj
	}

	set obj = ..%New()
	
	// Свойства класса
	set obj.Athlete = ##class(PersonUDSR).%OpenId(athlete.id)
	
	// Свойства базового класса	
	set obj.Recorder = recorder
	set obj.Competition = competition 
	set obj.Tournament = competition.Tournament 
	
	set obj.FullName = ##class(Dance.Data.Localization.LText).Create("")
	set st = ..UpdateParticipantFullName(obj)
	quit:$$$ISERR(st) $$$NULLOREF

	set obj.Country = obj.Athlete.Country
	set obj.City = obj.Athlete.City
	set obj.Club = obj.Athlete.Club
	set obj.MainTrainer = obj.Athlete.MainTrainer
	set obj.OtherTrainers = obj.Athlete.OtherTrainers
	
	set obj.PrtObjKey = obj.Athlete.%ClassName(1)_"@"_obj.Athlete.%Id()
	
	set st = obj.%Save()
	
	quit obj
]]></Implementation>
</Method>

<Method name="GetFullNameForLang">
<Description>
Имя участника для выбранного языка</Description>
<FormalSpec>lang:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..Athlete.LastName.GetValueByLang(lang)_" "_..Athlete.FirstName.GetValueByLang(lang)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ParticipantSingleUDSRDefaultData</DefaultData>
<Data name="ParticipantSingleUDSRDefaultData">
<Subscript>"ParticipantSingleUDSR"</Subscript>
<Value name="1">
<Value>Athlete</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.ParticipantSingleWDSF">
<Description>
Участник - одиночка - WDSF </Description>
<Super>Participant</Super>
<TimeCreated>63440,4342.608805</TimeCreated>

<Property name="Athlete">
<Description>
WDSF спортсмен</Description>
<Type>PersonWDSF</Type>
<Required>1</Required>
</Property>

<Property name="DOB">
<Description>
ДР </Description>
<Type>%Date</Type>
<Parameter name="FORMAT" value="3"/>
</Property>

<Index name="CmpAtWDSFIdx">
<Properties>Competition,Athlete</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<Description>
Конвертация в JSON</Description>
<FormalSpec>params:%ZEN.proxyObject</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##super(params)
	set proxy.athlete = ..Athlete.ConvertToProxyObject()
	set proxy.athlete.otherInfo.city = ..City
	set proxy.athlete.otherInfo.club = ..Club
	set proxy.athlete.otherInfo.mainTrainer = ..MainTrainer
	set proxy.athlete.otherInfo.otherTrainers = ..OtherTrainers
	
	set proxy.athlete.competitionsCount = "-"
	set proxy.athlete.paymentsCount = "-"
	if $ISOBJECT(proxy.competition.tournament){
		if (params.loadPrtObjCompetitionsCount){
			set proxy.athlete.competitionsCount = ..PrtObjCompetitionsCount
		}
		
		if (params.loadPrtObjPaymentsCount){
			set proxy.athlete.paymentsCount = ..PrtObjPaymentsCount
		}
	}
	
	quit proxy
]]></Implementation>
</Method>

<Method name="Create">
<Description>
Создание записи</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[recorder:Recorder,competition:Competition,athlete:%ZEN.proxyObject,&st]]></FormalSpec>
<ReturnType>Participant</ReturnType>
<Implementation><![CDATA[
	if ..CmpAtWDSFIdxExists(competition.%Id(), athlete.id) {
		set obj = ..CmpAtWDSFIdxOpen(competition.%Id(), athlete.id)
		set obj.IsActive = 1
		set st = obj.%Save()
		quit obj
	}
	
	set obj = ..%New()
	
	// Свойства класса
	set obj.Athlete = ##class(PersonWDSF).%OpenId(athlete.id)
	if ($LENGTH(athlete.dob = 10)) set obj.DOB = $ZDH(athlete.dob, 3)
	
	// Свойства базового класса
	set obj.Recorder = recorder
	set obj.Competition = competition 
	set obj.Tournament = competition.Tournament 
	
	set obj.FullName = ##class(Dance.Data.Localization.LText).Create("")
	set st = ..UpdateParticipantFullName(obj)
	quit:$$$ISERR(st) $$$NULLOREF

	set obj.Country = obj.Athlete.Country
	set obj.City = athlete.otherInfo.city
	set obj.Club = athlete.otherInfo.club
	set obj.MainTrainer = athlete.otherInfo.mainTrainer
	set obj.OtherTrainers = athlete.otherInfo.otherTrainers
	
	set obj.PrtObjKey = obj.Athlete.%ClassName(1)_"@"_obj.Athlete.%Id()
	
	set st = obj.%Save()
	
	quit obj
]]></Implementation>
</Method>

<Method name="GetFullNameForLang">
<Description>
Имя участника для выбранного языка</Description>
<FormalSpec>lang:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..Athlete.LastName.GetValueByLang(lang)_" "_..Athlete.FirstName.GetValueByLang(lang)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ParticipantSingleWDSFDefaultData</DefaultData>
<Data name="ParticipantSingleWDSFDefaultData">
<Subscript>"ParticipantSingleWDSF"</Subscript>
<Value name="1">
<Value>Athlete</Value>
</Value>
<Value name="2">
<Value>DOB</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.PaymentSystem">
<Description>
Платежная система</Description>
<Super>%Persistent</Super>
<TimeCreated>63970,82411.858763</TimeCreated>

<Property name="Code">
<Description>
Ширф</Description>
<Type>%String</Type>
</Property>

<Property name="Name">
<Description>
Имя платежной система</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="UDSRUrl">
<Description>
Адрес для отправки информации о платежа СТСР пар</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="WDSFUrl">
<Description>
Адрес для отправки информации о платежа WDSF пар и прочих</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Index name="CodeIndex">
<Properties>Code</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<Description>
Convert to proxyObject (for JSON)</Description>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.id = ..%Id()
    set proxy.name = ..Name
    set proxy.code = ..Code
    set proxy.udsrUrl = ..UDSRUrl
    set proxy.wdsfUrl = ..WDSFUrl
    
    quit proxy
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.PaymentSystemD</DataLocation>
<DefaultData>PaymentSystemDefaultData</DefaultData>
<IdLocation>^Dance.Data.PaymentSystemD</IdLocation>
<IndexLocation>^Dance.Data.PaymentSystemI</IndexLocation>
<StreamLocation>^Dance.Data.PaymentSystemS</StreamLocation>
<Data name="PaymentSystemDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Code</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
<Value name="4">
<Value>UDSRUrl</Value>
</Value>
<Value name="5">
<Value>WDSFUrl</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.Person">
<Super>%Persistent</Super>
<TimeCreated>63274,63498.354989</TimeCreated>

<Property name="Number">
<Description>
Athlete number</Description>
<Type>%String</Type>
</Property>

<Property name="Gender">
<Description>
Male or Female</Description>
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Male,Female"/>
</Property>

<Property name="FirstName">
<Description>
First name</Description>
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="LastName">
<Description>
Last name</Description>
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="Country">
<Type>Country</Type>
<Required>1</Required>
</Property>

<Property name="Updated">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="IsActive">
<Type>%Boolean</Type>
<InitialExpression>"1"</InitialExpression>
</Property>

<Method name="ConvertToProxyObject">
<FormalSpec>params:%ZEN.proxyObject=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.id = ..%Id()
    set proxy.number = ..Number
    set proxy.lastName = ..LastName.Value
    set proxy.firstName = ..FirstName.Value
    set proxy.gender = ..Gender 
    set proxy.updated = ..Updated
    set proxy.isActive = ..IsActive
    set proxy.otherInfo = ##class(%ZEN.proxyObject).%New()
    set proxy.otherInfo.country = ..Country.ConvertToProxyObject()
        
    quit proxy
]]></Implementation>
</Method>

<Method name="GetFullName">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ..LastName.Value_" "_..FirstName.Value
]]></Implementation>
</Method>

<Method name="GetConflictCompetitions">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[personId:%String,cmpId:%String,&st]]></FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    set cmpList = ##class(%ListOfObjects).%New()
    
    set cmp = ##class(Competition).%OpenId(cmpId,,.st)
    set cmpTournamentId = cmp.Tournament.%Id()
    
    
    set params = ##class(%ZEN.proxyObject).%New()
    set params.loadTournament = $$$YES
    set params.tournamentParams = ##class(%ZEN.proxyObject).%New()
    set params.tournamentParams.loadLocation = $$$YES
    set params.loadDiscipline = $$$YES
    set params.loadAgeCategory = $$$YES 
    set params.loadType = $$$YES
    set params.loadWDSF = $$$YES
    set params.loadDancerClasses = $$$YES
    
    
    &sql(DECLARE CrsCmpConflict CURSOR FOR
            SELECT ID INTO :cmpConflictId
            FROM Dance_Data.Competition
            WHERE Tournament->TStatus->Code <> 'Canceled' 
               AND Tournament->TStatus->Code <> 'Completed'
               AND Tournament <> :cmpTournamentId 
               AND StartDate = :cmp.StartDate
               AND ID IN (SELECT prtCoupleUDSR.Competition 
                          FROM Dance_Data.ParticipantCoupleUDSR as prtCoupleUDSR 
                          WHERE prtCoupleUDSR.Competition->StartDate = :cmp.StartDate AND (prtCoupleUDSR.Couple->Man = :personId OR prtCoupleUDSR.Couple->Woman = :personId)  AND TicketStatus = 'Piad'
                          UNION
                          SELECT prtCoupleWDSF.Competition 
                          FROM Dance_Data.ParticipantCoupleWDSF as prtCoupleWDSF 
                          WHERE prtCoupleWDSF.Competition->StartDate = :cmp.StartDate AND (prtCoupleWDSF.Couple->Man = :personId OR prtCoupleWDSF.Couple->Woman = :personId)  AND TicketStatus = 'Piad'
                          UNION
                          SELECT prtSingleUDSR.Competition 
                          FROM Dance_Data.ParticipantSingleUDSR as prtSingleUDSR 
                          WHERE prtSingleUDSR.Competition->StartDate = :cmp.StartDate AND prtSingleUDSR.Athlete = :personId  AND TicketStatus = 'Piad'
                          UNION
                          SELECT prtSingleWDSF.Competition 
                          FROM Dance_Data.ParticipantSingleWDSF as prtSingleWDSF 
                          WHERE prtSingleWDSF.Competition->StartDate = :cmp.StartDate AND prtSingleWDSF.Athlete = :personId AND TicketStatus = 'Piad'))
        
    &sql(OPEN CrsCmpConflict)
    for{
        &sql(FETCH CrsCmpConflict INTO :cmpConflictId) 
        quit:(SQLCODE '= 0)
        
        do cmpList.Insert(##class(Competition).%OpenId(cmpConflictId).ConvertToProxyObject(params))
    }
        
    &sql(CLOSE CrsCmpConflict)
    
    quit cmpList
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.PersonD</DataLocation>
<DefaultData>PersonDefaultData</DefaultData>
<IdLocation>^Dance.Data.PersonD</IdLocation>
<IndexLocation>^Dance.Data.PersonI</IndexLocation>
<StreamLocation>^Dance.Data.PersonS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="PersonDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Number</Value>
</Value>
<Value name="3">
<Value>Gender</Value>
</Value>
<Value name="4">
<Value>FirstName</Value>
</Value>
<Value name="5">
<Value>LastName</Value>
</Value>
<Value name="6">
<Value>Country</Value>
</Value>
<Value name="7">
<Value>LastUpdated</Value>
</Value>
<Value name="8">
<Value>Updated</Value>
</Value>
<Value name="9">
<Value>IsActive</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.PersonUDSR">
<Super>Dance.Data.Person</Super>
<TimeCreated>63436,55322.201815</TimeCreated>

<Property name="STClass">
<Type>DancerClass</Type>
</Property>

<Property name="LAClass">
<Type>DancerClass</Type>
</Property>

<Property name="DOB">
<Description>
Date of birth</Description>
<Type>%Date</Type>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="RegionNumber">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="City">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Club">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="MainTrainer">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="OtherTrainers">
<Type>%Text</Type>
<Parameter name="MAXLEN" value="2000"/>
</Property>

<Property name="NumberWDSF">
<Type>%String</Type>
</Property>

<Index name="NumberUDSRIdx">
<Properties>Number</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<FormalSpec>params:%ZEN.proxyObject=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##super(params)
    set proxy.type = "UDSR"
    
    if (..DOB){
        set proxy.dob = $ZD(..DOB, 3)
    }
    
    if $ISOBJECT(..LAClass){
        set proxy.laClass = ..LAClass.ConvertToProxyObject()
    }
    
    if $ISOBJECT(..STClass){
        set proxy.stClass = ..STClass.ConvertToProxyObject()
    }
    
    set proxy.otherInfo.city = ..City
    set proxy.otherInfo.club = ..Club
    set proxy.otherInfo.mainTrainer = ..MainTrainer
    set proxy.otherInfo.otherTrainers = ..OtherTrainers
    set proxy.otherInfo.regionNumber = ..RegionNumber
            
    quit proxy
]]></Implementation>
</Method>

<Method name="UpdateFromString">
<ClassMethod>1</ClassMethod>
<FormalSpec>data:%String,gender:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ##class(%MessageDictionary).SetSessionLanguage("ru")
    set st = $$$OK
    
    try{
        TSTART
            
        set propList = $LISTFROMSTRING(data, ";")
        set person = ..NumberUDSRIdxOpen($LIST(propList, 1))
            
        if ($ISOBJECT(person) = 0){
            set person = ##class(Dance.Data.PersonUDSR).%New()
            set person.Gender = gender
            
            //1 Номер
            set person.Number = $LIST(propList, 1)
                
            //2 Фамилия Имя
            set person.LastName =  ##class(Dance.Data.Localization.LText).Create($P($LIST(propList, 2)," ",1), "Dance.Data.Localization.Translation;PersonLTextValue")      
            set person.FirstName =  ##class(Dance.Data.Localization.LText).Create($P($LIST(propList, 2)," ",2), "Dance.Data.Localization.Translation;PersonLTextValue")     
            
            
            //11 Фио на англ. Пусть и для других языков будет на анлийском
            do person.LastName.SetValueByLang($P($LIST(propList, 11)," ",1), "en")
            do person.FirstName.SetValueByLang($P($LIST(propList, 11)," ",2), "en")
            
            do person.LastName.SetValueByLang($P($LIST(propList, 11)," ",1), "de")
            do person.FirstName.SetValueByLang($P($LIST(propList, 11)," ",2), "de")

            do person.LastName.SetValueByLang($P($LIST(propList, 11)," ",1), "it")
            do person.FirstName.SetValueByLang($P($LIST(propList, 11)," ",2), "it")
        }
            
        //4 Дата рождения
        set dob = $LIST(propList, 4)
        if (dob '= "") && ($LENGTH(dob) = 10) set person.DOB = $ZDATEH($REPLACE(dob,".","/"), 4)
            
        //5 Класс ST
        set person.STClass = ##class(Dance.Data.DancerClass).GetByName($REPLACE($ZCONVERT($LIST(propList, 5), "U"), "М", "M"), .st)
            
        //7 Класс LA
        set person.LAClass = ##class(Dance.Data.DancerClass).GetByName( $REPLACE($ZCONVERT($LIST(propList, 7), "U"), "М", "M"), .st)        
            
        //12 Клуб
        set person.Club = $LIST(propList, 12)
    
        //13 Город/регион
        set person.City = $LIST(propList, 13)
    
        //14 Старший тренер
        set person.MainTrainer = $LIST(propList, 14)

        //15 Тренер 2
        //16 Тренер 3
        if ($LIST(propList, 16) '= ""){
            set person.OtherTrainers = $LIST(propList, 15)_", "_$LIST(propList, 16)
        }
        else{
            set person.OtherTrainers = $LIST(propList, 15)
        }
        
        //17 Номер региона
        if ($LIST(propList, 17) '= ""){
            set person.RegionNumber = $LIST(propList, 17)
        }
        
        //19 Номер партнера
        //w !,"POST 8"
        if (person.Gender = "Male"){
            set partnerNumber = $LIST(propList, 19)
            if (partnerNumber'="") {
                set ^Dance.Data.ManPartnersUDSR(person.Number) = partnerNumber
            }
        }   
        
        //20 Номер WDSF
        if ($LIST(propList, 20) '= ""){
            set person.NumberWDSF = $LIST(propList, 20)
        }
        
        set person.Country = ##class(Dance.Data.Country).WDSFNameIdxOpen("Russian Federation")
            
        set person.Updated = $ZDT($ZTS,3)
 
        $$$THROWONERROR(st, person.%Save())     
        
        TCOMMIT
    }
    catch(ex){
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetByFilter">
<ClassMethod>1</ClassMethod>
<FormalSpec>filter:%RegisteredObject</FormalSpec>
<ReturnType>PersonUDSR</ReturnType>
<Implementation><![CDATA[
    set id = ""

    &sql(SELECT person.ID INTO :id
         FROM Dance_Data.PersonUDSR as person 
            INNER JOIN 
            Dance_Data_Localization.LTextValue as ltvalLN ON ltvalLN.LText = person.LastName 
            INNER JOIN 
            Dance_Data_Localization.LTextValue as ltvalFN ON ltvalFN.LText = person.FirstName
         WHERE %UPPER(ltvalLN.Value) = %UPPER(TRIM(BOTH ' ' FROM :filter.lastName)) 
               AND 
               %UPPER(ltvalFN.Value) = %UPPER(TRIM(BOTH ' ' FROM :filter.firstName)) 
               AND 
               (DATEPART('YEAR', person.DOB) || '-' || DATEPART('MONTH', person.DOB) || '-' || DATEPART('DAY', person.DOB) = :filter.dob
                OR
                DATEDIFF(YEAR, person.DOB, NOW()) = :filter.age
                OR
                %UPPER(person.City) = %UPPER(TRIM(BOTH ' ' FROM :filter.city))
                OR
                %UPPER(person.Club) = %UPPER(TRIM(BOTH ' ' FROM :filter.club))))

    quit ..%OpenId(id)
]]></Implementation>
</Method>

<Method name="GetByFullName">
<ClassMethod>1</ClassMethod>
<FormalSpec>filter:%RegisteredObject</FormalSpec>
<ReturnType>PersonUDSR</ReturnType>
<Implementation><![CDATA[
    set id = ""

    &sql(SELECT person.ID INTO :id
         FROM Dance_Data.PersonUDSR as person 
            INNER JOIN 
            Dance_Data_Localization.LTextValue as ltvalLN ON ltvalLN.LText = person.LastName 
            INNER JOIN 
            Dance_Data_Localization.LTextValue as ltvalFN ON ltvalFN.LText = person.FirstName
         WHERE %UPPER(ltvalLN.Value) = %UPPER(TRIM(BOTH ' ' FROM :filter.lastName)) 
               AND 
               %UPPER(ltvalFN.Value) = %UPPER(TRIM(BOTH ' ' FROM :filter.firstName)))

    quit ..%OpenId(id)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>PersonUDSRDefaultData</DefaultData>
<Data name="PersonUDSRDefaultData">
<Subscript>"PersonUDSR"</Subscript>
<Value name="1">
<Value>STClass</Value>
</Value>
<Value name="2">
<Value>LAClass</Value>
</Value>
<Value name="3">
<Value>DOB</Value>
</Value>
<Value name="4">
<Value>City</Value>
</Value>
<Value name="5">
<Value>Club</Value>
</Value>
<Value name="6">
<Value>MainTrainer</Value>
</Value>
<Value name="7">
<Value>OtherTrainers</Value>
</Value>
<Value name="8">
<Value>RegionNumber</Value>
</Value>
<Value name="9">
<Value>NumberWDSF</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.PersonWDSF">
<Super>Dance.Data.Person</Super>
<TimeCreated>63436,55275.893424</TimeCreated>

<Property name="AgeCategory">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="NumberWDSFIdx">
<Properties>Number</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<FormalSpec>params:%ZEN.proxyObject=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##super(params)
	set proxy.type = "WDSF"
	set proxy.ageCategory = ..AgeCategory		
	quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Create or save modified person</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&st]]></FormalSpec>
<ReturnType>Dance.Data.PersonWDSF</ReturnType>
<Implementation><![CDATA[
	if (..NumberWDSFIdxExists(data.number)){
		set person = ..NumberWDSFIdxOpen(data.number,, .st)
		set person.LastName.Value = data.lastName
		set person.FirstName.Value = data.firstName
	}
	else{
		set person = ..%New()
		set person.Number = data.number
		set person.LastName = ##class(Dance.Data.Localization.LText).Create(data.lastName)
		set person.FirstName = ##class(Dance.Data.Localization.LText).Create(data.firstName)
	}
	
	set person.Gender = data.gender	
	set person.AgeCategory = data.ageCategory
	set person.Country = ##class(Dance.Data.Country).%OpenId(data.otherInfo.country.id)
	set person.Updated = $ZDT($ZTS, 3)
	
	set st = person.%Save()
	quit person
]]></Implementation>
</Method>

<Method name="SaveFromWDSF">
<Description>
Create or save modified person</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&st]]></FormalSpec>
<ReturnType>Dance.Data.Person</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.number = data.id
	set proxy.lastName = data.surname
	set proxy.firstName = data.name
	set proxy.gender = data.sex
	set proxy.ageCategory = data.ageGroup
	set proxy.otherInfo = ##class(%ZEN.proxyObject).%New()
	set proxy.otherInfo.country = ##class(Country).GetByName(data.country).ConvertToProxyObject()
	
	quit ..Save(proxy, .st)
]]></Implementation>
</Method>

<Method name="GetByFilter">
<ClassMethod>1</ClassMethod>
<FormalSpec>filter:%RegisteredObject</FormalSpec>
<ReturnType>PersonWDSF</ReturnType>
<Implementation><![CDATA[
	set id = ""

	&sql(SELECT person.ID INTO :id
		 FROM Dance_Data.PersonWDSF as person 
		 	INNER JOIN 
		 	Dance_Data_Localization.LTextValue as ltvalLN ON ltvalLN.LText = person.LastName 
		 	INNER JOIN 
		 	Dance_Data_Localization.LTextValue as ltvalFN ON ltvalFN.LText = person.FirstName
		 WHERE %UPPER(ltvalLN.Value) = %UPPER(TRIM(BOTH ' ' FROM :filter.lastName)) 
		 	   AND 
		 	   %UPPER(ltvalFN.Value) = %UPPER(TRIM(BOTH ' ' FROM :filter.firstName)))

	quit ..%OpenId(id)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>PersonWDSFDefaultData</DefaultData>
<Data name="PersonWDSFDefaultData">
<Subscript>"PersonWDSF"</Subscript>
<Value name="1">
<Value>AgeCategory</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.Recorder">
<Super>%Persistent</Super>
<TimeCreated>63463,64656.996997</TimeCreated>

<Property name="Login">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="LoginHash">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {LoginHash} = ##class({%%CLASSNAME}).GetLoginHash({Login})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Parameter name="MAXLEN" value="300"/>
</Property>

<Property name="Name">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Password">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="OtherInfo">
<Type>%Text</Type>
<Parameter name="MAXLEN" value="3000"/>
</Property>

<Property name="IsInUse">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Required>1</Required>
</Property>

<Index name="LoginIdx">
<Properties>Login</Properties>
<Unique>1</Unique>
</Index>

<Method name="GetByLoginHash">
<ClassMethod>1</ClassMethod>
<FormalSpec>hash:%String</FormalSpec>
<ReturnType>Recorder</ReturnType>
<Implementation><![CDATA[
	set id = ""
	&sql(SELECT ID INTO :id FROM Dance_Data.Recorder WHERE LoginHash = :hash)
	quit ..%OpenId(id)
]]></Implementation>
</Method>

<Method name="GetLoginHash">
<ClassMethod>1</ClassMethod>
<FormalSpec>login:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $REPLACE($SYSTEM.Encryption.Base64Encode($SYSTEM.Encryption.MD5Hash(login)), "/", "")
]]></Implementation>
</Method>

<Method name="GetSystemRecorder">
<ClassMethod>1</ClassMethod>
<ReturnType>Recorder</ReturnType>
<Implementation><![CDATA[
	set id = ""
	set login = $GET(^Settings("Dance", "SystemRecorderLogin"))
	&sql(SELECT ID INTO :id FROM Dance_Data.Recorder WHERE Login = :login)
	quit ..%OpenId(id)
]]></Implementation>
</Method>

<Method name="GetAccessHashForTournament">
<ClassMethod>1</ClassMethod>
<FormalSpec>trn:Tournament,rec:Recorder</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit $REPLACE($REPLACE($SYSTEM.Encryption.Base64Encode($SYSTEM.Encryption.MD5Hash($ZCVT(rec.Login_trn.AccessCode, "L"))), "/", "SLASH"), "=", "EQL")
]]></Implementation>
</Method>

<Method name="GetByAccessHashForTournament">
<ClassMethod>1</ClassMethod>
<FormalSpec>trn:Tournament,hash:%String</FormalSpec>
<ReturnType>Recorder</ReturnType>
<Implementation><![CDATA[
	#dim recorder As Recorder = "" 
	
	&sql(DECLARE RecCur CURSOR FOR 
		 SELECT ID
		 FROM Dance_Data.Recorder)	
		
	&sql(OPEN RecCur)
	for  
	{	
		&sql(FETCH RecCur INTO :id) 
		quit:(SQLCODE '= 0)
		
		set recorder = ##class(Recorder).%OpenId(id)
		if (hash = ..GetAccessHashForTournament(trn, recorder)){
			quit
		}
		
		set recorder = $$$NULLOREF	
	}
		
	&sql(CLOSE RecCur)
	
	quit recorder
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.RecorderD</DataLocation>
<DefaultData>RecorderDefaultData</DefaultData>
<IdLocation>^Dance.Data.RecorderD</IdLocation>
<IndexLocation>^Dance.Data.RecorderI</IndexLocation>
<StreamLocation>^Dance.Data.RecorderS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="RecorderDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Login</Value>
</Value>
<Value name="3">
<Value>Password</Value>
</Value>
<Value name="4">
<Value>OtherInfo</Value>
</Value>
<Value name="5">
<Value>IsInUse</Value>
</Value>
<Value name="6">
<Value>Name</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.Ticket">
<Description>
Tickets of the participants</Description>
<Super>%Persistent</Super>
<TimeCreated>63318,50950.081309</TimeCreated>

<Property name="Number">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Amount">
<Type>%Float</Type>
<Required>1</Required>
</Property>

<Property name="TStatus">
<Type>TicketStatus</Type>
<Required>1</Required>
</Property>

<Property name="Title">
<Type>%Text</Type>
<Parameter name="MAXLEN" value="3000"/>
</Property>

<Property name="Created">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="Updated">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="Participant">
<Type>Dance.Data.Participant</Type>
<Cardinality>one</Cardinality>
<Inverse>Tickets</Inverse>
<Relationship>1</Relationship>
<Required>1</Required>
</Property>

<Property name="PrtObjKey">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Tournament">
<Type>Tournament</Type>
</Property>

<Index name="PrtObjKeyIdx">
<Properties>PrtObjKey</Properties>
</Index>

<Index name="TStatusIdx">
<Properties>TStatus</Properties>
</Index>

<Index name="TournamentIdx">
<Properties>Tournament</Properties>
</Index>

<Index name="ParticipantIdx">
<Properties>Participant</Properties>
<Unique>1</Unique>
</Index>

<Index name="CommonIdx">
<Properties>PrtObjKey,TStatus,Tournament</Properties>
</Index>

<Method name="GetPrtObjPaymentsCountInTournament">
<Description>
Количестов оплаченных билетов в турнире объекта-участника (КЛАСС@ID)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>prtObjKey:%String,trnId:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set count = 0
	&sql(SELECT COUNT(ID) INTO :count
		 FROM Dance_Data.Ticket 
		 WHERE PrtObjKey = :prtObjKey AND TStatus = 1 AND Tournament = :trnId AND Participant->IsActive = 1)
	
	quit count
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.TicketD</DataLocation>
<DefaultData>TicketDefaultData</DefaultData>
<IdLocation>^Dance.Data.TicketD</IdLocation>
<IndexLocation>^Dance.Data.TicketI</IndexLocation>
<StreamLocation>^Dance.Data.TicketS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="TicketDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Number</Value>
</Value>
<Value name="3">
<Value>Amount</Value>
</Value>
<Value name="4">
<Value>TStatus</Value>
</Value>
<Value name="5">
<Value>Title</Value>
</Value>
<Value name="6">
<Value>Created</Value>
</Value>
<Value name="7">
<Value>Updated</Value>
</Value>
<Value name="8">
<Value>Participant</Value>
</Value>
<Value name="9">
<Value>PrtObjKey</Value>
</Value>
<Value name="10">
<Value>Tournament</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.TicketDanceplat">
<Super>Dance.Data.Ticket</Super>
<TimeCreated>63436,51933.345197</TimeCreated>

<Property name="CodeOne">
<Type>%String</Type>
</Property>

<Property name="CodeTwo">
<Type>%String</Type>
</Property>

<Index name="NumberDPIdx">
<Properties>Number</Properties>
<Unique>1</Unique>
</Index>

<Method name="Save">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&st]]></FormalSpec>
<ReturnType>Ticket</ReturnType>
<Implementation><![CDATA[
    #dim obj As TicketDanceplat
    
    if (..NumberDPIdxExists(data.number)){
        set obj = ..NumberDPIdxOpen(data.number,,.st)   
    }
    else{
        set obj = ..%New()
        set obj.Number = data.number    
        set obj.Participant = ##class(Dance.Data.Participant).%OpenId(data.participant.id)
                
        // If another ticket already exists for this participant 
        if (..ParticipantIdxExists(data.participant.id)){
            set oldTiket = ..ParticipantIdxOpen(data.participant.id)
            
            if (oldTiket.TStatus.Code = "Canceled") && (##class(TicketStatus).%OpenId(data.status.id).Code = "Paid"){
                if ($System.SQL.DATEDIFF("ss", oldTiket.Created, data.paymentCreated) > 0){
                    do ##class(Dance.Utils.Journal).Create("Log", "Save TicketDanceplat", "Remove ticket #"_oldTiket.Number_" for participant "_obj.Participant.FullName_" becouse exists more new ticket #"_data.number)
                    set st = ..%DeleteId(oldTiket.%Id())
                    $$$THROWONERROR(st, st)
                }
                else{
                    do ##class(Dance.Utils.Journal).Create("Log", "Save TicketDanceplat", "DateDiffNotWork #"_oldTiket.Number_" "_oldTiket.Created_" for participant "_obj.Participant.FullName_" becouse exists more new ticket #"_data.number_" "_data.paymentCreated)
                }
            }
        }
    }
    
    set obj.PrtObjKey = ##class(Participant).GetPrtObjKey(obj.Participant.%Id())
    set obj.Amount = data.amount
    set obj.TStatus = ##class(TicketStatus).%OpenId(data.status.id)
    set obj.Title = data.title
    set obj.Created = data.paymentCreated
    set obj.Updated = $ZDT($ZTS, 3)
    
    set obj.CodeOne = data.codeOne
    set obj.CodeTwo = data.codeTwo
    
    set obj.Tournament = obj.Participant.Competition.Tournament
    
    set st = obj.%Save()

    quit obj
]]></Implementation>
</Method>

<Method name="SaveAllFromImportTable">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    do ##class(Dance.Utils.Journal).Create("Log", "Dance.Data.TicketDanceplat.SaveAllFromImportTable()", "Start")
    
    try{
        
        &sql(DECLARE TicketCurs CURSOR FOR 
             SELECT ID
             FROM Dance_Data_Import.TicketDanceplat as tic
             WHERE (SELECT cmp.Tournament->TStatus->Code 
                    FROM Dance_Data.Competition as cmp 
                    WHERE cmp.IdInternal = tic.GroupIdInternal) IN ('Registration','RegistrationClosed'))   
                    
        &sql(OPEN TicketCurs)
        for  
        {   
            &sql(FETCH TicketCurs INTO :id) 
            quit:(SQLCODE '= 0)
            
            set ticketImport = ##class(Dance.Data.Import.TicketDanceplat).%OpenId(id)
            set competition = ##class(Dance.Data.Competition).IdInternalIdxOpen(ticketImport.GroupIdInternal)
            if '$ISOBJECT(competition) continue
            
            set st = ..SaveOneFromImportTable(ticketImport, competition)
            if $$$ISERR(st){
                do ##class(Dance.Utils.Journal).Create("Log", "Dance.Data.TicketDanceplat.SaveAllFromImportTable() Error", $SYSTEM.Status.GetErrorText(st))
            }   
        }
        
        &sql(CLOSE TicketCurs)  
    }
    catch(ex){
        set st = ex.AsStatus()
        do ##class(Dance.Utils.Journal).Create("Error", "Dance.Data.TicketDanceplat.TaskTickets.SaveAllFromImportTable()", $SYSTEM.Status.GetErrorText(st))
    }
    
    do ##class(Dance.Utils.Journal).Create("Log", "Dance.Data.TicketDanceplat.TaskTickets.SaveAllFromImportTable()", "End")
    
    quit st
]]></Implementation>
</Method>

<Method name="SaveOneFromImportTable">
<ClassMethod>1</ClassMethod>
<FormalSpec>ticketImport:Dance.Data.Import.TicketDanceplat,competition:Dance.Data.Competition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    set isTrace = $$$YES
    w:(isTrace) !,!,"Start 'SaveOneFromImportTable' ticketId="_ticketImport.%Id()
    //do ##class(Dance.Utils.Journal).Create("Log", "Dance.Data.TicketDanceplat.SaveOneFromImportTable()", "Start for ticketId="_ticketImport.%Id())
    
    try{
        TSTART
        
        if (ticketImport.MaleLastName = "") && (ticketImport.FemaleLastName = ""){
            $$$THROWONERROR(st, ##class(Dance.Utils.Msg).GetErrorStatus("error_Ticket_EmptyFields"))
        }
        
        #dim participant As Dance.Data.Participant = ""
        
        // Find UDSR By Number
        #dim manUDSR As Dance.Data.PersonUDSR = ..GetPersonUDSRFromImportedTicket(ticketImport, "Male")
        #dim womanUDSR As Dance.Data.PersonUDSR = ..GetPersonUDSRFromImportedTicket(ticketImport, "Female")
        
        if ($ISOBJECT(manUDSR) && $ISOBJECT(womanUDSR)) || 
           ($ISOBJECT(manUDSR) && ticketImport.FemaleLastName = "") ||
           ($ISOBJECT(womanUDSR) && ticketImport.MaleLastName = ""){
            // In the case where an one athlete is in STSR but not another. We assume is other couple.
            
            // UDSR couple or athlete   
            set prtObject = ""
            set prtClassName = "Dance.Data.ParticipantSingleUDSR"
    
            if $ISOBJECT(manUDSR) && $ISOBJECT(womanUDSR){
                w:(isTrace) !,"--Find man and woman UDSR."
                
                // Couple UDSR
                set prtObject = ##class(Dance.Data.CoupleUDSR).GetByNumbers(manUDSR.Number, womanUDSR.Number,.st)   
                set prtClassName = "Dance.Data.ParticipantCoupleUDSR"
                $$$THROWONERROR(st, st)
                
                // Костыль на тот случай, если оплачивали межд. соревнования по данным стср, но оказывается есть межд. версия пары стср, вот её и надо взять. Капец :(
                if $ISOBJECT(competition.WDSF) && ##class(Dance.Data.MatchingCoupleUDSRWDSF).UDSRIdxExists(prtObject.%Id()){
                    set prtObject = ##class(Dance.Data.MatchingCoupleUDSRWDSF).UDSRIdxOpen(prtObject.%Id(),,.st).WDSF   
                    set prtClassName = "Dance.Data.ParticipantCoupleWDSF"
                    $$$THROWONERROR(st, st)
                }
            }
            elseif $ISOBJECT(manUDSR){
                w:(isTrace) !,"--Find man UDSR."
                
                // Athlete UDSR, Male
                set prtObject = manUDSR
            }
            elseif $ISOBJECT(womanUDSR){
                w:(isTrace) !,"--Find woman UDSR."
                
                // Athlete UDSR, Female
                set prtObject = womanUDSR
            }
            
            // Create participant   
            set participant = $CLASSMETHOD(prtClassName, "Create", ##class(Dance.Data.Recorder).GetSystemRecorder(), competition, prtObject.ConvertToProxyObject(), .st)
            $$$THROWONERROR(st, st)
        }
        else {
            // WDSF couple|athlete OR Other couple|athlete
            if (ticketImport.MaleLastName '= "") && (ticketImport.FemaleLastName '= ""){
                // Couple
                // Find WDSF couple
                set coupleWDSF = ..GetCoupleWDSFFromImportedTicket(ticketImport)
                if $ISOBJECT(coupleWDSF){
                    w:(isTrace) !,"---Find couple WDSF."
                    
                    set coupleWDSF = coupleWDSF.ConvertToProxyObject()
                    set coupleWDSF.man.dob = ..GetCorrectDOB(ticketImport.MaleDOBOrAge)
                    set coupleWDSF.woman.dob = ..GetCorrectDOB(ticketImport.FemaleDOBOrAge)
                    set coupleWDSF.otherInfo.city = ticketImport.City
                    set coupleWDSF.otherInfo.club = ticketImport.Club  
                    set participant = ##class(Dance.Data.ParticipantCoupleWDSF).Create(##class(Recorder).GetSystemRecorder(), competition, coupleWDSF, .st)
                    
                    // Find the double
                    set participantOther = ..GetParticipantOtherFromImportedTicket(ticketImport, competition, $$$NO, .st)
                    if $ISOBJECT(participantOther){
                        w:(isTrace) !,"---- Find couple other (double)."
                        set participantOther.IsActive = $$$NO
                        $$$THROWONERROR(st, participantOther.%Save())
                        
                        set participant.Created = participantOther.Created
                        $$$THROWONERROR(st, participant.%Save())
                    }
                    
                }
                else{
                    w:(isTrace) !,"---Find existed prt couple Other."
        
                    set participant = ..GetParticipantOtherFromImportedTicket(ticketImport, competition, $$$NO, .st)
                    
                    if $ISOBJECT(participant) = $$$NO {
                        w:(isTrace) !,"---Create prt couple Other."
                        set participant = ..CreateParticipantOtherByImportedTicket(ticketImport, competition, $$$NO, .st)
                    }                                     
                }
                
                $$$THROWONERROR(st, st)
            }
            else{
                // Athlete (Single, solo)
                // Find WDSF person
                set athleteWDSF = $SELECT(ticketImport.MaleLastName = "" : ..GetPersonWDSFFromImportedTicket(ticketImport, "Female"),
                                                                 $$$YES : ..GetPersonWDSFFromImportedTicket(ticketImport, "Male"))
            
                if $ISOBJECT(athleteWDSF){
                    w:(isTrace) !,"---Find person WDSF."
                    
                    set participantOther = ..GetParticipantOtherFromImportedTicket(ticketImport, competition, $$$NO, .st)
                    if $ISOBJECT(participantOther){
                        w:(isTrace) !,"---- Find single other (double)."
                        set participantOther.IsActive = $$$NO
                        $$$THROWONERROR(st, participantOther.%Save())
                    }
                    
                    set athleteWDSF = athleteWDSF.ConvertToProxyObject()
                    set athleteWDSF.dob = ..GetCorrectDOB($SELECT(ticketImport.MaleLastName = "" : ticketImport.FemaleDOBOrAge, $$$YES : ticketImport.MaleDOBOrAge))
                    set athleteWDSF.otherInfo.city = ticketImport.City
                    set athleteWDSF.otherInfo.club = ticketImport.Club 
                    
                    set participant = ##class(Dance.Data.ParticipantSingleWDSF).Create(##class(Recorder).GetSystemRecorder(), competition, athleteWDSF, .st)
                }
                else{
                    w:(isTrace) !,"---Create prt single Other."
        
                    set participant = ..GetParticipantOtherFromImportedTicket(ticketImport, competition, $$$YES, .st)
                    
                    if $ISOBJECT(participant) = $$$NO {
                        // Create participantSingleOther
                        set participant = ..CreateParticipantOtherByImportedTicket(ticketImport, competition, $$$YES, .st)
                    } 
                }
                
                $$$THROWONERROR(st, st)
            }   
        }
        
        if '$ISOBJECT(participant){
            $$$THROWONERROR(st, ##class(Dance.Utils.Msg).GetErrorStatus("error_Ticket_ImportedParticipantNotCreated"))
        }
        
        // Create ticket
        set ticketData = ##class(%ZEN.proxyObject).%New()
        set ticketData.participant = ##class(%ZEN.proxyObject).%New()
        set ticketData.participant.id = participant.%Id()
        set ticketData.number = ticketImport.IdInternal
        set ticketData.amount = ticketImport.Amount
        set ticketData.paymentCreated = ticketImport.PaymentCreated
        set ticketData.codeOne = ticketImport.CodeOne
        set ticketData.codeTwo = ticketImport.CodeTwo
        set ticketData.title = ticketImport.Description
        set ticketData.status = ##class(TicketStatus).CodeIdxOpen($CASE($ZCVT(ticketImport.TStatus, "L"), "pay" : "Paid", "cancel" : "Canceled", :"Not paid")).ConvertToProxyObject() 

        
        w:(isTrace) !,"Save ticket."
        do ..Save(ticketData, .st)
        
        $$$THROWONERROR(st, st)
        
        TCOMMIT
        
        w:(isTrace) " Success."
    }
    catch(ex){
        TROLLBACK
        set st = ex.AsStatus()
        do:(isTrace) $system.OBJ.DisplayError(st)
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetPersonUDSRFromImportedTicket">
<ClassMethod>1</ClassMethod>
<FormalSpec>ticketImport:Dance.Data.Import.TicketDanceplat,gender:%String</FormalSpec>
<ReturnType>Dance.Data.PersonUDSR</ReturnType>
<Implementation><![CDATA[
    set propertyHead = $CASE(gender, "Male" : "Male", : "Female")
    
    // Find by number
    #dim person As Dance.Data.PersonUDSR = ##class(Dance.Data.PersonUDSR).NumberUDSRIdxOpen($PROPERTY(ticketImport, propertyHead_"Number"))
    quit:$ISOBJECT(person) person
    
    // Find by filter in the table
    set filter = ##class(%ZEN.proxyObject).%New()
    set filter.lastName = $PROPERTY(ticketImport, propertyHead_"LastName")
    set filter.firstName = $PROPERTY(ticketImport, propertyHead_"FirstName")
    set filter.dob = $PROPERTY(ticketImport, propertyHead_"DOBOrAge")
    set filter.age = $PROPERTY(ticketImport, propertyHead_"DOBOrAge")   
    
    quit ##class(Dance.Data.PersonUDSR).GetByFilter(filter)
]]></Implementation>
</Method>

<Method name="GetPersonWDSFFromImportedTicket">
<ClassMethod>1</ClassMethod>
<FormalSpec>ticketImport:Dance.Data.Import.TicketDanceplat,gender:%String</FormalSpec>
<ReturnType>Dance.Data.PersonUDSR</ReturnType>
<Implementation><![CDATA[
    set propertyHead = $CASE(gender, "Male" : "Male", : "Female")
    quit:($ASCII($E($PROPERTY(ticketImport, propertyHead_"LastName"), 1)) > 1000) $$$NULLOREF
        
    // Find by filter in the table
    set filter = ##class(%ZEN.proxyObject).%New()
    set filter.lastName = $PROPERTY(ticketImport, propertyHead_"LastName")
    set filter.firstName = $PROPERTY(ticketImport, propertyHead_"FirstName")

    #dim person As Dance.Data.PersonWDSF = ##class(Dance.Data.PersonWDSF).GetByFilter(filter)
    quit:$ISOBJECT(person) person
    
    
    w !, "Searching in WDSF DB"
    
    // Find in the controller
    set ctrlData = ##class(Dance.Wdsf.ControllerAPI).GetPersonsByFullName(filter.lastName, filter.firstName, .st)
    if $$$ISOK(st) && (ctrlData.persons.Count() '= 0){
        set person = ##class(Dance.Data.PersonWDSF).SaveFromWDSF(ctrlData.persons.GetAt(1), .st)
        $$$THROWONERROR(st, st)
    }
    
    quit person
]]></Implementation>
</Method>

<Method name="GetCoupleWDSFFromImportedTicket">
<ClassMethod>1</ClassMethod>
<FormalSpec>ticketImport:Dance.Data.Import.TicketDanceplat</FormalSpec>
<ReturnType>CoupleWDSF</ReturnType>
<Implementation><![CDATA[
    // WDSF name contains only latin symbols
    quit:($ASCII($E(ticketImport.MaleLastName, 1)) > 1000) $$$NULLOREF
    
    set filter = ##class(%ZEN.proxyObject).%New()
    set filter.man = ##class(%ZEN.proxyObject).%New()
    set filter.man.lastName = ticketImport.MaleLastName
    set filter.man.firstName = ticketImport.MaleFirstName

    set filter.woman = ##class(%ZEN.proxyObject).%New()
    set filter.woman.lastName = ticketImport.FemaleLastName
    set filter.woman.firstName = ticketImport.FemaleFirstName
    
    // Find in DB
    w !, "Searching in PersonWDSF table"
    set couple = ##class(CoupleWDSF).GetByFilter(filter)
    quit:$ISOBJECT(couple) couple
    
    w !, "Searching in WDSF DB"
    // Find in controller DB
    set wdsfData = ##class(Dance.Wdsf.ControllerAPI).GetCoupleByName(ticketImport.MaleLastName_","_ticketImport.MaleFirstName, ticketImport.FemaleLastName_","_ticketImport.FemaleFirstName, .st)
    quit:$$$ISERR(st) $$$NULLOREF
    
    // Проверка на то, что если ничего не вернулось или вернулось, но сказало: Ахтунг! Я не нашел такой пары в WDSF базе!!!!! Ищите где-нибудь в другом месте
    if ($ISOBJECT(wdsfData) = $$$NO) || (wdsfData.code = 2045){
        w !, wdsfData.message
        q $$$NULLOREF
    }
    
    w !, "Searching completed ",wdsfData.man.id,"-", wdsfData.woman.id
    quit ##class(CoupleWDSF).GetByNumbers(wdsfData.man.id, wdsfData.woman.id, .st)
]]></Implementation>
</Method>

<Method name="GetParticipantOtherFromImportedTicket">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[ticketImport:Dance.Data.Import.TicketDanceplat,competition:Competition,isSolo:%Boolean,&st:%Status]]></FormalSpec>
<ReturnType>Participant</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    set data = ##class(%ZEN.proxyObject).%New()
    set data.competitionId = competition.%Id()
    set data.otherInfo = ##class(%ZEN.proxyObject).%New()
    set data.otherInfo.club = ticketImport.Club
    set data.otherInfo.city = ticketImport.City
    set data.otherInfo.mainTrainer = $P(ticketImport.Trainers, ",", 1)
    set data.otherInfo.otherTrainers = $P(ticketImport.Trainers, ",", 2, *)
    
    set prtClass = ""
    if (isSolo){
        if (ticketImport.FemaleLastName = ""){
            set data.lastName = ticketImport.MaleLastName
            set data.firstName = ticketImport.MaleFirstName
            set data.dob = ..GetCorrectDOB(ticketImport.MaleDOBOrAge)
        }
        else{
            set data.lastName = ticketImport.FemaleLastName
            set data.firstName = ticketImport.FemaleFirstName
            set data.dob = ..GetCorrectDOB(ticketImport.FemaleDOBOrAge)
        }
        
        set prtClass = "Dance.Data.ParticipantSingleOther"
    }
    else{
        set data.man = ##class(%ZEN.proxyObject).%New()
        set data.man.lastName = ticketImport.MaleLastName
        set data.man.firstName = ticketImport.MaleFirstName
        set data.man.dob = ..GetCorrectDOB(ticketImport.MaleDOBOrAge)
        
        set data.woman = ##class(%ZEN.proxyObject).%New()
        set data.woman.lastName = ticketImport.FemaleLastName
        set data.woman.firstName = ticketImport.FemaleFirstName
        set data.woman.dob = ..GetCorrectDOB(ticketImport.FemaleDOBOrAge)
        
        set prtClass = "Dance.Data.ParticipantCoupleOther"
    }
    
    // Find existed participant
    set prt = $CLASSMETHOD(prtClass, "GetByFilter", data)
    quit prt
]]></Implementation>
</Method>

<Method name="CreateParticipantOtherByImportedTicket">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[ticketImport:Dance.Data.Import.TicketDanceplat,competition:Competition,isSolo:%Boolean,&st:%Status]]></FormalSpec>
<ReturnType>Participant</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    set data = ##class(%ZEN.proxyObject).%New()
    set data.competitionId = competition.%Id()
    set data.otherInfo = ##class(%ZEN.proxyObject).%New()
    set data.otherInfo.club = ticketImport.Club
    set data.otherInfo.city = ticketImport.City
    set data.otherInfo.mainTrainer = $P(ticketImport.Trainers, ",", 1)
    set data.otherInfo.otherTrainers = $P(ticketImport.Trainers, ",", 2, *)
    
    set prtClass = ""
    if (isSolo){
        if (ticketImport.FemaleLastName = ""){
            set data.lastName = ticketImport.MaleLastName
            set data.firstName = ticketImport.MaleFirstName
            set data.dob = ..GetCorrectDOB(ticketImport.MaleDOBOrAge)
            set data.key = $SYSTEM.Encryption.Base64Encode($ZCVT(ticketImport.MaleLastName_","_ticketImport.MaleFirstName_","_data.man.dob, "O", "UTF8"))
        }
        else{
            set data.lastName = ticketImport.FemaleLastName
            set data.firstName = ticketImport.FemaleFirstName
            set data.dob = ..GetCorrectDOB(ticketImport.FemaleDOBOrAge)
            set data.key = $SYSTEM.Encryption.Base64Encode($ZCVT(ticketImport.FemaleLastName_","_ticketImport.FemaleFirstName_","_data.woman.dob, "O", "UTF8"))
        }
        
        set prtClass = "Dance.Data.ParticipantSingleOther"
    }
    else{
        set data.man = ##class(%ZEN.proxyObject).%New()
        set data.man.lastName = ticketImport.MaleLastName
        set data.man.firstName = ticketImport.MaleFirstName
        set data.man.dob = ..GetCorrectDOB(ticketImport.MaleDOBOrAge)
        
        set data.woman = ##class(%ZEN.proxyObject).%New()
        set data.woman.lastName = ticketImport.FemaleLastName
        set data.woman.firstName = ticketImport.FemaleFirstName
        set data.woman.dob = ..GetCorrectDOB(ticketImport.FemaleDOBOrAge)
        set data.key = $SYSTEM.Encryption.Base64Encode($ZCVT(ticketImport.MaleLastName_","_ticketImport.MaleFirstName_","_data.man.dob_";"_
                                                             ticketImport.FemaleLastName_","_ticketImport.FemaleFirstName_","_data.woman.dob, "O", "UTF8")) 
        
        set prtClass = "Dance.Data.ParticipantCoupleOther"
    }
    
    // Create
    set countryNameWDSF = "--Unknown--"
    &sql(SELECT TOP 1 CountryWDSFName INTO :countryNameWDSF 
         FROM 
         (
            SELECT Country->WDSFName As CountryWDSFName, City
            FROM Dance_Data.PersonUDSR
            UNION
            SELECT Couple->Man->Country->WDSFName As CountryWDSFName, City
            FROM Dance_Data.ParticipantCoupleWDSF
         )
         WHERE %UPPER(City) = %UPPER(TRIM(BOTH ' ' FROM :data.otherInfo.city)))

    set data.otherInfo.country = ##class(Country).GetByName(countryNameWDSF).ConvertToProxyObject()
    set data.key = $REPLACE($REPLACE(data.key, $C(13)_$C(10), ""), "/", "SLASH")
    
    set prt = $CLASSMETHOD(prtClass, "Create", ##class(Recorder).GetSystemRecorder(), competition, data, .st)
    quit prt
]]></Implementation>
</Method>

<Method name="GetCorrectDOB">
<ClassMethod>1</ClassMethod>
<FormalSpec>dob:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    if ($FIND(dob, "-") '= 0){
        // date YYYY-MM-DD
        return dob
    }
    if (+dob > 0) {
        // Now year - Age
        return ($P($ZD($H, 3), "-", 1) - dob)_"-01-01"
    }
    
    // 1840-12-31
    quit $ZD(0, 3)
]]></Implementation>
</Method>

<Method name="Test">
<Description>
do ##class(Dance.Data.TicketDanceplat).Test()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    TSTART
    set ticketImport = ##class(Dance.Data.Import.TicketDanceplat).%OpenId(11553)
    set competition = ##class(Dance.Data.Competition).IdInternalIdxOpen(ticketImport.GroupIdInternal)
    w !,..SaveOneFromImportTable(ticketImport, competition)
    TCOMMIT
]]></Implementation>
</Method>

<Method name="UpdatePrtKey">
<Description>
do ##class(Dance.Data.TicketDanceplat).UpdatePrtKey()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    set st = $$$OK
    try{
        TSTART
        
        &sql(DECLARE TicketUPDDCurs CURSOR FOR 
             SELECT ID
             FROM Dance_Data.Ticket)    
                    
        &sql(OPEN TicketUPDDCurs)
        for  
        {   
            &sql(FETCH TicketUPDDCurs INTO :id) 
            quit:(SQLCODE '= 0)
            
            set ticket = ..%OpenId(id)
            set ticket.PrtObjKey = ##class(Participant).GetPrtObjKey(ticket.Participant.%Id())
            set ticket.Tournament = ticket.Participant.Competition.Tournament
            $$$THROWONERROR(st, ticket.%Save())
        }
        
        &sql(CLOSE TicketUPDDCurs)
        
        TCOMMIT 
    }
    catch(ex){
        TROLLBACK
        
        set st = ex.AsStatus()
        w $SYSTEM.Status.GetErrorText(st)
    }
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>TicketDanceplatDefaultData</DefaultData>
<Data name="TicketDanceplatDefaultData">
<Subscript>"TicketDanceplat"</Subscript>
<Value name="1">
<Value>CodeOne</Value>
</Value>
<Value name="2">
<Value>CodeTwo</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.TicketStatus">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63436,52011.350517</TimeCreated>

<Property name="Name">
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="Code">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="CodeIdx">
<Properties>Code</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.name = ..Name.Value
	set proxy.code = ..Code		
	quit proxy
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.TicketStatusD</DataLocation>
<DefaultData>TicketStatusDefaultData</DefaultData>
<IdLocation>^Dance.Data.TicketStatusD</IdLocation>
<IndexLocation>^Dance.Data.TicketStatusI</IndexLocation>
<StreamLocation>^Dance.Data.TicketStatusS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="TicketStatusDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Code</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.Tournament">
<Description>
Tournaments</Description>
<Super>%Persistent</Super>
<TimeCreated>63274,63417.76954</TimeCreated>

<Property name="AccessCode">
<Description>
Код доступа к турниру</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="IdInternal">
<Description>
Внутренний ИД, связка с данцплатом</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="IdExternal">
<Description>
Внешний ИД, связка с данцплатом</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Hash">
<Description>
Хеш какой-то, связка с данцплатом</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Name">
<Description>
Короткое имя турнира</Description>
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="FullName">
<Description>
Полное имя турнира для страницы регистрации </Description>
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="Country">
<Description>
Страна проведения</Description>
<Type>Country</Type>
<Required>1</Required>
</Property>

<Property name="City">
<Description>
Город проведения</Description>
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="StartDate">
<Description>
Дата начала</Description>
<Type>%Date</Type>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="EndDate">
<Description>
Дата окончания</Description>
<Type>%Date</Type>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="OrganizerInfo">
<Description>
Орагнизатор</Description>
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="OrganizerSite">
<Description>
Не используется</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="TRank">
<Description>
Ранг турнира</Description>
<Type>Dance.Data.TournamentRank</Type>
<Required>1</Required>
</Property>

<Property name="TStatus">
<Description>
Статус турнира</Description>
<Type>Dance.Data.TournamentStatus</Type>
<Required>1</Required>
</Property>

<Property name="CompetitionsCount">
<Description>
Количество групп в турнире</Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {CompetitionsCount} = ##class({%%CLASSNAME}).GetCompetitionsCount({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="ParticipantsCountCalc">
<Description>
Количество участников в турнире</Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {ParticipantsCountCalc} = ##class({%%CLASSNAME}).GetParticipantsCount({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="ParticipantsUniqueCountCalc">
<Description>
Количестов уникальных участников в турнире</Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {ParticipantsUniqueCountCalc} = ##class({%%CLASSNAME}).GetParticipantsUniqueCount({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="ParticipantsCount">
<Description>
Количество участников в турнире</Description>
<Type>%Integer</Type>
</Property>

<Property name="ParticipantsUniqueCount">
<Description>
Количестов уникальных участников в турнире</Description>
<Type>%Integer</Type>
</Property>

<Property name="PaymentsCountCalc">
<Description>
Количество платежей</Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {PaymentsCountCalc} = ##class({%%CLASSNAME}).GetPaymentsCount({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="PaymentsUniqueCountCalc">
<Description>
Количестов платежей от уникальнх участников</Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {PaymentsUniqueCountCalc} = ##class({%%CLASSNAME}).GetPaymentsUniqueCount({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="PaymentsCount">
<Description>
Количество платежей</Description>
<Type>%Integer</Type>
</Property>

<Property name="PaymentsUniqueCount">
<Description>
Количестов платежей от уникальнх участников</Description>
<Type>%Integer</Type>
</Property>

<Property name="Competitions">
<Description>
Группы</Description>
<Type>Dance.Data.Competition</Type>
<Cardinality>many</Cardinality>
<Inverse>Tournament</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="IsActive">
<Description>
Турнир активен? </Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Required>1</Required>
</Property>

<Property name="TabUDSRAllowed">
<Description>
Доступна регистрация СТСР</Description>
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<Property name="TabWDSFAllowed">
<Description>
Доступна регистрация WDSF</Description>
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<Property name="TabOtherAllowed">
<Description>
Доступна регистрация другим участникам</Description>
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<Property name="AnnouncementUrl">
<Description>
Не используется</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="IsContainsSolo">
<Description>
Есть ли соло в турнире?</Description>
<Type>%Boolean</Type>
</Property>

<Property name="IsContainsLimit">
<Description>
Есть ли какие-то ограничения в турнире?</Description>
<Type>%Boolean</Type>
</Property>

<Property name="InfoUrl">
<Description>
Мультияычная ссылка на инфу о турнире</Description>
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="AdditionInfoUrl">
<Description>
Мультияычная ссылка на дополнительную инфу о турнире</Description>
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="Currency">
<Description>
Валюта</Description>
<Type>Currency</Type>
</Property>

<Property name="PaymentSystem">
<Description>
Платежная система в турнире</Description>
<Type>Dance.Data.PaymentSystem</Type>
</Property>

<Index name="IdInternalIdx">
<Properties>IdInternal</Properties>
<Unique>1</Unique>
</Index>

<Index name="IdExternalIdx">
<Properties>IdExternal</Properties>
<Unique>1</Unique>
</Index>

<Index name="IsActiveIdx">
<Properties>IsActive</Properties>
</Index>

<Method name="ConvertToProxyObject">
<FormalSpec>params:%ZEN.proxyObject</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    
    set proxy.id = ..%Id()
    set proxy.idInternal = ..IdInternal
    set proxy.idExternal = ..IdExternal
    set proxy.isContainsSolo = ..IsContainsSolo
    set proxy.isContainsLimit = ..IsContainsLimit
    set proxy.startDate = $ZDATE(..StartDate, 3)
    set proxy.endDate = $ZDATE(..EndDate, 3)
    
    set proxy.currency = ##class(%ZEN.proxyObject).%New()
    if $ISOBJECT(..Currency){
        set proxy.currency.id = ..Currency.%Id()
    }
        
    if (##class(Dance.Data.Tournament).CheckUpdatePrivilege() = $$$OK){
        set proxy.hash = ..Hash
        set proxy.prtsUrl = ##class(Dance.Web.ReportTournamentParticipants).GetReportLink(..%Id())
        set proxy.payersUrl = ##class(Dance.Web.ReportTournamentPayers).GetReportLink(..%Id())
    }
    
    if (params.loadName){   
        set proxy.name = ..Name.Value
    }
    
    if (params.loadFullName){
        set proxy.fullName = ..FullName.Value
    }
    
    if (params.loadStatus){
        set proxy.status = ..TStatus.ConvertToProxyObject()
    }
    
    if (params.loadRank){
        set proxy.rank = ..TRank.ConvertToProxyObject()
    }
    
    if (params.loadCompetitionsCount){
        set proxy.competitionsCount = ..CompetitionsCount
    }
    
    //if (params.loadParticipantsCount){
        set proxy.participantsCount = ..ParticipantsCount
    //}

    //if (params.loadParticipantsUniqueCount){
        set proxy.participantsUniqueCount = ..ParticipantsUniqueCount
    //}
    
    //if (params.loadPaymentsCount){
        set proxy.paymentsCount = ..PaymentsCount
        set proxy.paymentsUniqueCount = ..PaymentsUniqueCount
    //}
    
    set proxy.location = ##class(%ZEN.proxyObject).%New()
    if (params.loadLocation){       
        set proxy.location.country = ..Country.ConvertToProxyObject()
        set proxy.location.cityName = ..City.Value
    }
    
    //if (params.loadUrls){       
        set proxy.infoUrl = ..InfoUrl.Value
        set proxy.addInfoUrl = ..AdditionInfoUrl.Value
    //}
    
    //set proxy.annUrl = ..AnnouncementUrl
    
    set proxy.organizer = ##class(%ZEN.proxyObject).%New()
    //set proxy.organizer.site = ..OrganizerSite
    
    if (params.loadOrganizer){  
        set proxy.organizer.info = ..OrganizerInfo.Value
    }
    
    set proxy.tabUDSRAllowed = ..TabUDSRAllowed
    set proxy.tabWDSFAllowed = ..TabWDSFAllowed
    set proxy.tabOtherAllowed = ..TabOtherAllowed
    
    if ($ISOBJECT(..PaymentSystem)){
        set proxy.paymentSystem = ..PaymentSystem.ConvertToProxyObject()
    }
    
    quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Create or Update object</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&st]]></FormalSpec>
<ReturnType>Tournament</ReturnType>
<Implementation><![CDATA[
    do ##class(Dance.Utils.Journal).Create("Log", "Data.Tournament.Save",
    "ID="_data.id_";"_
    "IdInternal="_data.idInternal_";"_
    "IdExternal="_data.idExternal_";"_
    "Hash="_data.hash_";"_
    "Name="_data.name_";"_
    "TStatusId="_data.status.id_";"_
    "TRankId="_data.rank.id_";"_
    "CountryId="_data.location.country.id_";"_
    "City="_data.location.cityName_";"_
    "StartDate="_data.startDate_";"_
    "endDate="_data.startDate)
    
    set trn = ""
    if (data.id = ""){
        set trn = ..%New()
        set trn.AccessCode = $SYSTEM.Util.CreateGUID()
        set trn.Name = ##class(Dance.Data.Localization.LText).Create(data.name)
        set trn.FullName = ##class(Dance.Data.Localization.LText).Create(data.fullName)
        set trn.City = ##class(Dance.Data.Localization.LText).Create(data.location.cityName)
        set trn.OrganizerInfo = ##class(Dance.Data.Localization.LText).Create(data.organizer.info)
        set trn.InfoUrl = ##class(Dance.Data.Localization.LText).Create(data.infoUrl)
        set trn.AdditionInfoUrl = ##class(Dance.Data.Localization.LText).Create(data.addInfoUrl)
    }
    else{
        set trn = ..%OpenId(data.id)
        set trn.Name.Value = data.name
        set trn.FullName.Value = data.fullName
        set trn.City.Value = data.location.cityName
        set trn.OrganizerInfo.Value = data.organizer.info
        set trn.InfoUrl.Value = data.infoUrl
        set trn.AdditionInfoUrl.Value = data.addInfoUrl
    }
        
    set trn.IdInternal = data.idInternal
    set trn.IdExternal = data.idExternal
    set trn.Hash = data.hash
    
    //set trn.AnnouncementUrl = data.annUrl     
    //set trn.OrganizerSite = data.organizer.site
    
    set trn.Country = ##class(Dance.Data.Country).%OpenId(data.location.country.id)
    set trn.Currency = ##class(Dance.Data.Currency).%OpenId(data.currency.id)
    set trn.TStatus = ##class(Dance.Data.TournamentStatus).%OpenId(data.status.id)
    set trn.TRank = ##class(Dance.Data.TournamentRank).%OpenId(data.rank.id)
        
    set trn.StartDate = $ZDATEH(data.startDate, 15)
    set trn.EndDate = $ZDATEH(data.endDate, 15)
    
    set trn.TabUDSRAllowed = data.tabUDSRAllowed = $$$YES
    set trn.TabWDSFAllowed = data.tabWDSFAllowed = $$$YES
    set trn.TabOtherAllowed = data.tabOtherAllowed = $$$YES
    
    set trn.PaymentSystem = ##class(Dance.Data.PaymentSystem).%OpenId(data.paymentSystem.id)
                
    set st = trn.%Save()
            
    quit trn
]]></Implementation>
</Method>

<Method name="Deactivate">
<Description>
Change IsActive property to 0</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ##class(Dance.Utils.Journal).Create("Log", "Data.Tournament.Deactivate", "ID="_id_";")
    
    set trn = ..%OpenId(id)
    set trn.IsActive = 0
    set trn.IdInternal = trn.IdInternal_";"_id
    set trn.IdExternal = trn.IdExternal_";"_id
    set trn.Hash = trn.Hash_";"_id
    
    for i=1:1:trn.Competitions.Count(){
        set st = ##class(Dance.Data.Competition).Deactivate(trn.Competitions.GetAt(i).%Id())
        if $$$ISERR(st) return st
    }
    
    quit trn.%Save()
]]></Implementation>
</Method>

<Method name="CheckDeletePrivilege">
<Description>
Check delete privilege</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    SET SQLCODE=""
    &sql(%CHECKPRIV DELETE ON Dance_Data.Tournament)
    if (SQLCODE = 100) || ($UserName = "UnknownUser") quit ##class(Dance.Utils.Msg).GetErrorStatus("error_NoPrivilegeForDelete", " USERNAME="_$USERNAME)
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="CheckUpdatePrivilege">
<Description>
Check update privilege</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    SET SQLCODE=""
    &sql(%CHECKPRIV UPDATE ON Dance_Data.Tournament)
    if (SQLCODE = 100) || ($UserName = "UnknownUser") quit ##class(Dance.Utils.Msg).GetErrorStatus("error_NoPrivilegeForUpdate", " USERNAME="_$USERNAME)
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetCompetitionsCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
    set count = 0
    &sql(SELECT COUNT(ID) INTO :count 
         FROM Dance_Data.Competition 
         WHERE Tournament = :tournamentId AND IsActive = 1)
         
    quit count
]]></Implementation>
</Method>

<Method name="GetParticipantsCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
    set count = 0
    
    &sql(SELECT %NOLOCK COUNT(totalP.ID) As TotalCount INTO :count
            FROM Dance_Data.Participant as totalP 
            WHERE totalP.Tournament = :tournamentId AND totalP.Competition->IsActive = 1 AND totalP.IsActive = 1)
    
    quit count
]]></Implementation>
</Method>

<Method name="GetParticipantsUniqueCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
    set count = 0
    
    &sql(SELECT COUNT(DISTINCT totalP.FullName->Value) As TotalCount INTO :count
         FROM Dance_Data.Participant as totalP 
         WHERE totalP.Tournament = :tournamentId AND totalP.Competition->IsActive = 1 AND totalP.IsActive = 1)
    
    quit count
]]></Implementation>
</Method>

<Method name="GetPaymentsCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
    set count = 0
    
    &sql(SELECT %NOLOCK COUNT (ID) INTO :count
         FROM Dance_Data.Ticket
         WHERE Tournament = :tournamentId AND TStatus = 1 AND Participant->IsActive = 1 AND Participant->Competition->IsActive = 1)
    
    quit count
]]></Implementation>
</Method>

<Method name="GetPaymentsUniqueCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
    set count = 0
    
    &sql(SELECT %NOLOCK COUNT (ID) INTO :count
         FROM (
            SELECT %NOLOCK ID
            FROM Dance_Data.Ticket
            WHERE Tournament = :tournamentId AND TStatus = 1 AND Participant->IsActive = 1 AND Participant->Competition->IsActive = 1
            GROUP BY Participant->FullName->Value))
    
    quit count
]]></Implementation>
</Method>

<Method name="UpdateIsContainsSolo">
<Description>
Обновить свойство: Содержит ли турнир соло группу?</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    &sql(UPDATE %NOLOCK Dance_Data.Tournament
         SET IsContainsSolo = (SELECT %NOLOCK 
                               CASE COUNT(ID) WHEN 0 THEN 0 ELSE 1 END 
                               FROM Dance_Data.Competition 
                               WHERE Tournament = :tournamentId AND Type = 2 AND IsActive = 1)
         WHERE ID = :tournamentId)

    quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdateIsContainsLimit">
<Description>
Обновить свойство: Содержит ли турнир ограничения?</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    &sql(UPDATE %NOLOCK Dance_Data.Tournament
         SET IsContainsLimit = (SELECT %NOLOCK 
                               CASE COUNT(ID) WHEN 0 THEN 0 ELSE 1 END 
                               FROM Dance_Data.Competition 
                               WHERE Tournament = :tournamentId AND Limit > 0 AND IsActive = 1)
         WHERE ID = :tournamentId)

    quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdateParticipantsCount">
<Description>
Обновить свойство: количество слушателей</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set count = ..GetParticipantsCount(tournamentId)
    &sql(UPDATE %NOLOCK Dance_Data.Tournament
         SET ParticipantsCount = :count
         WHERE ID = :tournamentId)

    quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdateParticipantsUniqueCount">
<Description>
Обновить свойство: количество уникальных слушателей</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set count = ..GetParticipantsUniqueCount(tournamentId)
    &sql(UPDATE %NOLOCK Dance_Data.Tournament
         SET ParticipantsUniqueCount = :count
         WHERE ID = :tournamentId)

    quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdatePaymentsCount">
<Description>
Обновить свойство: количество платежей</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set count = ..GetPaymentsCount(tournamentId)
    &sql(UPDATE %NOLOCK Dance_Data.Tournament
         SET PaymentsCount = :count
         WHERE ID = :tournamentId)

    quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdatePaymentsUniqueCount">
<Description>
Обновить свойство: количество уникальных платежей</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set count = ..GetPaymentsUniqueCount(tournamentId)
    &sql(UPDATE %NOLOCK Dance_Data.Tournament
         SET PaymentsUniqueCount = :count
         WHERE ID = :tournamentId)

    quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdateAllTournaments">
<Description>
Обновить свойства всех турниров w ##class(Dance.Data.Tournament).UpdateAllTournaments()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    &sql(DECLARE TrnCurs CURSOR FOR
         SELECT %NOLOCK ID
         FROM Dance_Data.Tournament
         WHERE IsActive = 1 AND (TStatus->Code='Registration' OR TStatus->Code='RegistrationClosed'))
    
    &sql(OPEN TrnCurs)
    for{
        &sql(FETCH TrnCurs INTO :id) 
        quit:(SQLCODE '= 0)
        
        do ..UpdateTournament(id)
    }
    
    &sql(CLOSE TrnCurs)

    quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdateTournament">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
    
    try{       
        TSTART
        
        do ..UpdateIsContainsLimit(trnId)
        do ..UpdateIsContainsSolo(trnId)
        do ..UpdateParticipantsCount(trnId)
        do ..UpdateParticipantsUniqueCount(trnId)
        do ..UpdatePaymentsCount(trnId)
        do ..UpdatePaymentsUniqueCount(trnId)
        $$$THROWONERROR(status, ##class(Competition).UpdateAllByTournament(trnId))
        $$$THROWONERROR(status, ##class(Participant).UpdateAllByTournament(trnId))
    
        do ##class(Dance.Data.MatchingCoupleUDSRWDSF).FixLocalization()
        
        TCOMMIT
    }
    catch(ex){
        TROLLBACK
        
        set status = ex.AsStatus()
        do ##class(Dance.Utils.Journal).Create("Log", "Tournmant.UpdateTournament()", "id="_trnId_" error=",$SYSTEM.Status.GetErrorText(status))
        w status
    }
    
    quit status
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.TournamentD</DataLocation>
<DefaultData>TournamentDefaultData</DefaultData>
<IdLocation>^Dance.Data.TournamentD</IdLocation>
<IndexLocation>^Dance.Data.TournamentI</IndexLocation>
<StreamLocation>^Dance.Data.TournamentS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="TournamentDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Title</Value>
</Value>
<Value name="3">
<Value>StartDate</Value>
</Value>
<Value name="4">
<Value>EndDate</Value>
</Value>
<Value name="5">
<Value>OrganizerSite</Value>
</Value>
<Value name="6">
<Value>TClass</Value>
</Value>
<Value name="7">
<Value>Name</Value>
</Value>
<Value name="8">
<Value>TRank</Value>
</Value>
<Value name="9">
<Value>TStatus</Value>
</Value>
<Value name="10">
<Value>OrganizerInfo</Value>
</Value>
<Value name="11">
<Value>Country</Value>
</Value>
<Value name="12">
<Value>City</Value>
</Value>
<Value name="13">
<Value>TournirId</Value>
</Value>
<Value name="14">
<Value>TournirIdExt</Value>
</Value>
<Value name="15">
<Value>IdInternal</Value>
</Value>
<Value name="16">
<Value>Hash</Value>
</Value>
<Value name="17">
<Value>IdExternal</Value>
</Value>
<Value name="18">
<Value>IsRemoved</Value>
</Value>
<Value name="19">
<Value>IsActive</Value>
</Value>
<Value name="20">
<Value>FullName</Value>
</Value>
<Value name="21">
<Value>TabUDSRAllowed</Value>
</Value>
<Value name="22">
<Value>TabWDSFAllowed</Value>
</Value>
<Value name="23">
<Value>TabOtherAllowed</Value>
</Value>
<Value name="24">
<Value>AccessCode</Value>
</Value>
<Value name="25">
<Value>AnnouncementUrl</Value>
</Value>
<Value name="26">
<Value>InfoUrl</Value>
</Value>
<Value name="27">
<Value>AdditionInfoUrl</Value>
</Value>
<Value name="28">
<Value>ParticipantsCount</Value>
</Value>
<Value name="29">
<Value>ParticipantsUniqueCount</Value>
</Value>
<Value name="30">
<Value>PaymentsCount</Value>
</Value>
<Value name="31">
<Value>PaymentsUniqueCount</Value>
</Value>
<Value name="32">
<Value>IsContainsSolo</Value>
</Value>
<Value name="33">
<Value>IsContainsLimit</Value>
</Value>
<Value name="34">
<Value>Currency</Value>
</Value>
<Value name="35">
<Value>PaymentSystem</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.TournamentRank">
<Description>
Rank of the tournament: international, local ...</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63303,58579.105456</TimeCreated>

<Property name="Name">
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="ShortName">
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="Code">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Index name="CodeIdx">
<Properties>Code</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.code = ..Code
	set proxy.name = ..Name.Value
	set proxy.shortName = ..ShortName.Value
	quit proxy
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.TournamentRankD</DataLocation>
<DefaultData>TournamentRankDefaultData</DefaultData>
<IdLocation>^Dance.Data.TournamentRankD</IdLocation>
<IndexLocation>^Dance.Data.TournamentRankI</IndexLocation>
<StreamLocation>^Dance.Data.TournamentRankS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="TournamentRankDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Code</Value>
</Value>
<Value name="4">
<Value>ShortName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Data.TournamentStatus">
<Description>
Status of the tournament: registration, canceled ...</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeCreated>63293,8556.829586</TimeCreated>

<Property name="Name">
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
<Parameter name="XMLREFERENCE" value="ID"/>
</Property>

<Property name="Code">
<Description>
Valid values are:PreRegistration, Registering, RegistrationClosed, Processing, Closed, Canceled</Description>
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Sequence">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Index name="CodeIdx">
<Properties>Code</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.code = ..Code
	set proxy.name = ..Name.Value
	quit proxy
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.TournamentStatusD</DataLocation>
<DefaultData>TournamentStatusDefaultData</DefaultData>
<IdLocation>^Dance.Data.TournamentStatusD</IdLocation>
<IndexLocation>^Dance.Data.TournamentStatusI</IndexLocation>
<StreamLocation>^Dance.Data.TournamentStatusS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="TournamentStatusDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Code</Value>
</Value>
<Value name="4">
<Value>Sequence</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Utils.Email">
<TimeCreated>63349,1233.455637</TimeCreated>

<Method name="Send">
<ClassMethod>1</ClassMethod>
<FormalSpec>email:%String,subject:%String,msg:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try
	{
		set mail=##class(%Net.MailMessage).%New()
    	set mail.From = $GET(^Settings("Dance","EmailFrom")) //..#FROM
    	set mail.Subject = subject
    	set mail.Charset = "utf-8"
    	set mail.IsHTML = 1
    	set mail.ContentType = "text/html"
    	do mail.TextData.Write(msg)
    	
    	if ($CLASSNAME(email) = "%Library.ListOfDataTypes"){
    		for i=1:1:email.Count(){
	    		do mail.To.Insert(email.GetAt(i))
    		}
    	}
    	else{
	    	do mail.To.Insert(email)
    	}
    	
    	set auth=##class(%Net.Authenticator).%New()
  		set auth.MechanismList = "LOGIN"
  		set auth.UserName = $GET(^Settings("Dance","EmailSMTPUSER"))
  		set auth.Password = $GET(^Settings("Dance","EmailSMTPPASSWORD"))
  	
  		set smtp = ##class(%Net.SMTP).%New()
    	set smtp.smtpserver = $GET(^Settings("Dance","EmailSMTPSERVER"))
    	set smtp.port = $GET(^Settings("Dance","EmailSMTPPORT"))
  		set smtp.authenticator = auth
  		set smtp.SSLConfiguration = $GET(^Settings("Dance","EmailSSL"))
  		
    	$$$THROWONERROR(status, smtp.Send(mail))
	}
	catch (ex){
		set status = ex.AsStatus()
  	}
  	
	quit status
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Utils.Init.AgeCategory">
<Super>BaseInit</Super>
<TimeCreated>63290,2843.723685</TimeCreated>

<Parameter name="PClassName">
<Default>AgeCategory</Default>
</Parameter>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    w !,"=== "_..#PClassName_" ==="
    do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data.Localization.LText", "LTextXData")
    do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data.Localization.LTextValue", "LTextValueXData")
    do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data."_..#PClassName, "ClassXData")
    quit $$$OK
]]></Implementation>
</Method>

<XData name="ClassXData">
<Data><![CDATA[
<ClassXData>
<AgeCategory><Name>7108024F-7A08-4FC5-9F76-18220887A7C8</Name><Code>Взрослые</Code><MinAge>19</MinAge><MaxAge>99</MaxAge></AgeCategory>
<AgeCategory><Name>C4515A91-C0ED-4F68-809A-9F1443AF3544</Name><Code>Молодежь</Code><MinAge>16</MinAge><MaxAge>18</MaxAge></AgeCategory>
<AgeCategory><Name>C61DD6D3-C807-4FCF-AD63-5311E5C0BF43</Name><Code>Д-1</Code><MinAge>0</MinAge><MaxAge>9</MaxAge></AgeCategory>
<AgeCategory><Name>BF7A236F-F28E-42D3-A07F-6D931E48A9B9</Name><Code>Д-2</Code><MinAge>10</MinAge><MaxAge>11</MaxAge></AgeCategory>
<AgeCategory><Name>8665AFB4-90A3-4E87-BEF6-970D483CB82A</Name><Code>Ю-1</Code><MinAge>12</MinAge><MaxAge>13</MaxAge></AgeCategory>
<AgeCategory><Name>9E0168F9-6003-4EC7-AEB9-1CE52D688A35</Name><Code>Ю-2</Code><MinAge>14</MinAge><MaxAge>15</MaxAge></AgeCategory>
<AgeCategory><Name>2FC2E1E9-8A68-40A1-B943-E940125F6182</Name><Code>С-1</Code><MinAge>35</MinAge><MaxAge>99</MaxAge></AgeCategory>
<AgeCategory><Name>4AEB5D76-2F80-438F-A396-E16CE297BB1E</Name><Code>С-2</Code><MinAge>45</MinAge><MaxAge>99</MaxAge></AgeCategory>
<AgeCategory><Name>2FC2E1E9-8A68-40A1-B943-E9401SENIOR3</Name><Code>С-3</Code><MinAge>55</MinAge><MaxAge>65</MaxAge></AgeCategory>
<AgeCategory><Name>4AEB5D76-2F80-438F-A396-E16CESENIOR4</Name><Code>С-4</Code><MinAge>65</MinAge><MaxAge>99</MaxAge></AgeCategory>
<AgeCategory><Name>FB43C02D-9611-458E-BB8F-C9D6F563F308</Name><Code>Взрослые+Молодежь</Code><MinAge>16</MinAge><MaxAge>99</MaxAge></AgeCategory>
<AgeCategory><Name>A5976D0D-5049-4259-A85D-CFABAC535A61</Name><Code>Ю-2+Ю-1</Code><MinAge>12</MinAge><MaxAge>15</MaxAge></AgeCategory>
<AgeCategory><Name>C3E499CF-300B-4D19-B5CF-2B497D8D2899</Name><Code>Д-2+Д-1</Code><MinAge>0</MinAge><MaxAge>11</MaxAge></AgeCategory>
<AgeCategory><Name>F65CDBD0-3C7B-42B8-B9A7-585453E71075</Name><Code>Сеньоры 2+1</Code><MinAge>35</MinAge><MaxAge>99</MaxAge></AgeCategory>
<AgeCategory><Name>516F4FAC-F1CE-43A2-A97B-B40BBE203EEE</Name><Code>Н-6</Code><MinAge>0</MinAge><MaxAge>10</MaxAge></AgeCategory>
<AgeCategory><Name>C66DB327-9BB0-4E6C-BDF5-C0CD67DDBA62</Name><Code>Н-5</Code><MinAge>0</MinAge><MaxAge>10</MaxAge></AgeCategory>
<AgeCategory><Name>A5763E6E-6A29-4AF2-9D11-859008C62F21</Name><Code>Н-4</Code><MinAge>0</MinAge><MaxAge>10</MaxAge></AgeCategory>
<AgeCategory><Name>DE134BC9-A46D-40D3-BCDC-0D4236EFD95F</Name><Code>Н-3</Code><MinAge>0</MinAge><MaxAge>10</MaxAge></AgeCategory>

<AgeCategory><Name>97CB1BCC-F46C-466F-AFA7-EAEDD151B5A2</Name><Code>Н-2</Code><MinAge>0</MinAge><MaxAge>10</MaxAge></AgeCategory>
<AgeCategory><Name>74B08EC4-8F76-4AA7-BD27-234B25006831</Name><Code>Молодежь до 21</Code><MinAge>16</MinAge><MaxAge>20</MaxAge></AgeCategory>
<AgeCategory><Name>EADFE474-71FE-43B1-9F39-2304E2DFB45D</Name><Code>WDSF Open</Code><MinAge>16</MinAge><MaxAge>100</MaxAge></AgeCategory>
<AgeCategory><Name>8E10AE1D-579E-40ED-8525-76A6E51C9592</Name><Code>Молодежь-2</Code><MinAge>19</MinAge><MaxAge>20</MaxAge></AgeCategory>
<AgeCategory><Name>9D098846-6FA2-4CEA-9ABD-A2CCF30DFA13</Name><Code>Н5+Н6</Code><MinAge>0</MinAge><MaxAge>10</MaxAge></AgeCategory>
</ClassXData>
]]></Data>
</XData>

<XData name="LTextXData">
<Data><![CDATA[
<LTextXData>
<LText><Guid>7108024F-7A08-4FC5-9F76-18220887A7C8</Guid></LText>
<LText><Guid>C4515A91-C0ED-4F68-809A-9F1443AF3544</Guid></LText>
<LText><Guid>C61DD6D3-C807-4FCF-AD63-5311E5C0BF43</Guid></LText>
<LText><Guid>BF7A236F-F28E-42D3-A07F-6D931E48A9B9</Guid></LText>
<LText><Guid>8665AFB4-90A3-4E87-BEF6-970D483CB82A</Guid></LText>
<LText><Guid>9E0168F9-6003-4EC7-AEB9-1CE52D688A35</Guid></LText>
<LText><Guid>2FC2E1E9-8A68-40A1-B943-E940125F6182</Guid></LText>
<LText><Guid>4AEB5D76-2F80-438F-A396-E16CE297BB1E</Guid></LText>
<LText><Guid>2FC2E1E9-8A68-40A1-B943-E9401SENIOR3</Guid></LText>
<LText><Guid>4AEB5D76-2F80-438F-A396-E16CESENIOR4</Guid></LText>
<LText><Guid>FB43C02D-9611-458E-BB8F-C9D6F563F308</Guid></LText>
<LText><Guid>A5976D0D-5049-4259-A85D-CFABAC535A61</Guid></LText>
<LText><Guid>C3E499CF-300B-4D19-B5CF-2B497D8D2899</Guid></LText>
<LText><Guid>F65CDBD0-3C7B-42B8-B9A7-585453E71075</Guid></LText>
<LText><Guid>516F4FAC-F1CE-43A2-A97B-B40BBE203EEE</Guid></LText>
<LText><Guid>C66DB327-9BB0-4E6C-BDF5-C0CD67DDBA62</Guid></LText>
<LText><Guid>A5763E6E-6A29-4AF2-9D11-859008C62F21</Guid></LText>
<LText><Guid>DE134BC9-A46D-40D3-BCDC-0D4236EFD95F</Guid></LText>

<LText><Guid>97CB1BCC-F46C-466F-AFA7-EAEDD151B5A2</Guid></LText>
<LText><Guid>74B08EC4-8F76-4AA7-BD27-234B25006831</Guid></LText>
<LText><Guid>EADFE474-71FE-43B1-9F39-2304E2DFB45D</Guid></LText>
<LText><Guid>8E10AE1D-579E-40ED-8525-76A6E51C9592</Guid></LText>
<LText><Guid>9D098846-6FA2-4CEA-9ABD-A2CCF30DFA13</Guid></LText>
</LTextXData>
]]></Data>
</XData>

<XData name="LTextValueXData">
<Data><![CDATA[
<LTextValueXData>
<LTextValue><LText>7108024F-7A08-4FC5-9F76-18220887A7C8</LText><Value>Взрослые</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>7108024F-7A08-4FC5-9F76-18220887A7C8</LText><Value>Adults</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>7108024F-7A08-4FC5-9F76-18220887A7C8</LText><Value>Adults</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>C4515A91-C0ED-4F68-809A-9F1443AF3544</LText><Value>Молодежь</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>C4515A91-C0ED-4F68-809A-9F1443AF3544</LText><Value>Youth</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>C4515A91-C0ED-4F68-809A-9F1443AF3544</LText><Value>Youth</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>C61DD6D3-C807-4FCF-AD63-5311E5C0BF43</LText><Value>Дети-1</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>C61DD6D3-C807-4FCF-AD63-5311E5C0BF43</LText><Value>Juvenile-1</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>C61DD6D3-C807-4FCF-AD63-5311E5C0BF43</LText><Value>Juvenile-1</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>BF7A236F-F28E-42D3-A07F-6D931E48A9B9</LText><Value>Дети-2</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>BF7A236F-F28E-42D3-A07F-6D931E48A9B9</LText><Value>Juvenile-2</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>BF7A236F-F28E-42D3-A07F-6D931E48A9B9</LText><Value>Juvenile-2</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>8665AFB4-90A3-4E87-BEF6-970D483CB82A</LText><Value>Юниоры-1</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>8665AFB4-90A3-4E87-BEF6-970D483CB82A</LText><Value>Junior-1</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>8665AFB4-90A3-4E87-BEF6-970D483CB82A</LText><Value>Junior-1</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>9E0168F9-6003-4EC7-AEB9-1CE52D688A35</LText><Value>Юниоры-2</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>9E0168F9-6003-4EC7-AEB9-1CE52D688A35</LText><Value>Junior-2</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>9E0168F9-6003-4EC7-AEB9-1CE52D688A35</LText><Value>Junior-2</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>2FC2E1E9-8A68-40A1-B943-E940125F6182</LText><Value>Сеньоры-1</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>2FC2E1E9-8A68-40A1-B943-E940125F6182</LText><Value>Senior-1</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>2FC2E1E9-8A68-40A1-B943-E940125F6182</LText><Value>Senior-1</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>4AEB5D76-2F80-438F-A396-E16CE297BB1E</LText><Value>Сеньоры-2</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>4AEB5D76-2F80-438F-A396-E16CE297BB1E</LText><Value>Senior-2</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>4AEB5D76-2F80-438F-A396-E16CE297BB1E</LText><Value>Senior-2</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>2FC2E1E9-8A68-40A1-B943-E9401SENIOR3</LText><Value>Сеньоры-3</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>2FC2E1E9-8A68-40A1-B943-E9401SENIOR3</LText><Value>Senior-3</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>2FC2E1E9-8A68-40A1-B943-E9401SENIOR3</LText><Value>Senior-3</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>4AEB5D76-2F80-438F-A396-E16CESENIOR4</LText><Value>Сеньоры-4</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>4AEB5D76-2F80-438F-A396-E16CESENIOR4</LText><Value>Senior-4</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>4AEB5D76-2F80-438F-A396-E16CESENIOR4</LText><Value>Senior-4</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>FB43C02D-9611-458E-BB8F-C9D6F563F308</LText><Value>Взрослые + Молодежь</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>FB43C02D-9611-458E-BB8F-C9D6F563F308</LText><Value>Adults + Youth</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>FB43C02D-9611-458E-BB8F-C9D6F563F308</LText><Value>Adults + Youth</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>A5976D0D-5049-4259-A85D-CFABAC535A61</LText><Value>Юниоры-2 + Юниоры-1</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>A5976D0D-5049-4259-A85D-CFABAC535A61</LText><Value>Junior-2 + Junior-1</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>A5976D0D-5049-4259-A85D-CFABAC535A61</LText><Value>Junior-2 + Junior-1</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>C3E499CF-300B-4D19-B5CF-2B497D8D2899</LText><Value>Дети-2 + Дети-1</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>C3E499CF-300B-4D19-B5CF-2B497D8D2899</LText><Value>Juvenile-2 + Juvenile-1</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>C3E499CF-300B-4D19-B5CF-2B497D8D2899</LText><Value>Juvenile-2 + Juvenile-1</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>F65CDBD0-3C7B-42B8-B9A7-585453E71075</LText><Value>Сеньоры-2 + Сеньоры-1</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>F65CDBD0-3C7B-42B8-B9A7-585453E71075</LText><Value>Senior-2 + Senior-1</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>F65CDBD0-3C7B-42B8-B9A7-585453E71075</LText><Value>Senior-2 + Senior-1</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>516F4FAC-F1CE-43A2-A97B-B40BBE203EEE</LText><Value>Начинающие-6</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>516F4FAC-F1CE-43A2-A97B-B40BBE203EEE</LText><Value>Beginners-6</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>516F4FAC-F1CE-43A2-A97B-B40BBE203EEE</LText><Value>Beginners-6</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>C66DB327-9BB0-4E6C-BDF5-C0CD67DDBA62</LText><Value>Начинающие-5</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>C66DB327-9BB0-4E6C-BDF5-C0CD67DDBA62</LText><Value>Beginners-5</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>C66DB327-9BB0-4E6C-BDF5-C0CD67DDBA62</LText><Value>Beginners-5</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>A5763E6E-6A29-4AF2-9D11-859008C62F21</LText><Value>Начинающие-4</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>A5763E6E-6A29-4AF2-9D11-859008C62F21</LText><Value>Beginners-4</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>A5763E6E-6A29-4AF2-9D11-859008C62F21</LText><Value>Beginners-4</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>DE134BC9-A46D-40D3-BCDC-0D4236EFD95F</LText><Value>Начинающие-3</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>DE134BC9-A46D-40D3-BCDC-0D4236EFD95F</LText><Value>Beginners-3</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>DE134BC9-A46D-40D3-BCDC-0D4236EFD95F</LText><Value>Beginners-3</Value><Lang>de</Lang></LTextValue>






<LTextValue><LText>97CB1BCC-F46C-466F-AFA7-EAEDD151B5A2</LText><Value>Начинающие-2</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>97CB1BCC-F46C-466F-AFA7-EAEDD151B5A2</LText><Value>Beginners-2</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>97CB1BCC-F46C-466F-AFA7-EAEDD151B5A2</LText><Value>Beginners-2</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>74B08EC4-8F76-4AA7-BD27-234B25006831</LText><Value>Молодежь до 21</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>74B08EC4-8F76-4AA7-BD27-234B25006831</LText><Value>Youth under 21</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>74B08EC4-8F76-4AA7-BD27-234B25006831</LText><Value>Youth under 21</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>EADFE474-71FE-43B1-9F39-2304E2DFB45D</LText><Value>WDSF Open</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>EADFE474-71FE-43B1-9F39-2304E2DFB45D</LText><Value>WDSF Open</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>EADFE474-71FE-43B1-9F39-2304E2DFB45D</LText><Value>WDSF Open</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>8E10AE1D-579E-40ED-8525-76A6E51C9592</LText><Value>Молодежь-2</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>8E10AE1D-579E-40ED-8525-76A6E51C9592</LText><Value>Youth-2</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>8E10AE1D-579E-40ED-8525-76A6E51C9592</LText><Value>Youth-2</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>9D098846-6FA2-4CEA-9ABD-A2CCF30DFA13</LText><Value>Начинающие 5+6</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>9D098846-6FA2-4CEA-9ABD-A2CCF30DFA13</LText><Value>Beginners 5+6</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>9D098846-6FA2-4CEA-9ABD-A2CCF30DFA13</LText><Value>Beginners 5+6</Value><Lang>de</Lang></LTextValue>

</LTextValueXData>
]]></Data>
</XData>

<Method name="CopyValueFromEngToAnother">
<Description>
w ##class(Dance.Utils.Init.AgeCategory).CopyValueFromEngToAnother("it")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>newLang:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
    
        &sql(DECLARE CCur CURSOR FOR
             SELECT %NOLOCK ID
             FROM Dance_Data.AgeCategory)
        
        &sql(OPEN CCur)
        for{
            &sql(FETCH CCur INTO :id) 
            quit:(SQLCODE '= 0)
            
            set obj = ##class(Dance.Data.AgeCategory).%OpenId(id)
            $$$THROWONERROR(st, obj.Name.SetValueByLang(obj.Name.GetValueByLang("en"), newLang))
        }
        
        &sql(CLOSE CCur)
    
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Utils.Init.AgeCategoryWDSF">
<Super>Dance.Utils.Init.BaseInit</Super>
<TimeCreated>63326,801.864996</TimeCreated>

<Parameter name="PClassName">
<Default>AgeCategoryWDSF</Default>
</Parameter>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w !,"=== "_..#PClassName_" ==="
	do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data.Localization.LText", "LTextXData")
	do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data.Localization.LTextValue", "LTextValueXData")
	do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data."_..#PClassName, "ClassXData")
	quit $$$OK
]]></Implementation>
</Method>

<XData name="ClassXData">
<Data><![CDATA[
<ClassXData>
<AgeCategoryWDSF><Name>AC78655F-E34A-42B4-9463-FE4C065101EB</Name><Code>JUVENILE</Code><MinDOB>2003-01-01</MinDOB><MaxDOB>2013-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>3980BFFE-B754-4828-B81E-474D2B4F4CD6</Name><Code>JUVENILE I</Code><MinDOB>2005-01-01</MinDOB><MaxDOB>2013-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>5A5F1553-9D0C-4B98-B33C-75260058FE46</Name><Code>JUVENILE II</Code><MinDOB>2003-01-01</MinDOB><MaxDOB>2004-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>6CF99660-FEDD-4E5F-9147-3EA535710D5D</Name><Code>JUNIOR</Code><MinDOB>1999-01-01</MinDOB><MaxDOB>2002-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>9A2DE0BE-2840-4B84-B371-C761DEA24BE7</Name><Code>JUNIOR I</Code><MinDOB>2001-01-01</MinDOB><MaxDOB>2002-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>929406BE-9D92-4CDF-8E0F-11077A3BB383</Name><Code>JUNIOR II</Code><MinDOB>1999-01-01</MinDOB><MaxDOB>2000-12-31</MaxDOB></AgeCategoryWDSF>

<AgeCategoryWDSF><Name>42728ED7-6931-4C43-84DC-AE119C47C1C4</Name><Code>UNDER 21</Code><MinDOB>1994-01-01</MinDOB><MaxDOB>1998-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>F3921B49-ACDC-479A-94BF-01D26D8C78CA</Name><Code>YOUTH</Code><MinDOB>1996-01-01</MinDOB><MaxDOB>1998-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>3EA0145C-3BD6-4357-BC07-FC18393908B0</Name><Code>RISING STAR</Code><MinDOB>1980-01-01</MinDOB><MaxDOB>1995-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>01546FB5-2647-4254-AD9F-21A69EA7C560</Name><Code>ADULT</Code><MinDOB>1985-01-01</MinDOB><MaxDOB>1995-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>8F4C52B3-0364-47F9-A422-84796B7F9134</Name><Code>SENIOR I A</Code><MinDOB>1980-01-01</MinDOB><MaxDOB>1984-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>39DB07A3-20C8-4A02-B147-9CDC91589785</Name><Code>SENIOR</Code><MinDOB>1914-01-01</MinDOB><MaxDOB>1979-12-31</MaxDOB></AgeCategoryWDSF>

<AgeCategoryWDSF><Name>A9659206-E635-4100-A22A-53BDD073AB69</Name><Code>SENIOR I</Code><MinDOB>1970-01-01</MinDOB><MaxDOB>1979-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>5F75A63D-BED8-43C4-B71B-686F4BA9AEFE</Name><Code>SENIOR I B</Code><MinDOB>1975-01-01</MinDOB><MaxDOB>1979-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>B93BE8FF-A46A-4FD4-8FCC-B5D1F8471A73</Name><Code>OVER 35</Code><MinDOB>1914-01-01</MinDOB><MaxDOB>1978-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>E877ECDC-6BA5-4B1D-ADDD-DB0A2E3DE043</Name><Code>SENIOR II A</Code><MinDOB>1970-01-01</MinDOB><MaxDOB>1974-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>8CAB0A6E-D449-4256-91C7-299700668247</Name><Code>SENIOR II</Code><MinDOB>1960-01-01</MinDOB><MaxDOB>1969-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>12733E58-5D1B-4BD9-B5D7-3A48B18CD79E</Name><Code>SENIOR II B</Code><MinDOB>1965-01-01</MinDOB><MaxDOB>1969-12-31</MaxDOB></AgeCategoryWDSF>

<AgeCategoryWDSF><Name>BEABA77F-25FE-40B1-AF38-99A21742796B</Name><Code>SENIOR III A</Code><MinDOB>1960-01-01</MinDOB><MaxDOB>1964-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>B9FEFCE8-C1C8-4D03-87C4-064528ADFAB3</Name><Code>SENIOR III</Code><MinDOB>1949-01-01</MinDOB><MaxDOB>1959-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>2FA9ACF8-6856-4F5D-9B31-25B783A58D9A</Name><Code>SENIOR III B</Code><MinDOB>1955-01-01</MinDOB><MaxDOB>1959-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>98ECAAB7-5D5B-4D8D-8DF0-406314A40718</Name><Code>SENIOR IV A</Code><MinDOB>1950-01-01</MinDOB><MaxDOB>1954-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>A9F4401A-0FEF-49CB-A5E2-EC890FF94498</Name><Code>SENIOR IV B</Code><MinDOB>1914-01-01</MinDOB><MaxDOB>1949-12-31</MaxDOB></AgeCategoryWDSF>
<AgeCategoryWDSF><Name>9291570C-BEDF-4609-9558-20374729852B</Name><Code>SENIOR IV</Code><MinDOB>1914-01-01</MinDOB><MaxDOB>1949-12-31</MaxDOB></AgeCategoryWDSF>

</ClassXData>
]]></Data>
</XData>

<XData name="LTextXData">
<Data><![CDATA[
<LTextXData>
<LText><Guid>AC78655F-E34A-42B4-9463-FE4C065101EB</Guid></LText>
<LText><Guid>3980BFFE-B754-4828-B81E-474D2B4F4CD6</Guid></LText>
<LText><Guid>5A5F1553-9D0C-4B98-B33C-75260058FE46</Guid></LText>
<LText><Guid>6CF99660-FEDD-4E5F-9147-3EA535710D5D</Guid></LText>
<LText><Guid>9A2DE0BE-2840-4B84-B371-C761DEA24BE7</Guid></LText>
<LText><Guid>929406BE-9D92-4CDF-8E0F-11077A3BB383</Guid></LText>

<LText><Guid>42728ED7-6931-4C43-84DC-AE119C47C1C4</Guid></LText>
<LText><Guid>F3921B49-ACDC-479A-94BF-01D26D8C78CA</Guid></LText>
<LText><Guid>3EA0145C-3BD6-4357-BC07-FC18393908B0</Guid></LText>
<LText><Guid>01546FB5-2647-4254-AD9F-21A69EA7C560</Guid></LText>
<LText><Guid>8F4C52B3-0364-47F9-A422-84796B7F9134</Guid></LText>
<LText><Guid>39DB07A3-20C8-4A02-B147-9CDC91589785</Guid></LText>

<LText><Guid>A9659206-E635-4100-A22A-53BDD073AB69</Guid></LText>
<LText><Guid>5F75A63D-BED8-43C4-B71B-686F4BA9AEFE</Guid></LText>
<LText><Guid>B93BE8FF-A46A-4FD4-8FCC-B5D1F8471A73</Guid></LText>
<LText><Guid>E877ECDC-6BA5-4B1D-ADDD-DB0A2E3DE043</Guid></LText>
<LText><Guid>8CAB0A6E-D449-4256-91C7-299700668247</Guid></LText>
<LText><Guid>12733E58-5D1B-4BD9-B5D7-3A48B18CD79E</Guid></LText>

<LText><Guid>BEABA77F-25FE-40B1-AF38-99A21742796B</Guid></LText>
<LText><Guid>B9FEFCE8-C1C8-4D03-87C4-064528ADFAB3</Guid></LText>
<LText><Guid>2FA9ACF8-6856-4F5D-9B31-25B783A58D9A</Guid></LText>
<LText><Guid>98ECAAB7-5D5B-4D8D-8DF0-406314A40718</Guid></LText>
<LText><Guid>A9F4401A-0FEF-49CB-A5E2-EC890FF94498</Guid></LText>
<LText><Guid>9291570C-BEDF-4609-9558-20374729852B</Guid></LText>
</LTextXData>
]]></Data>
</XData>

<XData name="LTextValueXData">
<Data><![CDATA[
<LTextValueXData>
<LTextValue><LText>AC78655F-E34A-42B4-9463-FE4C065101EB</LText><Value>JUVENILE</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>AC78655F-E34A-42B4-9463-FE4C065101EB</LText><Value>JUVENILE</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>3980BFFE-B754-4828-B81E-474D2B4F4CD6</LText><Value>JUVENILE I</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>3980BFFE-B754-4828-B81E-474D2B4F4CD6</LText><Value>JUVENILE I</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>5A5F1553-9D0C-4B98-B33C-75260058FE46</LText><Value>JUVENILE II</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>5A5F1553-9D0C-4B98-B33C-75260058FE46</LText><Value>JUVENILE II</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>6CF99660-FEDD-4E5F-9147-3EA535710D5D</LText><Value>JUNIOR</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>6CF99660-FEDD-4E5F-9147-3EA535710D5D</LText><Value>JUNIOR</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>9A2DE0BE-2840-4B84-B371-C761DEA24BE7</LText><Value>JUNIOR I</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>9A2DE0BE-2840-4B84-B371-C761DEA24BE7</LText><Value>JUNIOR I</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>929406BE-9D92-4CDF-8E0F-11077A3BB383</LText><Value>JUNIOR II</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>929406BE-9D92-4CDF-8E0F-11077A3BB383</LText><Value>JUNIOR II</Value><Lang>en</Lang></LTextValue>


<LTextValue><LText>42728ED7-6931-4C43-84DC-AE119C47C1C4</LText><Value>UNDER 21</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>42728ED7-6931-4C43-84DC-AE119C47C1C4</LText><Value>UNDER 21</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>F3921B49-ACDC-479A-94BF-01D26D8C78CA</LText><Value>YOUTH</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>F3921B49-ACDC-479A-94BF-01D26D8C78CA</LText><Value>YOUTH</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>3EA0145C-3BD6-4357-BC07-FC18393908B0</LText><Value>RISING STAR</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>3EA0145C-3BD6-4357-BC07-FC18393908B0</LText><Value>RISING STAR</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>01546FB5-2647-4254-AD9F-21A69EA7C560</LText><Value>ADULT</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>01546FB5-2647-4254-AD9F-21A69EA7C560</LText><Value>ADULT</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>8F4C52B3-0364-47F9-A422-84796B7F9134</LText><Value>SENIOR I A</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>8F4C52B3-0364-47F9-A422-84796B7F9134</LText><Value>SENIOR I A</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>39DB07A3-20C8-4A02-B147-9CDC91589785</LText><Value>SENIOR</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>39DB07A3-20C8-4A02-B147-9CDC91589785</LText><Value>SENIOR</Value><Lang>en</Lang></LTextValue>


<LTextValue><LText>A9659206-E635-4100-A22A-53BDD073AB69</LText><Value>SENIOR I</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>A9659206-E635-4100-A22A-53BDD073AB69</LText><Value>SENIOR I</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>5F75A63D-BED8-43C4-B71B-686F4BA9AEFE</LText><Value>SENIOR I B</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>5F75A63D-BED8-43C4-B71B-686F4BA9AEFE</LText><Value>SENIOR I B</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>B93BE8FF-A46A-4FD4-8FCC-B5D1F8471A73</LText><Value>OVER 35</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>B93BE8FF-A46A-4FD4-8FCC-B5D1F8471A73</LText><Value>OVER 35</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>E877ECDC-6BA5-4B1D-ADDD-DB0A2E3DE043</LText><Value>SENIOR II A</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>E877ECDC-6BA5-4B1D-ADDD-DB0A2E3DE043</LText><Value>SENIOR II A</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>8CAB0A6E-D449-4256-91C7-299700668247</LText><Value>SENIOR II</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>8CAB0A6E-D449-4256-91C7-299700668247</LText><Value>SENIOR II</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>12733E58-5D1B-4BD9-B5D7-3A48B18CD79E</LText><Value>SENIOR II B</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>12733E58-5D1B-4BD9-B5D7-3A48B18CD79E</LText><Value>SENIOR II B</Value><Lang>en</Lang></LTextValue>



<LTextValue><LText>BEABA77F-25FE-40B1-AF38-99A21742796B</LText><Value>SENIOR III A</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>BEABA77F-25FE-40B1-AF38-99A21742796B</LText><Value>SENIOR III A</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>B9FEFCE8-C1C8-4D03-87C4-064528ADFAB3</LText><Value>SENIOR III</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>B9FEFCE8-C1C8-4D03-87C4-064528ADFAB3</LText><Value>SENIOR III</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>2FA9ACF8-6856-4F5D-9B31-25B783A58D9A</LText><Value>SENIOR III B</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>2FA9ACF8-6856-4F5D-9B31-25B783A58D9A</LText><Value>SENIOR III B</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>98ECAAB7-5D5B-4D8D-8DF0-406314A40718</LText><Value>SENIOR IV A</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>98ECAAB7-5D5B-4D8D-8DF0-406314A40718</LText><Value>SENIOR IV A</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>A9F4401A-0FEF-49CB-A5E2-EC890FF94498</LText><Value>SENIOR IV B</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>A9F4401A-0FEF-49CB-A5E2-EC890FF94498</LText><Value>SENIOR IV B</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>9291570C-BEDF-4609-9558-20374729852B</LText><Value>SENIOR IV</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>9291570C-BEDF-4609-9558-20374729852B</LText><Value>SENIOR IV</Value><Lang>en</Lang></LTextValue>

</LTextValueXData>
]]></Data>
</XData>
</Class>


<Class name="Dance.Utils.Init.BaseInit">
<TimeCreated>63273,7350.15543</TimeCreated>

<Method name="Init">
<Description>
do ##class(Dance.Utils.Init.BaseInit).Init()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ..KillThemAll()

	do ##class(Dance.Utils.Init.LTextLanguage).Import()
	
	do ##class(Dance.Utils.Init.DancerClass).Import()
	do ##class(Dance.Utils.Init.Country).Import()
	do ##class(Dance.Utils.Init.CompetitionType).Import()
	do ##class(Dance.Utils.Init.TournamentStatus).Import()
	do ##class(Dance.Utils.Init.TournamentRank).Import()
	do ##class(Dance.Utils.Init.Discipline).Import()
	do ##class(Dance.Utils.Init.AgeCategory).Import()
	do ##class(Dance.Utils.Init.TicketStatus).Import()
	do ##class(Dance.Data.AgeCategoryWDSF).Import()
	
	//set ^Settings("Dance", "LastSyncWDSFCompetitions") = "2014-01-01"
	//w ##class(Dance.Utils.TaskSyncWDSFController).SyncCompetitions()
	
 	//do ..Settings()
 	//w ##class(Dance.Utils.Init.Person).ImportFromFile("e:\boys.csv", "M")
 	//w ##class(Dance.Utils.Init.Person).ImportFromFile("e:\girls.csv", "F")
 	//w ##class(Dance.Utils.Init.Person).CreateCouples()
]]></Implementation>
</Method>

<Method name="KillThemAll">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do $CLASSMETHOD("Dance.Utils.Journal", "%KillExtent")
	
	do $CLASSMETHOD("Dance.Data.Import.TournamentDanceplat", "%KillExtent")
	do $CLASSMETHOD("Dance.Data.Import.CompetitionDanceplat", "%KillExtent")
	do $CLASSMETHOD("Dance.Data.Import.TicketDanceplat", "%KillExtent")
	
	do $CLASSMETHOD("Dance.Data.AgeCategory", "%KillExtent")
	do $CLASSMETHOD("Dance.Data.AgeCategoryWDSF", "%KillExtent")
	do $CLASSMETHOD("Dance.Data.Competition", "%KillExtent")
	do $CLASSMETHOD("Dance.Data.CompetitionType", "%KillExtent")
	do $CLASSMETHOD("Dance.Data.CompetitionWDSF", "%KillExtent")
	
	
	do $CLASSMETHOD("Dance.Data.Country", "%KillExtent")
	do $CLASSMETHOD("Dance.Data.Couple", "%KillExtent")
	do $CLASSMETHOD("Dance.Data.Ticket", "%KillExtent")
	do $CLASSMETHOD("Dance.Data.TicketStatus", "%KillExtent")
	do $CLASSMETHOD("Dance.Data.DancerClass", "%KillExtent")
	do $CLASSMETHOD("Dance.Data.Discipline", "%KillExtent")
	do $CLASSMETHOD("Dance.Data.Participant", "%KillExtent")
	do $CLASSMETHOD("Dance.Data.Person", "%KillExtent")
	
	do $CLASSMETHOD("Dance.Data.Tournament", "%KillExtent")
	do $CLASSMETHOD("Dance.Data.TournamentRank", "%KillExtent")
	do $CLASSMETHOD("Dance.Data.TournamentStatus", "%KillExtent")
	
	do $CLASSMETHOD("Dance.Data.Localization.LTextValue", "%KillExtent")
	do $CLASSMETHOD("Dance.Data.Localization.LTextLanguage", "%KillExtent")
	do $CLASSMETHOD("Dance.Data.Localization.LText", "%KillExtent")
]]></Implementation>
</Method>

<Method name="ImportXData">
<ClassMethod>1</ClassMethod>
<FormalSpec>locationXData:%String,className:%String,xDataName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	try{
		$$$THROWONERROR(sc,sc)

		#dim stream As %Stream.Object = ##class(%Dictionary.CompiledXData).%OpenId(locationXData_"||"_xDataName).Data
		#dim reader As %XML.Reader = ##class(%XML.Reader).%New()

		set sc = reader.OpenStream(stream, "literal")
		$$$THROWONERROR(sc,sc)

		do reader.Correlate($piece(className, ".", *), className)
		//do reader.Correlate("item", className)


		set itemsCount = 0

		while reader.Next(.obj, .sc)
		{
			$$$THROWONERROR(sc,sc)
			
			set sc = obj.%Save()
			
			$$$THROWONERROR(sc,sc)
			
			set obj = ""
			set itemsCount = itemsCount + 1
		}
		
		write !,itemsCount_" objects of class "_className_" were imported."
	}
	catch(ex){
		w !,ex.AsStatus()
	}
]]></Implementation>
</Method>

<Method name="Settings">
<Description>
do ##class(Dance.Utils.Init.BaseInit).Settings()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ^Settings("Dance","EmailFrom") = "dance.reg.system@mail.ru"
	set ^Settings("Dance","EmailSMTPPASSWORD") = "dance2014-06"
	set ^Settings("Dance","EmailSMTPPORT") = 25
	set ^Settings("Dance","EmailSMTPSERVER") = "smtp.mail.ru"
	set ^Settings("Dance","EmailSMTPUSER") = "dance.reg.system@mail.ru"
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Utils.Init.CompetitionRank">
<Super>Dance.Utils.Init.BaseInit</Super>
<TimeCreated>63302,35939.161877</TimeCreated>

<Parameter name="PClassName">
<Default>CompetitionRank</Default>
</Parameter>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w !,"=== "_..#PClassName_" ==="
	do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data.Localization.LText", "LTextXData")
	do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data.Localization.LTextValue", "LTextValueXData")
	do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data."_..#PClassName, "ClassXData")
	quit $$$OK
]]></Implementation>
</Method>

<XData name="ClassXData">
<Data><![CDATA[
<ClassXData>
<CompetitionRank><Name>43489903-6ADC-433D-ADCD-C97AE981A297</Name><Code>РС</Code></CompetitionRank>
<CompetitionRank><Name>FC862F5E-5274-4DD2-8D3A-EEB677902963</Name><Code>МС</Code></CompetitionRank>
</ClassXData>
]]></Data>
</XData>

<XData name="LTextXData">
<Data><![CDATA[
<LTextXData>
<LText><Guid>0384C95C-341F-4E7C-80DF-21B76DF50A37</Guid></LText>
<LText><Guid>43489903-6ADC-433D-ADCD-C97AE981A297</Guid></LText>
<LText><Guid>FC862F5E-5274-4DD2-8D3A-EEB677902963</Guid></LText>
</LTextXData>
]]></Data>
</XData>

<XData name="LTextValueXData">
<Data><![CDATA[
<LTextValueXData>
<LTextValue><LText>43489903-6ADC-433D-ADCD-C97AE981A297</LText><Value>Российский</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>43489903-6ADC-433D-ADCD-C97AE981A297</LText><Value>Russian</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>FC862F5E-5274-4DD2-8D3A-EEB677902963</LText><Value>Международный</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>FC862F5E-5274-4DD2-8D3A-EEB677902963</LText><Value>International</Value><Lang>en</Lang></LTextValue>
</LTextValueXData>
]]></Data>
</XData>
</Class>


<Class name="Dance.Utils.Init.CompetitionType">
<Super>Dance.Utils.Init.BaseInit</Super>
<TimeCreated>63303,73180.035127</TimeCreated>

<Parameter name="PClassName">
<Default>CompetitionType</Default>
</Parameter>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    w !,"=== "_..#PClassName_" ==="
    do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data.Localization.LText", "LTextXData")
    do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data.Localization.LTextValue", "LTextValueXData")
    do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data."_..#PClassName, "ClassXData")
    quit $$$OK
]]></Implementation>
</Method>

<XData name="ClassXData">
<Data><![CDATA[
<ClassXData>
<CompetitionType><Name>5EB81A33-5310-470D-AE3A-3DABFCF02F3AR</Name><Code>Couples</Code></CompetitionType>
<CompetitionType><Name>4E490C1D-8402-4148-A876-85078EEF3ADBR</Name><Code>Solo</Code></CompetitionType>
</ClassXData>
]]></Data>
</XData>

<XData name="LTextXData">
<Data><![CDATA[
<LTextOrderStatusXData>
<LText><Guid>5EB81A33-5310-470D-AE3A-3DABFCF02F3AR</Guid></LText>
<LText><Guid>4E490C1D-8402-4148-A876-85078EEF3ADBR</Guid></LText>
</LTextOrderStatusXData>
]]></Data>
</XData>

<XData name="LTextValueXData">
<Data><![CDATA[
<LTextValueXData>
<LTextValue><LText>5EB81A33-5310-470D-AE3A-3DABFCF02F3AR</LText><Value>Пары</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>4E490C1D-8402-4148-A876-85078EEF3ADBR</LText><Value>Соло</Value><Lang>ru</Lang></LTextValue>

<LTextValue><LText>5EB81A33-5310-470D-AE3A-3DABFCF02F3AR</LText><Value>Couple</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>4E490C1D-8402-4148-A876-85078EEF3ADBR</LText><Value>Solo</Value><Lang>en</Lang></LTextValue>

<LTextValue><LText>5EB81A33-5310-470D-AE3A-3DABFCF02F3AR</LText><Value>Paar</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>4E490C1D-8402-4148-A876-85078EEF3ADBR</LText><Value>Solo</Value><Lang>de</Lang></LTextValue>

</LTextValueXData>
]]></Data>
</XData>

<Method name="SetItalian">
<Description>
w ##class(Dance.Utils.Init.CompetitionType).SetItalian()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        $$$THROWONERROR(st, ##class(Dance.Data.CompetitionType).CodeIdxOpen("Couples").Name.SetValueByLang("Coppie", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.CompetitionType).CodeIdxOpen("Solo").Name.SetValueByLang("Assolo", "it"))
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Utils.Init.Country">
<Super>Dance.Utils.Init.BaseInit</Super>
<TimeCreated>63296,4328.569075</TimeCreated>

<Parameter name="PClassName">
<Default>Country</Default>
</Parameter>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ##class(Dance.Data.Country).%KillExtent()
    
    set count = 0
    set countriesEng($I(count)) =  "Afghanistan"
    set countriesEng($I(count)) =  "Albania"
    set countriesEng($I(count)) =  "Algeria"
    set countriesEng($I(count)) =  "American Samoa"
    set countriesEng($I(count)) =  "Andorra"
    set countriesEng($I(count)) =  "Angola"
    set countriesEng($I(count)) =  "Anguilla"
    set countriesEng($I(count)) =  "Antarctica"
    set countriesEng($I(count)) =  "Antigua and Barbuda"
    set countriesEng($I(count)) =  "Argentina"
    set countriesEng($I(count)) =  "Armenia"
    set countriesEng($I(count)) =  "Aruba"
    set countriesEng($I(count)) =  "Australia"
    set countriesEng($I(count)) =  "Austria"
    set countriesEng($I(count)) =  "Azerbaijan"
    set countriesEng($I(count)) =  "Bahamas"
    set countriesEng($I(count)) =  "Bahrain"
    set countriesEng($I(count)) =  "Bangladesh"
    set countriesEng($I(count)) =  "Barbados"
    set countriesEng($I(count)) =  "Belarus"
    set countriesEng($I(count)) =  "Belgium"
    set countriesEng($I(count)) =  "Belize"
    set countriesEng($I(count)) =  "Benin"
    set countriesEng($I(count)) =  "Bermuda"
    set countriesEng($I(count)) =  "Bhutan"
    set countriesEng($I(count)) =  "Bolivia"
    set countriesEng($I(count)) =  "Bosnia and Herzegovina"
    set countriesEng($I(count)) =  "Botswana"
    set countriesEng($I(count)) =  "Bouvet Island"
    set countriesEng($I(count)) =  "Brazil"
    set countriesEng($I(count)) =  "Brunei Darussalam"
    set countriesEng($I(count)) =  "Bulgaria"
    set countriesEng($I(count)) =  "Burkina Faso"
    set countriesEng($I(count)) =  "Burundi"
    set countriesEng($I(count)) =  "Cambodia"
    set countriesEng($I(count)) =  "Cameroon"
    set countriesEng($I(count)) =  "Canada"
    set countriesEng($I(count)) =  "Cape Verde"
    set countriesEng($I(count)) =  "Cayman Islands"
    set countriesEng($I(count)) =  "Central African Republic"
    set countriesEng($I(count)) =  "Chad"
    set countriesEng($I(count)) =  "Chile"
    set countriesEng($I(count)) =  "China, People's Republic of"
    set countriesEng($I(count)) =  "Chinese Taipei"
    set countriesEng($I(count)) =  "Christmas Island"
    set countriesEng($I(count)) =  "Cocos (Keeling) Islands"
    set countriesEng($I(count)) =  "Colombia"
    set countriesEng($I(count)) =  "Comoros"
    set countriesEng($I(count)) =  "Congo, Republic of the"
    set countriesEng($I(count)) =  "Cook Islands"
    set countriesEng($I(count)) =  "Costa Rica"
    set countriesEng($I(count)) =  "Côte d'Ivoire"
    set countriesEng($I(count)) =  "Croatia"
    set countriesEng($I(count)) =  "Cuba"
    set countriesEng($I(count)) =  "Cyprus"
    set countriesEng($I(count)) =  "Czech Republic"
    set countriesEng($I(count)) =  "Denmark"
    set countriesEng($I(count)) =  "Djibouti"
    set countriesEng($I(count)) =  "Dominica"
    set countriesEng($I(count)) =  "Dominican Republic"
    set countriesEng($I(count)) =  "Ecuador"
    set countriesEng($I(count)) =  "EGYPT"
    set countriesEng($I(count)) =  "El Salvador"
    set countriesEng($I(count)) =  "England"
    set countriesEng($I(count)) =  "Equatorial Guinea"
    set countriesEng($I(count)) =  "Estonia"
    set countriesEng($I(count)) =  "Ethiopia"
    set countriesEng($I(count)) =  "Falkland Islands"
    set countriesEng($I(count)) =  "Faroe Islands"
    set countriesEng($I(count)) =  "Fiji"
    set countriesEng($I(count)) =  "Finland"
    set countriesEng($I(count)) =  "France"
    set countriesEng($I(count)) =  "French Guiana"
    set countriesEng($I(count)) =  "French Polynesia"
    set countriesEng($I(count)) =  "Gabon"
    set countriesEng($I(count)) =  "Gambia"
    set countriesEng($I(count)) =  "Georgia"
    set countriesEng($I(count)) =  "Germany"
    set countriesEng($I(count)) =  "Ghana"
    set countriesEng($I(count)) =  "Gibraltar"
    set countriesEng($I(count)) =  "Greece"
    set countriesEng($I(count)) =  "Greenland"
    set countriesEng($I(count)) =  "Grenada"
    set countriesEng($I(count)) =  "Guadeloupe"
    set countriesEng($I(count)) =  "Guam"
    set countriesEng($I(count)) =  "Guatemala"
    set countriesEng($I(count)) =  "Guinea"
    set countriesEng($I(count)) =  "Guinea-Bissau"
    set countriesEng($I(count)) =  "Guyana"
    set countriesEng($I(count)) =  "Haiti"
    set countriesEng($I(count)) =  "Heard Island and McDonald Islands"
    set countriesEng($I(count)) =  "Honduras"
    set countriesEng($I(count)) =  "Hong Kong"
    set countriesEng($I(count)) =  "Hungary"
    set countriesEng($I(count)) =  "Iceland"
    set countriesEng($I(count)) =  "India"
    set countriesEng($I(count)) =  "Indonesia"
    set countriesEng($I(count)) =  "Iran, Islamic Republic of"
    set countriesEng($I(count)) =  "Iraq"
    set countriesEng($I(count)) =  "Ireland, Republic of"
    set countriesEng($I(count)) =  "Israel"
    set countriesEng($I(count)) =  "Italy"
    set countriesEng($I(count)) =  "Jamaica"
    set countriesEng($I(count)) =  "Japan"
    set countriesEng($I(count)) =  "Jordan"
    set countriesEng($I(count)) =  "Kazakhstan"
    set countriesEng($I(count)) =  "Kenya"
    set countriesEng($I(count)) =  "Kiribati"
    set countriesEng($I(count)) =  "Korea"
    set countriesEng($I(count)) =  "Korea, Democratic People's Republic of"
    set countriesEng($I(count)) =  "Kuwait"
    set countriesEng($I(count)) =  "Kyrgyzstan"
    set countriesEng($I(count)) =  "Lao People's Democratic Republic"
    set countriesEng($I(count)) =  "Latvia"
    set countriesEng($I(count)) =  "Lebanon"
    set countriesEng($I(count)) =  "Lesotho"
    set countriesEng($I(count)) =  "Liberia"
    set countriesEng($I(count)) =  "Libyan Arab Jamahiriya"
    set countriesEng($I(count)) =  "Liechtenstein"
    set countriesEng($I(count)) =  "Lithuania"
    set countriesEng($I(count)) =  "Luxembourg"
    set countriesEng($I(count)) =  "Macau"
    set countriesEng($I(count)) =  "Macedonia"
    set countriesEng($I(count)) =  "Madagascar"
    set countriesEng($I(count)) =  "Malawi"
    set countriesEng($I(count)) =  "Malaysia"
    set countriesEng($I(count)) =  "Maldives"
    set countriesEng($I(count)) =  "Mali"
    set countriesEng($I(count)) =  "Malta"
    set countriesEng($I(count)) =  "Marshall Islands"
    set countriesEng($I(count)) =  "Martinique"
    set countriesEng($I(count)) =  "Mauritania"
    set countriesEng($I(count)) =  "Mauritius"
    set countriesEng($I(count)) =  "Mayotte"
    set countriesEng($I(count)) =  "Mexico"
    set countriesEng($I(count)) =  "Micronesia, Federated States of"
    set countriesEng($I(count)) =  "Moldova"
    set countriesEng($I(count)) =  "Monaco"
    set countriesEng($I(count)) =  "Mongolia"
    set countriesEng($I(count)) =  "Montenegro"
    set countriesEng($I(count)) =  "Montserrat"
    set countriesEng($I(count)) =  "Morocco"
    set countriesEng($I(count)) =  "Mozambique"
    set countriesEng($I(count)) =  "Myanmar"
    set countriesEng($I(count)) =  "Namibia"
    set countriesEng($I(count)) =  "Nauru"
    set countriesEng($I(count)) =  "Nepal"
    set countriesEng($I(count)) =  "Netherlands"
    set countriesEng($I(count)) =  "Netherlands Antilles"
    set countriesEng($I(count)) =  "New Caledonia"
    set countriesEng($I(count)) =  "New Zealand"
    set countriesEng($I(count)) =  "Nicaragua"
    set countriesEng($I(count)) =  "Niger"
    set countriesEng($I(count)) =  "Nigeria"
    set countriesEng($I(count)) =  "Niue"
    set countriesEng($I(count)) =  "Norfolk Island"
    set countriesEng($I(count)) =  "Northern Ireland"
    set countriesEng($I(count)) =  "Northern Mariana Islands"
    set countriesEng($I(count)) =  "Norway"
    set countriesEng($I(count)) =  "Oman"
    set countriesEng($I(count)) =  "Pakistan"
    set countriesEng($I(count)) =  "Palau"
    set countriesEng($I(count)) =  "Panama"
    set countriesEng($I(count)) =  "Papua New Guinea"
    set countriesEng($I(count)) =  "Paraguay"
    set countriesEng($I(count)) =  "Peru"
    set countriesEng($I(count)) =  "Philippines"
    set countriesEng($I(count)) =  "Pitcairn"
    set countriesEng($I(count)) =  "Poland"
    set countriesEng($I(count)) =  "Portugal"
    set countriesEng($I(count)) =  "Puerto Rico"
    set countriesEng($I(count)) =  "Qatar"
    set countriesEng($I(count)) =  "Republic of Kosovo"
    set countriesEng($I(count)) =  "Réunion"
    set countriesEng($I(count)) =  "Romania"
    set countriesEng($I(count)) =  "Russian Federation"
    set countriesEng($I(count)) =  "Rwanda"
    set countriesEng($I(count)) =  "Saint Helena"
    set countriesEng($I(count)) =  "Saint Kitts and Nevis"
    set countriesEng($I(count)) =  "Saint Lucia"
    set countriesEng($I(count)) =  "Saint Pierre and Miquelon"
    set countriesEng($I(count)) =  "Saint Vincent and the Grenadines"
    set countriesEng($I(count)) =  "Samoa"
    set countriesEng($I(count)) =  "San Marino"
    set countriesEng($I(count)) =  "Saudi Arabia"
    set countriesEng($I(count)) =  "Scotland"
    set countriesEng($I(count)) =  "Senegal"
    set countriesEng($I(count)) =  "Serbia"
    set countriesEng($I(count)) =  "Seychelles"
    set countriesEng($I(count)) =  "Sierra Leone"
    set countriesEng($I(count)) =  "Singapore"
    set countriesEng($I(count)) =  "Slovakia"
    set countriesEng($I(count)) =  "Slovenia"
    set countriesEng($I(count)) =  "So Tomé and Príncipe"
    set countriesEng($I(count)) =  "Solomon Islands"
    set countriesEng($I(count)) =  "Somalia"
    set countriesEng($I(count)) =  "South Africa"
    set countriesEng($I(count)) =  "South Georgia and the South Sandwich Islands"
    set countriesEng($I(count)) =  "Spain"
    set countriesEng($I(count)) =  "Sri Lanka"
    set countriesEng($I(count)) =  "Sudan"
    set countriesEng($I(count)) =  "Suriname"
    set countriesEng($I(count)) =  "Svalbard and Jan Mayen"
    set countriesEng($I(count)) =  "Swaziland"
    set countriesEng($I(count)) =  "Sweden"
    set countriesEng($I(count)) =  "Switzerland"
    set countriesEng($I(count)) =  "Syrian Arab Republic"
    set countriesEng($I(count)) =  "Tajikistan"
    set countriesEng($I(count)) =  "Tanzania, United Republic Of"
    set countriesEng($I(count)) =  "Thailand"
    set countriesEng($I(count)) =  "Timor-Leste"
    set countriesEng($I(count)) =  "Togo"
    set countriesEng($I(count)) =  "Tokelau"
    set countriesEng($I(count)) =  "Tonga"
    set countriesEng($I(count)) =  "Trinidad and Tobago"
    set countriesEng($I(count)) =  "Tunisia"
    set countriesEng($I(count)) =  "Turkey"
    set countriesEng($I(count)) =  "Turkmenistan"
    set countriesEng($I(count)) =  "Turks and Caicos Islands"
    set countriesEng($I(count)) =  "Tuvalu"
    set countriesEng($I(count)) =  "Uganda"
    set countriesEng($I(count)) =  "Ukraine"
    set countriesEng($I(count)) =  "United Arab Emirates"
    set countriesEng($I(count)) =  "United Kingdom"
    set countriesEng($I(count)) =  "United States"
    set countriesEng($I(count)) =  "Uruguay"
    set countriesEng($I(count)) =  "Uzbekistan"
    set countriesEng($I(count)) =  "Vanuatu"
    set countriesEng($I(count)) =  "Vatican City State"
    set countriesEng($I(count)) =  "Venezuela"
    set countriesEng($I(count)) =  "Vietnam"
    set countriesEng($I(count)) =  "Virgin Islands, British"
    set countriesEng($I(count)) =  "Virgin Islands, U.S."
    set countriesEng($I(count)) =  "Wales"
    set countriesEng($I(count)) =  "Wallis and Futuna"
    set countriesEng($I(count)) =  "Western Sahara"
    set countriesEng($I(count)) =  "Yemen"
    set countriesEng($I(count)) =  "Yugoslavia"
    set countriesEng($I(count)) =  "Zambia"
    set countriesEng($I(count)) =  "Zimbabwe"
    set countriesEng($I(count)) =  "--Unknown--"
    
    
    
    
    set count = 0
    set countriesRus($I(count)) =  "Афганистан"
    set countriesRus($I(count)) =  "Албания"
    set countriesRus($I(count)) =  "Алжир"
    set countriesRus($I(count)) =  "Американское Самоа"
    set countriesRus($I(count)) =  "Андорра"
    set countriesRus($I(count)) =  "Ангола"
    set countriesRus($I(count)) =  "Ангилья"
    set countriesRus($I(count)) =  "Антарктида"
    set countriesRus($I(count)) =  "Антигуа и Барбуда"
    set countriesRus($I(count)) =  "Аргентина"
    set countriesRus($I(count)) =  "Армения"
    set countriesRus($I(count)) =  "Аруба"
    set countriesRus($I(count)) =  "Австралия"
    set countriesRus($I(count)) =  "Австрия"
    set countriesRus($I(count)) =  "Азербайджан"
    set countriesRus($I(count)) =  "Багамские острова"
    set countriesRus($I(count)) =  "Бахрейн"
    set countriesRus($I(count)) =  "Бангладеш"
    set countriesRus($I(count)) =  "Барбадос"
    set countriesRus($I(count)) =  "Беларусь"
    set countriesRus($I(count)) =  "Бельгия"
    set countriesRus($I(count)) =  "Белиз"
    set countriesRus($I(count)) =  "Бенин"
    set countriesRus($I(count)) =  "Бермудские острова"
    set countriesRus($I(count)) =  "Бутан"
    set countriesRus($I(count)) =  "Боливия"
    set countriesRus($I(count)) =  "Босния и Герцеговина"
    set countriesRus($I(count)) =  "Ботсвана"
    set countriesRus($I(count)) =  "Остров Буве"
    set countriesRus($I(count)) =  "Бразилия"
    set countriesRus($I(count)) =  "Бруней-Даруссалам"
    set countriesRus($I(count)) =  "Болгария"
    set countriesRus($I(count)) =  "Буркина-Фасо"
    set countriesRus($I(count)) =  "Бурунди"
    set countriesRus($I(count)) =  "Камбоджа"
    set countriesRus($I(count)) =  "Камерун"
    set countriesRus($I(count)) =  "Канада"
    set countriesRus($I(count)) =  "Кабо-Верде"
    set countriesRus($I(count)) =  "Каймановы острова"
    set countriesRus($I(count)) =  "Центрально-Африканская Республика"
    set countriesRus($I(count)) =  "Чад"
    set countriesRus($I(count)) =  "Чили"
    set countriesRus($I(count)) =  "Китайская Народная Республика"
    set countriesRus($I(count)) =  "китайский Тайбэй"
    set countriesRus($I(count)) =  "Остров Рождества"
    set countriesRus($I(count)) =  "Кокосовые ( Килинг) острова"
    set countriesRus($I(count)) =  "Колумбия"
    set countriesRus($I(count)) =  "Коморские острова"
    set countriesRus($I(count)) =  "Республика Конго"
    set countriesRus($I(count)) =  "острова Кука"
    set countriesRus($I(count)) =  "Коста-Рика"
    set countriesRus($I(count)) =  "Берег Слоновой Кости"
    set countriesRus($I(count)) =  "Хорватия"
    set countriesRus($I(count)) =  "Куба"
    set countriesRus($I(count)) =  "Кипр"
    set countriesRus($I(count)) =  "Чешская республика"
    set countriesRus($I(count)) =  "Дания"
    set countriesRus($I(count)) =  "Джибути"
    set countriesRus($I(count)) =  "Доминика"
    set countriesRus($I(count)) =  "Доминиканская Республика"
    set countriesRus($I(count)) =  "Эквадор"
    set countriesRus($I(count)) =  "ЕГИПЕТ"
    set countriesRus($I(count)) =  "Сальвадор"
    set countriesRus($I(count)) =  "Англия"
    set countriesRus($I(count)) =  "Экваториальная Гвинея"
    set countriesRus($I(count)) =  "Эстония"
    set countriesRus($I(count)) =  "Эфиопия"
    set countriesRus($I(count)) =  "Фолклендские острова"
    set countriesRus($I(count)) =  "Фарерские острова"
    set countriesRus($I(count)) =  "Фиджи"
    set countriesRus($I(count)) =  "Финляндия"
    set countriesRus($I(count)) =  "Франция"
    set countriesRus($I(count)) =  "Французская Гвиана"
    set countriesRus($I(count)) =  "Французская Полинезия"
    set countriesRus($I(count)) =  "Габон"
    set countriesRus($I(count)) =  "Гамбия"
    set countriesRus($I(count)) =  "Грузия"
    set countriesRus($I(count)) =  "Германия"
    set countriesRus($I(count)) =  "Гана"
    set countriesRus($I(count)) =  "Гибралтар"
    set countriesRus($I(count)) =  "Греция"
    set countriesRus($I(count)) =  "Гренландия"
    set countriesRus($I(count)) =  "Гренада"
    set countriesRus($I(count)) =  "Гваделупа"
    set countriesRus($I(count)) =  "Гуам"
    set countriesRus($I(count)) =  "Гватемала"
    set countriesRus($I(count)) =  "Гвинея"
    set countriesRus($I(count)) =  "Гвинея-Бисау"
    set countriesRus($I(count)) =  "Гайана"
    set countriesRus($I(count)) =  "Гаити"
    set countriesRus($I(count)) =  "Остров Херд и Макдональд"
    set countriesRus($I(count)) =  "Гондурас"
    set countriesRus($I(count)) =  "Гонконг"
    set countriesRus($I(count)) =  "Венгрия"
    set countriesRus($I(count)) =  "Исландия"
    set countriesRus($I(count)) =  "Индия"
    set countriesRus($I(count)) =  "Индонезия"
    set countriesRus($I(count)) =  "Иран, Исламская Республика"
    set countriesRus($I(count)) =  "Ирак"
    set countriesRus($I(count)) =  "Ирландия , Республика"
    set countriesRus($I(count)) =  "Израиль"
    set countriesRus($I(count)) =  "Италия"
    set countriesRus($I(count)) =  "Ямайка"
    set countriesRus($I(count)) =  "Япония"
    set countriesRus($I(count)) =  "Иордания"
    set countriesRus($I(count)) =  "Казахстан"
    set countriesRus($I(count)) =  "Кения"
    set countriesRus($I(count)) =  "Кирибати"
    set countriesRus($I(count)) =  "Корея"
    set countriesRus($I(count)) =  "Корея , Корейская Народно-Демократическая Республика"
    set countriesRus($I(count)) =  "Кувейт"
    set countriesRus($I(count)) =  "Киргизия"
    set countriesRus($I(count)) =  "Лаосская Народно-Демократическая Республика"
    set countriesRus($I(count)) =  "Латвия"
    set countriesRus($I(count)) =  "Ливан"
    set countriesRus($I(count)) =  "Лесото"
    set countriesRus($I(count)) =  "Либерия"
    set countriesRus($I(count)) =  "Ливийская Арабская Джамахирия"
    set countriesRus($I(count)) =  "Лихтенштейн"
    set countriesRus($I(count)) =  "Литва"
    set countriesRus($I(count)) =  "Люксембург"
    set countriesRus($I(count)) =  "Макао"
    set countriesRus($I(count)) =  "Македония"
    set countriesRus($I(count)) =  "Мадагаскар"
    set countriesRus($I(count)) =  "Малави"
    set countriesRus($I(count)) =  "Малайзия"
    set countriesRus($I(count)) =  "Мальдивы"
    set countriesRus($I(count)) =  "Мали"
    set countriesRus($I(count)) =  "Мальта"
    set countriesRus($I(count)) =  "Маршалловы острова"
    set countriesRus($I(count)) =  "Мартиника"
    set countriesRus($I(count)) =  "Мавритания"
    set countriesRus($I(count)) =  "Маврикий"
    set countriesRus($I(count)) =  "Майотта"
    set countriesRus($I(count)) =  "Мексика"
    set countriesRus($I(count)) =  "Микронезия, Федеративные Штаты"
    set countriesRus($I(count)) =  "Молдова"
    set countriesRus($I(count)) =  "Монако"
    set countriesRus($I(count)) =  "Монголия"
    set countriesRus($I(count)) =  "Черногория"
    set countriesRus($I(count)) =  "Монтсеррат"
    set countriesRus($I(count)) =  "Марокко"
    set countriesRus($I(count)) =  "Мозамбик"
    set countriesRus($I(count)) =  "Мьянма"
    set countriesRus($I(count)) =  "Намибия"
    set countriesRus($I(count)) =  "Науру"
    set countriesRus($I(count)) =  "Непал"
    set countriesRus($I(count)) =  "Нидерланды"
    set countriesRus($I(count)) =  "Нидерландские Антильские острова"
    set countriesRus($I(count)) =  "Новая Каледония"
    set countriesRus($I(count)) =  "Новая Зеландия"
    set countriesRus($I(count)) =  "Никарагуа"
    set countriesRus($I(count)) =  "Нигер"
    set countriesRus($I(count)) =  "Нигерия"
    set countriesRus($I(count)) =  "Ниуэ"
    set countriesRus($I(count)) =  "Остров Норфолк"
    set countriesRus($I(count)) =  "Северная Ирландия"
    set countriesRus($I(count)) =  "Северные Марианские острова"
    set countriesRus($I(count)) =  "Норвегия"
    set countriesRus($I(count)) =  "Оман"
    set countriesRus($I(count)) =  "Пакистан"
    set countriesRus($I(count)) =  "Палау"
    set countriesRus($I(count)) =  "Панама"
    set countriesRus($I(count)) =  "Папуа-Новая Гвинея"
    set countriesRus($I(count)) =  "Парагвай"
    set countriesRus($I(count)) =  "Перу"
    set countriesRus($I(count)) =  "Филиппины"
    set countriesRus($I(count)) =  "Питкэрн"
    set countriesRus($I(count)) =  "Польша"
    set countriesRus($I(count)) =  "Португалия"
    set countriesRus($I(count)) =  "Пуэрто-Рико"
    set countriesRus($I(count)) =  "Катар"
    set countriesRus($I(count)) =  "Республика Косово"
    set countriesRus($I(count)) =  "Реюньон"
    set countriesRus($I(count)) =  "Румыния"
    set countriesRus($I(count)) =  "Российская Федерация"
    set countriesRus($I(count)) =  "Руанда"
    set countriesRus($I(count)) =  "Остров Святой Елены"
    set countriesRus($I(count)) =  "Сент-Китс и Невис"
    set countriesRus($I(count)) =  "Сент-Люсия"
    set countriesRus($I(count)) =  "Сен-Пьер и Микелон"
    set countriesRus($I(count)) =  "Сент-Винсент и Гренадины"
    set countriesRus($I(count)) =  "Самоа"
    set countriesRus($I(count)) =  "Сан - Марино"
    set countriesRus($I(count)) =  "Саудовская Аравия"
    set countriesRus($I(count)) =  "Шотландия"
    set countriesRus($I(count)) =  "Сенегал"
    set countriesRus($I(count)) =  "Сербия"
    set countriesRus($I(count)) =  "Сейшельские острова"
    set countriesRus($I(count)) =  "Сьерра-Леоне"
    set countriesRus($I(count)) =  "Сингапур"
    set countriesRus($I(count)) =  "Словакия"
    set countriesRus($I(count)) =  "Словения"
    set countriesRus($I(count)) =  "Так -Томе и Принсипи"
    set countriesRus($I(count)) =  "Соломоновы Острова"
    set countriesRus($I(count)) =  "Сомали"
    set countriesRus($I(count)) =  "ЮАР"
    set countriesRus($I(count)) =  "Южная Георгия иЮжные Сандвичевы острова"
    set countriesRus($I(count)) =  "Испания"
    set countriesRus($I(count)) =  "Шри Ланка"
    set countriesRus($I(count)) =  "Судан"
    set countriesRus($I(count)) =  "Суринам"
    set countriesRus($I(count)) =  "Шпицберген и Ян-Майен"
    set countriesRus($I(count)) =  "Свазиленд"
    set countriesRus($I(count)) =  "Швеция"
    set countriesRus($I(count)) =  "Швейцария"
    set countriesRus($I(count)) =  "Сирийская Арабская Республика"
    set countriesRus($I(count)) =  "Таджикистан"
    set countriesRus($I(count)) =  "Танзания, Объединенная Республика"
    set countriesRus($I(count)) =  "Таиланд"
    set countriesRus($I(count)) =  "Тимор-Лешти"
    set countriesRus($I(count)) =  "Того"
    set countriesRus($I(count)) =  "Токелау"
    set countriesRus($I(count)) =  "Тонга"
    set countriesRus($I(count)) =  "Тринидад и Тобаго"
    set countriesRus($I(count)) =  "Тунис"
    set countriesRus($I(count)) =  "Турция"
    set countriesRus($I(count)) =  "Туркменистан"
    set countriesRus($I(count)) =  "Острова Теркс и Кайкос"
    set countriesRus($I(count)) =  "Тувалу"
    set countriesRus($I(count)) =  "Уганда"
    set countriesRus($I(count)) =  "Украина"
    set countriesRus($I(count)) =  "Объединенные Арабские Эмираты"
    set countriesRus($I(count)) =  "Великобритания"
    set countriesRus($I(count)) =  "США"
    set countriesRus($I(count)) =  "Уругвай"
    set countriesRus($I(count)) =  "Узбекистан"
    set countriesRus($I(count)) =  "Вануату"
    set countriesRus($I(count)) =  "Государство-город Ватикан"
    set countriesRus($I(count)) =  "Венесуэла"
    set countriesRus($I(count)) =  "Вьетнам"
    set countriesRus($I(count)) =  "Виргинские острова, Британские"
    set countriesRus($I(count)) =  "Виргинские острова, США"
    set countriesRus($I(count)) =  "Уэльс"
    set countriesRus($I(count)) =  "Уоллис и Футуна"
    set countriesRus($I(count)) =  "Западная Сахара"
    set countriesRus($I(count)) =  "Йемен"
    set countriesRus($I(count)) =  "Югославия"
    set countriesRus($I(count)) =  "Замбия"
    set countriesRus($I(count)) =  "Зимбабве"
    set countriesRus($I(count)) =  "--Неизвестна--"
    
    
    set count = 0
    set countriesDe($I(count)) =  "Afghanistan"
    set countriesDe($I(count)) =  "Albanien"
    set countriesDe($I(count)) =  "Algerien"
    set countriesDe($I(count)) =  "amerikanische Samoa"
    set countriesDe($I(count)) =  "Andorra"
    set countriesDe($I(count)) =  "Angola"
    set countriesDe($I(count)) =  "Anguilla"
    set countriesDe($I(count)) =  "Antarktika"
    set countriesDe($I(count)) =  "Antigua und Barbuda"
    set countriesDe($I(count)) =  "Argentinien"
    set countriesDe($I(count)) =  "Armenien"
    set countriesDe($I(count)) =  "Aruba"
    set countriesDe($I(count)) =  "Australien"
    set countriesDe($I(count)) =  "Österreich"
    set countriesDe($I(count)) =  "Aserbaidschan"
    set countriesDe($I(count)) =  "Bahamas"
    set countriesDe($I(count)) =  "Bahrein"
    set countriesDe($I(count)) =  "Bangladesch"
    set countriesDe($I(count)) =  "Barbados"
    set countriesDe($I(count)) =  "Weißrussland"
    set countriesDe($I(count)) =  "Belgien"
    set countriesDe($I(count)) =  "Belize"
    set countriesDe($I(count)) =  "Benin"
    set countriesDe($I(count)) =  "Bermuda"
    set countriesDe($I(count)) =  "Butan"
    set countriesDe($I(count)) =  "Bolivien"
    set countriesDe($I(count)) =  "Bosnien und Herzegowina"
    set countriesDe($I(count)) =  "Botswana"
    set countriesDe($I(count)) =  "Bouvet-Insel"
    set countriesDe($I(count)) =  "Brasilien"
    set countriesDe($I(count)) =  "Brunei Darussalam"
    set countriesDe($I(count)) =  "Bulgarien"
    set countriesDe($I(count)) =  "Burkina Faso"
    set countriesDe($I(count)) =  "Burundi"
    set countriesDe($I(count)) =  "Kambodscha"
    set countriesDe($I(count)) =  "Kamerun"
    set countriesDe($I(count)) =  "Kanada"
    set countriesDe($I(count)) =  "Kap Verde"
    set countriesDe($I(count)) =  "Cayman Islands"
    set countriesDe($I(count)) =  "Zentralafrikanische Republik"
    set countriesDe($I(count)) =  "Tschad"
    set countriesDe($I(count)) =  "Chile"
    set countriesDe($I(count)) =  "Volksrepublik China"
    set countriesDe($I(count)) =  "Chinese Taipei"
    set countriesDe($I(count)) =  "Weihnachtsinsel"
    set countriesDe($I(count)) =  "Cocos (Keeling) Islands"
    set countriesDe($I(count)) =  "Kolumbien"
    set countriesDe($I(count)) =  "Komoren"
    set countriesDe($I(count)) =  "Republik Kongo"
    set countriesDe($I(count)) =  "cook Islands"
    set countriesDe($I(count)) =  "Costa Rica"
    set countriesDe($I(count)) =  "Elfenbeinküste"
    set countriesDe($I(count)) =  "Kroatien"
    set countriesDe($I(count)) =  "Kuba"
    set countriesDe($I(count)) =  "Zypern"
    set countriesDe($I(count)) =  "Tschechische Republik"
    set countriesDe($I(count)) =  "Dänemark"
    set countriesDe($I(count)) =  "Dschibuti"
    set countriesDe($I(count)) =  "Dominica"
    set countriesDe($I(count)) =  "Dominikanische Republik"
    set countriesDe($I(count)) =  "Ecuador"
    set countriesDe($I(count)) =  "ÄGYPTEN"
    set countriesDe($I(count)) =  "Salvador"
    set countriesDe($I(count)) =  "England"
    set countriesDe($I(count)) =  "Äquatorial-Guinea"
    set countriesDe($I(count)) =  "Estland"
    set countriesDe($I(count)) =  "Äthiopien"
    set countriesDe($I(count)) =  "Falkland-Inseln"
    set countriesDe($I(count)) =  "Färöer-Inseln"
    set countriesDe($I(count)) =  "Fidschi"
    set countriesDe($I(count)) =  "Finnland"
    set countriesDe($I(count)) =  "Frankreich"
    set countriesDe($I(count)) =  "Französisch-Guayana"
    set countriesDe($I(count)) =  "Französisch-Polynesien"
    set countriesDe($I(count)) =  "Gabun"
    set countriesDe($I(count)) =  "Gambia"
    set countriesDe($I(count)) =  "Georgia"
    set countriesDe($I(count)) =  "Deutschland"
    set countriesDe($I(count)) =  "Ghana"
    set countriesDe($I(count)) =  "Gibraltar"
    set countriesDe($I(count)) =  "Griechenland"
    set countriesDe($I(count)) =  "Grönland"
    set countriesDe($I(count)) =  "Grenada"
    set countriesDe($I(count)) =  "Guadeloupe"
    set countriesDe($I(count)) =  "Guam"
    set countriesDe($I(count)) =  "Guatemala"
    set countriesDe($I(count)) =  "Guinea"
    set countriesDe($I(count)) =  "Guinea-Bissau"
    set countriesDe($I(count)) =  "Guyana"
    set countriesDe($I(count)) =  "Haiti"
    set countriesDe($I(count)) =  "Heard und McDonald-Inseln"
    set countriesDe($I(count)) =  "Honduras"
    set countriesDe($I(count)) =  "Hongkong"
    set countriesDe($I(count)) =  "Ungarn"
    set countriesDe($I(count)) =  "Island"
    set countriesDe($I(count)) =  "Indien"
    set countriesDe($I(count)) =  "Indonesien"
    set countriesDe($I(count)) =  "Iran, Islamische Republik"
    set countriesDe($I(count)) =  "Irak"
    set countriesDe($I(count)) =  "Irland, die Republik"
    set countriesDe($I(count)) =  "Israel"
    set countriesDe($I(count)) =  "Italien"
    set countriesDe($I(count)) =  "Jamaika"
    set countriesDe($I(count)) =  "Japan"
    set countriesDe($I(count)) =  "Jordan"
    set countriesDe($I(count)) =  "Kasachstan"
    set countriesDe($I(count)) =  "Kenia"
    set countriesDe($I(count)) =  "Kiribati"
    set countriesDe($I(count)) =  "Korea"
    set countriesDe($I(count)) =  "Korea, Demokratische Volksrepublik"
    set countriesDe($I(count)) =  "Kuwait"
    set countriesDe($I(count)) =  "Kirgisistan"
    set countriesDe($I(count)) =  "Lao Demokratischen Volksrepublik"
    set countriesDe($I(count)) =  "Lettland"
    set countriesDe($I(count)) =  "Libanon"
    set countriesDe($I(count)) =  "Lesotho"
    set countriesDe($I(count)) =  "Liberia"
    set countriesDe($I(count)) =  "Libysch-Arabische Volks-Dschamahirija"
    set countriesDe($I(count)) =  "Liechtenstein"
    set countriesDe($I(count)) =  "Litauen"
    set countriesDe($I(count)) =  "Luxemburg"
    set countriesDe($I(count)) =  "Macau"
    set countriesDe($I(count)) =  "Mazedonien"
    set countriesDe($I(count)) =  "Madagaskar"
    set countriesDe($I(count)) =  "Malawi"
    set countriesDe($I(count)) =  "Malaysia"
    set countriesDe($I(count)) =  "Malediven"
    set countriesDe($I(count)) =  "Mali"
    set countriesDe($I(count)) =  "Malta"
    set countriesDe($I(count)) =  "Marshall-Inseln"
    set countriesDe($I(count)) =  "Martinique"
    set countriesDe($I(count)) =  "Mauretanien"
    set countriesDe($I(count)) =  "Mauritius"
    set countriesDe($I(count)) =  "Mayotte"
    set countriesDe($I(count)) =  "Mexiko"
    set countriesDe($I(count)) =  "Mikronesien, Föderierte Staaten von"
    set countriesDe($I(count)) =  "Moldawien"
    set countriesDe($I(count)) =  "Monaco"
    set countriesDe($I(count)) =  "Mongolei"
    set countriesDe($I(count)) =  "Montenegro"
    set countriesDe($I(count)) =  "Montserrat"
    set countriesDe($I(count)) =  "Marokko"
    set countriesDe($I(count)) =  "Mosambik"
    set countriesDe($I(count)) =  "Myanmar"
    set countriesDe($I(count)) =  "Namibia"
    set countriesDe($I(count)) =  "Nauru"
    set countriesDe($I(count)) =  "Nepal"
    set countriesDe($I(count)) =  "Niederlande"
    set countriesDe($I(count)) =  "Niederländische Antillen"
    set countriesDe($I(count)) =  "Neukaledonien"
    set countriesDe($I(count)) =  "Neuseeland"
    set countriesDe($I(count)) =  "Nicaragua"
    set countriesDe($I(count)) =  "Niger"
    set countriesDe($I(count)) =  "Nigeria"
    set countriesDe($I(count)) =  "Niue"
    set countriesDe($I(count)) =  "Nf"
    set countriesDe($I(count)) =  "Nordirland"
    set countriesDe($I(count)) =  "Northern Mariana Islands"
    set countriesDe($I(count)) =  "Norwegen"
    set countriesDe($I(count)) =  "Oman"
    set countriesDe($I(count)) =  "Pakistan"
    set countriesDe($I(count)) =  "Palau"
    set countriesDe($I(count)) =  "Panama"
    set countriesDe($I(count)) =  "Papua-Neuguinea"
    set countriesDe($I(count)) =  "Paraguay"
    set countriesDe($I(count)) =  "Peru"
    set countriesDe($I(count)) =  "Philippinen"
    set countriesDe($I(count)) =  "Pitcairn"
    set countriesDe($I(count)) =  "Polen"
    set countriesDe($I(count)) =  "Portugal"
    set countriesDe($I(count)) =  "Puerto Rico"
    set countriesDe($I(count)) =  "Katar"
    set countriesDe($I(count)) =  "Die Republik Kosovo"
    set countriesDe($I(count)) =  "Wiedervereinigung"
    set countriesDe($I(count)) =  "Rumänien"
    set countriesDe($I(count)) =  "Die Russische Föderation"
    set countriesDe($I(count)) =  "Ruanda"
    set countriesDe($I(count)) =  "St. Helena"
    set countriesDe($I(count)) =  "St. Kitts und Nevis"
    set countriesDe($I(count)) =  "St. Lucia"
    set countriesDe($I(count)) =  "Saint-Pierre und Miquelon"
    set countriesDe($I(count)) =  "Vc"
    set countriesDe($I(count)) =  "Samoa"
    set countriesDe($I(count)) =  "San - Marino"
    set countriesDe($I(count)) =  "Saudi-Arabien"
    set countriesDe($I(count)) =  "Schottland"
    set countriesDe($I(count)) =  "Senegal"
    set countriesDe($I(count)) =  "Serbien"
    set countriesDe($I(count)) =  "Seychellen"
    set countriesDe($I(count)) =  "Sierra Leone"
    set countriesDe($I(count)) =  "Singapur"
    set countriesDe($I(count)) =  "Slowakei"
    set countriesDe($I(count)) =  "Slowenien"
    set countriesDe($I(count)) =  "So Tome und Principe"
    set countriesDe($I(count)) =  "Salomon-Inseln"
    set countriesDe($I(count)) =  "Somalia"
    set countriesDe($I(count)) =  "Südafrika"
    set countriesDe($I(count)) =  "South Georgia Sandwichinseln iYuzhnye"
    set countriesDe($I(count)) =  "Spanien"
    set countriesDe($I(count)) =  "Sri Lanka"
    set countriesDe($I(count)) =  "Sudan"
    set countriesDe($I(count)) =  "Surinam"
    set countriesDe($I(count)) =  "Spitzbergen und Jan-Mayen"
    set countriesDe($I(count)) =  "Swasiland"
    set countriesDe($I(count)) =  "Schweden"
    set countriesDe($I(count)) =  "Schweiz"
    set countriesDe($I(count)) =  "Die Arabische Republik Syrien"
    set countriesDe($I(count)) =  "Tadschikistan"
    set countriesDe($I(count)) =  "Tansania, Vereinigte Republik"
    set countriesDe($I(count)) =  "Thailand"
    set countriesDe($I(count)) =  "Timor-Leste"
    set countriesDe($I(count)) =  "Togo"
    set countriesDe($I(count)) =  "Tokelau"
    set countriesDe($I(count)) =  "Tonga"
    set countriesDe($I(count)) =  "Trinidad und Tobago"
    set countriesDe($I(count)) =  "Tunesien"
    set countriesDe($I(count)) =  "Türkei"
    set countriesDe($I(count)) =  "Turkmenistan"
    set countriesDe($I(count)) =  "Turks-und Caicosinseln"
    set countriesDe($I(count)) =  "Tuvalu"
    set countriesDe($I(count)) =  "Uganda"
    set countriesDe($I(count)) =  "Ukraine"
    set countriesDe($I(count)) =  "Vereinigte Arabische Emirate"
    set countriesDe($I(count)) =  "Vereinigtes Königreich"
    set countriesDe($I(count)) =  "USA"
    set countriesDe($I(count)) =  "Uruguay"
    set countriesDe($I(count)) =  "Usbekistan"
    set countriesDe($I(count)) =  "Vanuatu"
    set countriesDe($I(count)) =  "Vatikanstaat"
    set countriesDe($I(count)) =  "Venezuela"
    set countriesDe($I(count)) =  "Vietnam"
    set countriesDe($I(count)) =  "Britische Jungferninseln"
    set countriesDe($I(count)) =  "US Virgin Islands"
    set countriesDe($I(count)) =  "Wales"
    set countriesDe($I(count)) =  "Wallis und Futuna"
    set countriesDe($I(count)) =  "Westsahara"
    set countriesDe($I(count)) =  "Jemen"
    set countriesDe($I(count)) =  "Jugoslawien"
    set countriesDe($I(count)) =  "Sambia"
    set countriesDe($I(count)) =  "Simbabwe"
    set countriesDe($I(count)) =  "--Unbekannt--"

    for i=1:1:count{ 
        set nameEng = countriesEng(i)
        set nameRus = countriesRus(i)
        set nameDe = countriesDe(i)
        
        set country = ##class(Dance.Data.Country).%New()
        do ##class(%MessageDictionary).SetSessionLanguage("en")
        set country.Name = ##class(Dance.Data.Localization.LText).Create(nameEng)
        do ##class(%MessageDictionary).SetSessionLanguage("ru")
        set country.Name.Value = nameRus
        do ##class(%MessageDictionary).SetSessionLanguage("de")
        set country.Name.Value = nameDe
        
        set country.WDSFName = nameEng
        do country.%Save()  
    }
    
    do ##class(%MessageDictionary).SetSessionLanguage("ru")
    quit $$$OK
]]></Implementation>
</Method>

<Method name="SetItalian">
<Description>
w ##class(Dance.Utils.Init.Country).SetItalian()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Afghanistan").Name.SetValueByLang("Afghanistan", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Albania").Name.SetValueByLang("Albania", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Algeria").Name.SetValueByLang("Algeria", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("American Samoa").Name.SetValueByLang("Samoa Americane", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Andorra").Name.SetValueByLang("Andorra", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Angola").Name.SetValueByLang("Angola", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Anguilla").Name.SetValueByLang("Anguilla", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Antarctica").Name.SetValueByLang("Antartide", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Antigua and Barbuda").Name.SetValueByLang("Antigua e Barbuda", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Argentina").Name.SetValueByLang("Argentina", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Armenia").Name.SetValueByLang("Armenia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Aruba").Name.SetValueByLang("Aruba", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Australia").Name.SetValueByLang("Australia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Austria").Name.SetValueByLang("Austria", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Azerbaijan").Name.SetValueByLang("Azerbaijan", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Bahamas").Name.SetValueByLang("Bahamas", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Bahrain").Name.SetValueByLang("Bahrain", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Bangladesh").Name.SetValueByLang("Bangladesh", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Barbados").Name.SetValueByLang("Barbados", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Belarus").Name.SetValueByLang("Belarus", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Belgium").Name.SetValueByLang("Belgio", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Belize").Name.SetValueByLang("Belize", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Benin").Name.SetValueByLang("Benin", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Bermuda").Name.SetValueByLang("Bermuda", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Bhutan").Name.SetValueByLang("Bhutan", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Bolivia").Name.SetValueByLang("Bolivia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Bosnia and Herzegovina").Name.SetValueByLang("Bosnia Erzegovina", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Botswana").Name.SetValueByLang("Botswana", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Bouvet Island").Name.SetValueByLang("Isola Bouvet", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Brazil").Name.SetValueByLang("Brasile", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Brunei Darussalam").Name.SetValueByLang("Brunei Darussalam", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Bulgaria").Name.SetValueByLang("Bulgaria", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Burkina Faso").Name.SetValueByLang("Burkina Faso", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Burundi").Name.SetValueByLang("Burundi", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Cambodia").Name.SetValueByLang("Cambogia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Cameroon").Name.SetValueByLang("Cameroon", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Canada").Name.SetValueByLang("Canada", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Cape Verde").Name.SetValueByLang("Capo Verde", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Cayman Islands").Name.SetValueByLang("Isole Cayman", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Central African Republic").Name.SetValueByLang("Repubblica Centrafricana", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Chad").Name.SetValueByLang("Chad", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Chile").Name.SetValueByLang("Chile", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("China, People's Republic of").Name.SetValueByLang("Cina, Repubblica Popolare", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Chinese Taipei").Name.SetValueByLang("Chinese Taipei", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Christmas Island").Name.SetValueByLang("Isola di Natale", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Cocos (Keeling) Islands").Name.SetValueByLang("Cocos (Keeling)", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Colombia").Name.SetValueByLang("Colombia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Comoros").Name.SetValueByLang("Comoros", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Congo, Republic of the").Name.SetValueByLang("Congo, Repubblica del", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Cook Islands").Name.SetValueByLang("Isole Cook", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Costa Rica").Name.SetValueByLang("Costa Rica", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Côte d'Ivoire").Name.SetValueByLang("Costa d'Avorio", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Croatia").Name.SetValueByLang("Croazia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Cuba").Name.SetValueByLang("Cuba", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Cyprus").Name.SetValueByLang("Cipro", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Czech Republic").Name.SetValueByLang("Repubblica Ceca", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Denmark").Name.SetValueByLang("Danimarca", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Djibouti").Name.SetValueByLang("Gibuti", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Dominica").Name.SetValueByLang("Dominica", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Dominican Republic").Name.SetValueByLang("Repubblica Dominicana", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Ecuador").Name.SetValueByLang("Ecuador", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("EGYPT").Name.SetValueByLang("EGITTO", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("El Salvador").Name.SetValueByLang("El Salvador", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("England").Name.SetValueByLang("Inghilterra", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Equatorial Guinea").Name.SetValueByLang("Guinea Equatoriale", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Estonia").Name.SetValueByLang("Estonia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Ethiopia").Name.SetValueByLang("Etiopia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Falkland Islands").Name.SetValueByLang("Isole Falkland", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Faroe Islands").Name.SetValueByLang("Isole Faroe", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Fiji").Name.SetValueByLang("Fiji", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Finland").Name.SetValueByLang("Finlandia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("France").Name.SetValueByLang("Francia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("French Guiana").Name.SetValueByLang("Guyana Francese", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("French Polynesia").Name.SetValueByLang("Polinesia Francese", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Gabon").Name.SetValueByLang("Gabon", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Gambia").Name.SetValueByLang("Gambia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Georgia").Name.SetValueByLang("Georgia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Germany").Name.SetValueByLang("La Germania", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Ghana").Name.SetValueByLang("Ghana", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Gibraltar").Name.SetValueByLang("Gibilterra", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Greece").Name.SetValueByLang("Grecia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Greenland").Name.SetValueByLang("Groenlandia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Grenada").Name.SetValueByLang("Grenada", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Guadeloupe").Name.SetValueByLang("Guadeloupe", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Guam").Name.SetValueByLang("Guam", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Guatemala").Name.SetValueByLang("Guatemala", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Guinea").Name.SetValueByLang("Guinea", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Guinea-Bissau").Name.SetValueByLang("Guinea-Bissau", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Guyana").Name.SetValueByLang("Guyana", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Haiti").Name.SetValueByLang("Haiti", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Heard Island and McDonald Islands").Name.SetValueByLang("Isole Heard e McDonald", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Honduras").Name.SetValueByLang("Honduras", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Hong Kong").Name.SetValueByLang("Hong Kong", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Hungary").Name.SetValueByLang("Ungheria", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Iceland").Name.SetValueByLang("Islanda", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("India").Name.SetValueByLang("India", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Indonesia").Name.SetValueByLang("Indonesia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Iran, Islamic Republic of").Name.SetValueByLang("Iran, Repubblica Islamica", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Iraq").Name.SetValueByLang("Iraq", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Ireland, Republic of").Name.SetValueByLang("Irlanda, Repubblica di", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Israel").Name.SetValueByLang("Israele", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Italy").Name.SetValueByLang("Italia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Jamaica").Name.SetValueByLang("Giamaica", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Japan").Name.SetValueByLang("Giappone", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Jordan").Name.SetValueByLang("Giordania", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Kazakhstan").Name.SetValueByLang("Kazakhstan", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Kenya").Name.SetValueByLang("Kenia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Kiribati").Name.SetValueByLang("Kiribati", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Korea").Name.SetValueByLang("Corea", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Korea, Democratic People's Republic of").Name.SetValueByLang("Repubblica Corea, democratica popolare di", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Kuwait").Name.SetValueByLang("Kuwait", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Kyrgyzstan").Name.SetValueByLang("Kyrgyzstan", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Lao People's Democratic Republic").Name.SetValueByLang("Repubblica democratica popolare del Laos", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Latvia").Name.SetValueByLang("Lettonia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Lebanon").Name.SetValueByLang("Libano", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Lesotho").Name.SetValueByLang("Lesoto", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Liberia").Name.SetValueByLang("Liberia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Libyan Arab Jamahiriya").Name.SetValueByLang("Libia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Liechtenstein").Name.SetValueByLang("Liechtenstein", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Lithuania").Name.SetValueByLang("Lituania", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Luxembourg").Name.SetValueByLang("Luxembourg", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Macau").Name.SetValueByLang("Macau", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Macedonia").Name.SetValueByLang("Macedonia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Madagascar").Name.SetValueByLang("Madagascar", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Malawi").Name.SetValueByLang("Malawi", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Malaysia").Name.SetValueByLang("Malaysia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Maldives").Name.SetValueByLang("Maldive", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Mali").Name.SetValueByLang("Mali", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Malta").Name.SetValueByLang("Malta", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Marshall Islands").Name.SetValueByLang("Isole Marshall", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Martinique").Name.SetValueByLang("Martinique", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Mauritania").Name.SetValueByLang("Mauritania", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Mauritius").Name.SetValueByLang("Mauritius", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Mayotte").Name.SetValueByLang("Mayotte", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Mexico").Name.SetValueByLang("Messico", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Micronesia, Federated States of").Name.SetValueByLang("Micronesia, Stati Federati di", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Moldova").Name.SetValueByLang("Moldova", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Monaco").Name.SetValueByLang("Monaco", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Mongolia").Name.SetValueByLang("Mongolia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Montenegro").Name.SetValueByLang("Montenegro", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Montserrat").Name.SetValueByLang("Montserrat", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Morocco").Name.SetValueByLang("Marocco", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Mozambique").Name.SetValueByLang("Mozambico", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Myanmar").Name.SetValueByLang("Myanmar", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Namibia").Name.SetValueByLang("Namibia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Nauru").Name.SetValueByLang("Nauru", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Nepal").Name.SetValueByLang("Nepal", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Netherlands").Name.SetValueByLang("Paesi Bassi", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Netherlands Antilles").Name.SetValueByLang("Antille Olandesi", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("New Caledonia").Name.SetValueByLang("Nuova Caledonia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("New Zealand").Name.SetValueByLang("Nuova Zelanda", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Nicaragua").Name.SetValueByLang("Nicaragua", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Niger").Name.SetValueByLang("Niger", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Nigeria").Name.SetValueByLang("Nigeria", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Niue").Name.SetValueByLang("Niue", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Norfolk Island").Name.SetValueByLang("Norfolk Island", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Northern Ireland").Name.SetValueByLang("Irlanda Del Nord", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Northern Mariana Islands").Name.SetValueByLang("Isole Marianne Settentrionali", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Norway").Name.SetValueByLang("Norvegia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Oman").Name.SetValueByLang("Oman", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Pakistan").Name.SetValueByLang("Pakistan", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Palau").Name.SetValueByLang("Palau", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Panama").Name.SetValueByLang("Panama", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Papua New Guinea").Name.SetValueByLang("Papua Nuova Guinea", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Paraguay").Name.SetValueByLang("Paraguay", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Peru").Name.SetValueByLang("Perù", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Philippines").Name.SetValueByLang("Filippine", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Pitcairn").Name.SetValueByLang("Pitcairn", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Poland").Name.SetValueByLang("Polonia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Portugal").Name.SetValueByLang("Portogallo", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Puerto Rico").Name.SetValueByLang("Puerto Rico", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Qatar").Name.SetValueByLang("Qatar", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Republic of Kosovo").Name.SetValueByLang("Repubblica del Kosovo", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Réunion").Name.SetValueByLang("Réunion", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Romania").Name.SetValueByLang("Romania", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Russian Federation").Name.SetValueByLang("Federazione Russa", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Rwanda").Name.SetValueByLang("Ruanda", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Saint Helena").Name.SetValueByLang("Sant'Elena", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Saint Kitts and Nevis").Name.SetValueByLang("Saint Kitts e Nevis", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Saint Lucia").Name.SetValueByLang("Santa Lucia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Saint Pierre and Miquelon").Name.SetValueByLang("Saint Pierre e Miquelon", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Saint Vincent and the Grenadines").Name.SetValueByLang("Saint Vincent e Grenadine", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Samoa").Name.SetValueByLang("Samoa", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("San Marino").Name.SetValueByLang("San Marino", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Saudi Arabia").Name.SetValueByLang("Arabia Saudita", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Scotland").Name.SetValueByLang("Scozia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Senegal").Name.SetValueByLang("Senegal", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Serbia").Name.SetValueByLang("Serbia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Seychelles").Name.SetValueByLang("Seychelles", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Sierra Leone").Name.SetValueByLang("Sierra Leone", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Singapore").Name.SetValueByLang("Singapore", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Slovakia").Name.SetValueByLang("Slovacchia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Slovenia").Name.SetValueByLang("Slovenia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("So Tomé and Príncipe").Name.SetValueByLang("Così Tomé e Príncipe", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Solomon Islands").Name.SetValueByLang("Isole Salomone", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Somalia").Name.SetValueByLang("Somalia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("South Africa").Name.SetValueByLang("Sud Africa", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("South Georgia and the South Sandwich Islands").Name.SetValueByLang("Georgia del Sud e isole Sandwich del Sud", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Spain").Name.SetValueByLang("La Spagna", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Sri Lanka").Name.SetValueByLang("Sri Lanka", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Sudan").Name.SetValueByLang("Sudan", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Suriname").Name.SetValueByLang("Suriname", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Svalbard and Jan Mayen").Name.SetValueByLang("Svalbard e Jan Mayen", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Swaziland").Name.SetValueByLang("Swaziland", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Sweden").Name.SetValueByLang("Svezia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Switzerland").Name.SetValueByLang("Svizzera", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Syrian Arab Republic").Name.SetValueByLang("Repubblica araba siriana", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Tajikistan").Name.SetValueByLang("Tajikistan", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Tanzania, United Republic Of").Name.SetValueByLang("Tanzania, Repubblica Unita di", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Thailand").Name.SetValueByLang("Thailandia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Timor-Leste").Name.SetValueByLang("Timor-Leste", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Togo").Name.SetValueByLang("Andare", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Tokelau").Name.SetValueByLang("Tokelau", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Tonga").Name.SetValueByLang("Tonga", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Trinidad and Tobago").Name.SetValueByLang("Trinidad e Tobago", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Tunisia").Name.SetValueByLang("Tunisia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Turkey").Name.SetValueByLang("Tacchino", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Turkmenistan").Name.SetValueByLang("Turkmenistan", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Turks and Caicos Islands").Name.SetValueByLang("Turks e Caicos", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Tuvalu").Name.SetValueByLang("Tuvalu", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Uganda").Name.SetValueByLang("Uganda", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Ukraine").Name.SetValueByLang("Ucraina", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("United Arab Emirates").Name.SetValueByLang("Emirati Arabi Uniti", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("United Kingdom").Name.SetValueByLang("Regno Unito", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("United States").Name.SetValueByLang("Stati Uniti", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Uruguay").Name.SetValueByLang("Uruguay", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Uzbekistan").Name.SetValueByLang("Uzbekistan", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Vanuatu").Name.SetValueByLang("Vanuatu", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Vatican City State").Name.SetValueByLang("Città del Vaticano", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Venezuela").Name.SetValueByLang("Venezuela", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Vietnam").Name.SetValueByLang("Vietnam", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Virgin Islands, British").Name.SetValueByLang("Isole Vergini Britanniche,", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Virgin Islands, U.S.").Name.SetValueByLang("Isole Vergini statunitensi,", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Wales").Name.SetValueByLang("Galles", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Wallis and Futuna").Name.SetValueByLang("Wallis e Futuna", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Western Sahara").Name.SetValueByLang("Sahara Occidentale", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Yemen").Name.SetValueByLang("Yemen", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Yugoslavia").Name.SetValueByLang("Yugoslavia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Zambia").Name.SetValueByLang("Zambia", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("Zimbabwe").Name.SetValueByLang("Zimbabwe", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.Country).WDSFNameIdxOpen("--Unknown--").Name.SetValueByLang("--Unknown--", "it"))

        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Utils.Init.DancerClass">
<Super>BaseInit</Super>
<TimeCreated>63289,45673.127435</TimeCreated>

<Parameter name="PClassName">
<Default>DancerClass</Default>
</Parameter>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w !,"=== "_..#PClassName_" ==="
	do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data."_..#PClassName, "ClassXData")
	quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
A-5
B-4
C-3
D-2
E-1
H-9
M-7
S-6
*/
]]></Content>
</UDLText>

<XData name="ClassXData">
<Data><![CDATA[
<ClassXData>
<DancerClass><Name>A</Name><Code>5</Code></DancerClass>
<DancerClass><Name>B</Name><Code>4</Code></DancerClass>
<DancerClass><Name>C</Name><Code>2</Code></DancerClass>
<DancerClass><Name>D</Name><Code>3</Code></DancerClass>
<DancerClass><Name>E</Name><Code>6</Code></DancerClass>
<DancerClass><Name>H</Name><Code>7</Code></DancerClass>
<DancerClass><Name>M</Name><Code>8</Code></DancerClass>
<DancerClass><Name>S</Name><Code>9</Code></DancerClass>
</ClassXData>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Utils.Init.DancerClassD</DataLocation>
<DefaultData>DancerClassDefaultData</DefaultData>
<IdLocation>^Dance.Utils.Init.DancerClassD</IdLocation>
<IndexLocation>^Dance.Utils.Init.DancerClassI</IndexLocation>
<StreamLocation>^Dance.Utils.Init.DancerClassS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="DancerClassDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Utils.Init.Discipline">
<Super>BaseInit</Super>
<TimeCreated>63275,73755.722757</TimeCreated>

<Parameter name="PClassName">
<Default>Discipline</Default>
</Parameter>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    w !,"=== "_..#PClassName_" ==="
    do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data.Localization.LText", "LTextXData")
    do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data.Localization.LTextValue", "LTextValueXData")
    do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data."_..#PClassName, "ClassXData")
    quit $$$OK
]]></Implementation>
</Method>

<XData name="ClassXData">
<Data><![CDATA[
<ClassXData>
<Discipline><Name>52831462-E498-45F4-9742-211EF41E5F06</Name><Code>Ст</Code></Discipline>
<Discipline><Name>FF36D399-8475-4361-BEDB-D75AC209A4DB</Name><Code>Ла</Code></Discipline>
<Discipline><Name>EA17B27B-657A-4840-99CB-ABE90F3CF59D</Name><Code>10т</Code></Discipline>
<Discipline><Name>E4B19870-D9AB-49BF-94D3-57CC968902D5</Name><Code>6т</Code></Discipline>
<Discipline><Name>3801F313-7C38-4178-8E97-8691908ED4AD</Name><Code>8т</Code></Discipline>
<Discipline><Name>B6A3D6A0-76A7-48EE-AD46-35FB09706F0F</Name><Code>3т</Code></Discipline>
<Discipline><Name>0A4B5D08-E6CF-43FE-A799-F7E6BA05119D</Name><Code>4т</Code></Discipline>
<Discipline><Name>27B73376-C80A-419D-BD37-1C1434D8E04A</Name><Code>5т</Code></Discipline>
<Discipline><Name>379ED6B9-D447-4A3B-BADB-D80C9AABE54F</Name><Code>кубок польки</Code></Discipline>

<Discipline><Name>70983979-E74A-4340-B1CB-578D2C06FF7D</Name><Code>кубок ча-ча-ча</Code></Discipline>
<Discipline><Name>F76FD6FA-8253-43B1-A786-138CF1AE12F6</Name><Code>кубок вальса</Code></Discipline>
<Discipline><Name>FAC7D8AF-01F3-42E0-803C-CA0420B137D5</Name><Code>кубок самбы</Code></Discipline>
<Discipline><Name>452B37B4-3DDF-4610-84F7-84C25FB2E73A</Name><Code>кубок джайва</Code></Discipline>
<Discipline><Name>9587CF2F-CBEC-4978-8AEA-1638F8B5B008</Name><Code>кубок фокстрота</Code></Discipline>
<Discipline><Name>D7F00E69-490A-4B08-9E25-ACC0AD461879</Name><Code>кубок квикстепа</Code></Discipline>
</ClassXData>
]]></Data>
</XData>

<UDLText name="T">
<Content><![CDATA[
/*
-Европейская [Cт]
-Латиноамериканская [Ла]
-Двоеборье [10т]
-Сокращенное двоеборье (6 танцев) [6т]
-Сокращенное двоеборье (8 танцев) [8т]
-3 танца [3т]
-4 танца [4т]
-5 танцев [5т]
-Кубок польки [кубок польки]
-Кубок ча-ча-ча [кубок ча-ча-ча]
-Кубок вальса [кубок вальса]
-Кубок самбы [кубок самбы]
-Кубок джайва [кубок джайва]
-Кубок фокстрота [кубок фокстрота]
-Кубок квикстепа [кубок квикстепа]
*/
]]></Content>
</UDLText>

<XData name="LTextXData">
<Data><![CDATA[
<LTextXData>
<LText><Guid>52831462-E498-45F4-9742-211EF41E5F06</Guid></LText>
<LText><Guid>FF36D399-8475-4361-BEDB-D75AC209A4DB</Guid></LText>
<LText><Guid>EA17B27B-657A-4840-99CB-ABE90F3CF59D</Guid></LText>
<LText><Guid>E4B19870-D9AB-49BF-94D3-57CC968902D5</Guid></LText>
<LText><Guid>3801F313-7C38-4178-8E97-8691908ED4AD</Guid></LText>
<LText><Guid>B6A3D6A0-76A7-48EE-AD46-35FB09706F0F</Guid></LText>
<LText><Guid>0A4B5D08-E6CF-43FE-A799-F7E6BA05119D</Guid></LText>
<LText><Guid>27B73376-C80A-419D-BD37-1C1434D8E04A</Guid></LText>
<LText><Guid>379ED6B9-D447-4A3B-BADB-D80C9AABE54F</Guid></LText>

<LText><Guid>70983979-E74A-4340-B1CB-578D2C06FF7D</Guid></LText>
<LText><Guid>F76FD6FA-8253-43B1-A786-138CF1AE12F6</Guid></LText>
<LText><Guid>FAC7D8AF-01F3-42E0-803C-CA0420B137D5</Guid></LText>
<LText><Guid>452B37B4-3DDF-4610-84F7-84C25FB2E73A</Guid></LText>
<LText><Guid>9587CF2F-CBEC-4978-8AEA-1638F8B5B008</Guid></LText>
<LText><Guid>D7F00E69-490A-4B08-9E25-ACC0AD461879</Guid></LText>
</LTextXData>
]]></Data>
</XData>

<XData name="LTextValueXData">
<Data><![CDATA[
<LTextValueXData>
<LTextValue><LText>52831462-E498-45F4-9742-211EF41E5F06</LText><Value>Европейская</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>52831462-E498-45F4-9742-211EF41E5F06</LText><Value>Standard</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>52831462-E498-45F4-9742-211EF41E5F06</LText><Value>Standard</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>FF36D399-8475-4361-BEDB-D75AC209A4DB</LText><Value>Латиноамериканская</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>FF36D399-8475-4361-BEDB-D75AC209A4DB</LText><Value>Latin</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>FF36D399-8475-4361-BEDB-D75AC209A4DB</LText><Value>Latin</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>EA17B27B-657A-4840-99CB-ABE90F3CF59D</LText><Value>Двоеборье</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>EA17B27B-657A-4840-99CB-ABE90F3CF59D</LText><Value>10 dances</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>EA17B27B-657A-4840-99CB-ABE90F3CF59D</LText><Value>10 dances</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>E4B19870-D9AB-49BF-94D3-57CC968902D5</LText><Value>Сокращенное двоеборье (6 танцев)</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>E4B19870-D9AB-49BF-94D3-57CC968902D5</LText><Value>6 dances</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>E4B19870-D9AB-49BF-94D3-57CC968902D5</LText><Value>6 dances</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>3801F313-7C38-4178-8E97-8691908ED4AD</LText><Value>Сокращенное двоеборье (8 танцев)</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>3801F313-7C38-4178-8E97-8691908ED4AD</LText><Value>8 dances</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>3801F313-7C38-4178-8E97-8691908ED4AD</LText><Value>8 dances</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>B6A3D6A0-76A7-48EE-AD46-35FB09706F0F</LText><Value>3 танца</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>B6A3D6A0-76A7-48EE-AD46-35FB09706F0F</LText><Value>3 dances</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>B6A3D6A0-76A7-48EE-AD46-35FB09706F0F</LText><Value>3 dances</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>0A4B5D08-E6CF-43FE-A799-F7E6BA05119D</LText><Value>4 танца</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>0A4B5D08-E6CF-43FE-A799-F7E6BA05119D</LText><Value>4 dances</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>0A4B5D08-E6CF-43FE-A799-F7E6BA05119D</LText><Value>4 dances</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>27B73376-C80A-419D-BD37-1C1434D8E04A</LText><Value>5 танцев</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>27B73376-C80A-419D-BD37-1C1434D8E04A</LText><Value>5 dances</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>27B73376-C80A-419D-BD37-1C1434D8E04A</LText><Value>5 dances</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>379ED6B9-D447-4A3B-BADB-D80C9AABE54F</LText><Value>Кубок польки</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>379ED6B9-D447-4A3B-BADB-D80C9AABE54F</LText><Value>Polka</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>379ED6B9-D447-4A3B-BADB-D80C9AABE54F</LText><Value>Polka</Value><Lang>de</Lang></LTextValue>



<LTextValue><LText>70983979-E74A-4340-B1CB-578D2C06FF7D</LText><Value>Кубок ча-ча-ча</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>70983979-E74A-4340-B1CB-578D2C06FF7D</LText><Value>Cha cha cha</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>70983979-E74A-4340-B1CB-578D2C06FF7D</LText><Value>Cha cha cha</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>F76FD6FA-8253-43B1-A786-138CF1AE12F6</LText><Value>Кубок вальса</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>F76FD6FA-8253-43B1-A786-138CF1AE12F6</LText><Value>Waltz</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>F76FD6FA-8253-43B1-A786-138CF1AE12F6</LText><Value>Waltz</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>FAC7D8AF-01F3-42E0-803C-CA0420B137D5</LText><Value>Кубок самбы</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>FAC7D8AF-01F3-42E0-803C-CA0420B137D5</LText><Value>Samba</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>FAC7D8AF-01F3-42E0-803C-CA0420B137D5</LText><Value>Samba</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>452B37B4-3DDF-4610-84F7-84C25FB2E73A</LText><Value>Кубок джайва</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>452B37B4-3DDF-4610-84F7-84C25FB2E73A</LText><Value>Jive</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>452B37B4-3DDF-4610-84F7-84C25FB2E73A</LText><Value>Jive</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>9587CF2F-CBEC-4978-8AEA-1638F8B5B008</LText><Value>Кубок фокстрота</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>9587CF2F-CBEC-4978-8AEA-1638F8B5B008</LText><Value>Foxtrot</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>9587CF2F-CBEC-4978-8AEA-1638F8B5B008</LText><Value>Foxtrot</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>D7F00E69-490A-4B08-9E25-ACC0AD461879</LText><Value>Кубок квикстепа</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>D7F00E69-490A-4B08-9E25-ACC0AD461879</LText><Value>Quickstep</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>D7F00E69-490A-4B08-9E25-ACC0AD461879</LText><Value>Quickstep</Value><Lang>de</Lang></LTextValue>

</LTextValueXData>
]]></Data>
</XData>

<Method name="CopyValueFromEngToAnother">
<Description>
w ##class(Dance.Utils.Init.Discipline).CopyValueFromEngToAnother("it")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>newLang:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
    
        &sql(DECLARE CCur CURSOR FOR
             SELECT %NOLOCK ID
             FROM Dance_Data.Discipline)
        
        &sql(OPEN CCur)
        for{
            &sql(FETCH CCur INTO :id) 
            quit:(SQLCODE '= 0)
            
            set obj = ##class(Dance.Data.Discipline).%OpenId(id)
            $$$THROWONERROR(st, obj.Name.SetValueByLang(obj.Name.GetValueByLang("en"), newLang))
        }
        
        &sql(CLOSE CCur)
    
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Utils.Init.LTextLanguage">
<Super>BaseInit</Super>
<TimeCreated>63273,7616.57883</TimeCreated>

<Parameter name="PClassName">
<Default>LTextLanguage</Default>
</Parameter>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w !,"=== "_..#PClassName_" ==="
	do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data.Localization."_..#PClassName, "ClassXData")
	quit $$$OK
]]></Implementation>
</Method>

<XData name="ClassXData">
<Data><![CDATA[
<ClassXData>
<LTextLanguage><Name>Русский</Name><Code>ru</Code></LTextLanguage>
<LTextLanguage><Name>English</Name><Code>en</Code></LTextLanguage>
<LTextLanguage><Name>Deutsch</Name><Code>de</Code></LTextLanguage>
</ClassXData>
]]></Data>
</XData>
</Class>


<Class name="Dance.Utils.Init.Other">
<Abstract>1</Abstract>
<TimeCreated>63275,3526.148205</TimeCreated>

<Method name="GoGuids">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set out = ##class(%Library.FileCharacterStream).%New()
	set out.Filename = "E:\GUIDSSUPER2.txt"
	
	for i=1:1:1000
	{
		set guid = $SYSTEM.Util.CreateGUID()
		do out.Write(guid)
		do out.Write($$$EOL)
	}
	quit out.%Save()
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Utils.Init.PaymentSystem">
<Abstract>1</Abstract>
<TimeCreated>63970,83805.51937</TimeCreated>

<Method name="Init">
<Description>
do ##class(Dance.Utils.Init.PaymentSystem).Init()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set obj = ##class(Dance.Data.PaymentSystem).%New()
    set obj.Name = "DancePlat №1 (СТСР: ftsrpay1, WDSF/Другие: ftsrpay2)"
    set obj.Code = "DancePlat №1"
    set obj.UDSRUrl = "http://www.danceplat.ru/ftsrpay.php"
    set obj.WDSFUrl = "http://www.danceplat.ru/ftsrpay2.php"
    w !, obj.%Save()
    
    set obj = ##class(Dance.Data.PaymentSystem).%New()
    set obj.Name = "DancePlat №2 (СТСР/WDSF/Другие: ftsrpay3)"
    set obj.Code = "DancePlat №2"
    set obj.UDSRUrl = "http://www.danceplat.ru/ftsrpay3.php"
    set obj.WDSFUrl = "http://www.danceplat.ru/ftsrpay3.php"
    w !, obj.%Save()
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Utils.Init.Person">
<Abstract>1</Abstract>
<TimeCreated>63298,59345.87708</TimeCreated>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<FormalSpec>fileFullName:%String,killAll:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		if (killAll){
			&sql(DECLARE CRS1 CURSOR FOR 
		  	 	 SELECT ID
		 	 	 FROM Dance_Data.Person)	
		
			&sql(OPEN CRS1)
			for  
			{	
				&sql(FETCH CRS1 INTO :id) 
				quit:(SQLCODE '= 0)
		
				set st = ##class(Dance.Data.Person).Delete(id)
				$$$THROWONERROR(st, st)		
			}
			&sql(CLOSE CRS1)
		
			do ##class(Dance.Data.Couple).%KillExtent()
			kill ^couples
		}
		
		TCOMMIT
	}
	catch(ex){
		TROLLBACK
		
		set st = ex.AsStatus()
	}
]]></Implementation>
</Method>

<Method name="ImportFromFile">
<Description>
w ##class(Dance.Utils.Init.Person).ImportFromFile("e:\boys.csv", "M")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fileFullName:%String,gender:%Char</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	/*
	1 Номер
	2 Фамилия Имя
	3 Отчество
	4 Дата рождения
	5 Класс ST
	6 Присвоен ST
	7 Класс LA
	8 Присвоен LA
	9 Сп.разряд
	10 Разряд присвоен
	11 Фио на англ.
	12 Клуб
	13 Город/регион
	14 Старший тренер
	15 Тренер 2
	16 Тренер 3
	17 Код региона
	18 Дата перехода
	19 Номер партнера
	20 Страховка до
	*/
	set status = $$$OK
	set line = ""
	do ##class(%MessageDictionary).SetSessionLanguage("ru")
	
	try{
		TSTART

		set stream = ##class(%FileCharacterStream).%New()
	 	set stream.Filename = fileFullName
		while 'stream.AtEnd {
			set line = stream.ReadLine()
			if ($FIND(line,";") = 0) continue
			
			set propList = $LISTFROMSTRING(line, ";")
			
			set person = ##class(Dance.Data.Person).GetByNumberUSDR($LIST(propList, 1))
			
			if ($ISOBJECT(person) = 0){
				set person = ##class(Dance.Data.Person).%New()
				set person.Gender = gender
			
				//1 Номер
				set person.NumberUDSR = $LIST(propList, 1)
				
				//2 Фамилия Имя
				set person.LastName =  ##class(Dance.Data.Localization.LText).Create($P($LIST(propList, 2)," ",1), "Dance.Data.Localization.Translation;PersonLTextValue")		
				set person.FirstName =  ##class(Dance.Data.Localization.LText).Create($P($LIST(propList, 2)," ",2), "Dance.Data.Localization.Translation;PersonLTextValue")		
			
				//11 Фио на англ.
				do ##class(%MessageDictionary).SetSessionLanguage("en")
				set person.LastName.Value = $P($LIST(propList, 11)," ",1)
				set person.FirstName.Value = $P($LIST(propList, 11)," ",2)
				do ##class(%MessageDictionary).SetSessionLanguage("ru")
			}
			
			//4 Дата рождения
			set dob = $LIST(propList, 4)
			if (dob '= "") && ($LENGTH(dob) = 10) set person.DOB = $ZDATEH($REPLACE(dob,".","/"), 4)
			
			//5 Класс ST
			set person.STClass = ##class(Dance.Data.DancerClass).GetByName($REPLACE($ZCONVERT($LIST(propList, 5), "U"), "М", "M"), .status)
			if (status '= $$$OK) {
				w !,"DancerClass=["_$LIST(propList, 5)_"] not found"
			}
			
			//7 Класс LA
			set person.LAClass = ##class(Dance.Data.DancerClass).GetByName( $REPLACE($ZCONVERT($LIST(propList, 7), "U"), "М", "M"), .status)
			if (status '= $$$OK) {
				w !,"DancerClass=["_$LIST(propList, 7)_"] not found"
			}
			
			
			//12 Клуб
			set person.Club = $LIST(propList, 12)
	
			//13 Город/регион
			set person.City = $LIST(propList, 13)
	
			//14 Старший тренер
			set person.MainTrainer = $LIST(propList, 14)

			//15 Тренер 2
			//16 Тренер 3
			if ($LIST(propList, 16) '= ""){
				set person.OtherTrainers = $LIST(propList, 15)_", "_$LIST(propList, 16)
			}
			else{
				set person.OtherTrainers = $LIST(propList, 15)
			}
			
			//19 Номер партнера
			if ($LIST(propList, 19) '= "") set ^couples(person.NumberUDSR) = $LIST(propList, 19)
			
			//20 Страховка до
			set insDate = $LIST(propList, 20)
			if (insDate '= "") && ($LENGTH(insDate) = 10) set person.InsuranceValidDate = $ZDATEH($REPLACE(insDate,".","/"), 4)
			
			
			set person.Country = ##class(Dance.Data.Country).WDSFNameIdxOpen("Russian Federation")
			
			set status = person.%Save()
			if (status '= $$$OK){
				$$$THROWONERROR(status,status)
			}
		}
		
		TCOMMIT
	}
	catch(ex){
		TROLLBACK
		set status = ex.AsStatus()
		w !,line
	}
	
	quit status
]]></Implementation>
</Method>

<Method name="CreateCouples">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{
		TSTART
		
		set (firstNumber,secondNumber) = ""	
		
		for {
			set firstNumber = $O(^couples(firstNumber))
			if (firstNumber = "") quit
			
			set secondNumber = ^couples(firstNumber)
			
			set person1 = ##class(Dance.Data.Person).GetByNumber(firstNumber)
			set person2 = ##class(Dance.Data.Person).GetByNumber(secondNumber)
			
			if ($ISOBJECT(person1)=0) || ($ISOBJECT(person2)=0) {
				w !,"Not found couple => firstNumber="_firstNumber_"  secondNumber="_secondNumber
				continue
			}
		
			set (man,woman) = ""
			
			if (person1.Gender = "M"){
				set man = person1
				set woman = person2
			}
			else{
				set man = person2
				set woman = person1
			}
			
			set manId = man.%Id()
			set womanId = woman.%Id()
			set coupleExists = 0
			if (##class(Dance.Data.Couple).CommonIdxExists(man.%Id(), woman.%Id()) = 0){
				set couple = ##class(Dance.Data.Couple).%New()
				set couple.Man = man
				set couple.woman = woman
				set st = couple.%Save()
				if (st '= $$$OK){
					$$$THROWONERROR(st, st)
				}
			}
			
			kill man,woman,couple,person1,person2
		}
		
		TCOMMIT
	}
	catch(ex){
		TROLLBACK
		set status = ex.AsStatus()
		w !,"FATAL ERROR for firstNumber="_firstNumber_"  secondNumber="_secondNumber,!
	}
	do $system.OBJ.DisplayError(status) 
	q status
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Utils.Init.RSS">
<Super>BaseInit</Super>
<TimeCreated>63275,46658.047854</TimeCreated>

<Method name="Test">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ##class(Dance.Data.RSS).%KillExtent()
	
	set httprequest = ##class(%Net.HttpRequest).%New()
	set httprequest.Server = "www.worlddancesport.org"
	set httprequest.ContentType = "application/rss+xml"
	do httprequest.Get("/Calendar/Competition/Upcoming/rss")
    
 
	#dim stream As %Stream.Object = httprequest.HttpResponse.Data
	#dim reader As %XML.Reader = ##class(%XML.Reader).%New()

	set sc = reader.OpenStream(stream, "literal")
	if $$$ISERR(sc) {
		write !, $System.Status.DisplayError(sc)
		quit sc
	}

	do reader.Correlate("item", "Dance.Data.RSS")

	while reader.Next(.obj, .sc)
	{
		if $$$ISERR(sc)
		{
			write !, $System.Status.DisplayError(sc)
			quit
		}
		
		set sc = obj.%Save()
		
		if $$$ISERR(sc)
		{
			write !, $System.Status.DisplayError(sc)
			quit 
		}
		
		set obj = ""
	}
]]></Implementation>
</Method>

<XData name="RSSXData">
<Data><![CDATA[
<RSSXData>
	<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0">
<channel xml:base="http://www.worlddancesport.org/">
<title>IDSF Competition Results</title>
<link>http://www.worlddancesport.org/Calendar/Competition/Results/rss</link>
<description />
<item>
	<guid isPermaLink="false">19640</guid>
	<link>http://www.worlddancesport.org/Event/Competition/World_Cup-Marseille-19640</link>
	<title>WDSF World Cup in Marseille, France on 22 March 2014</title>
	<description>&lt;h1&gt;WDSF World Cup in Marseille, France on 22 March 2014&lt;/h1&gt;&lt;h2&gt;WDSF World Cup&lt;/h2&gt;&lt;p&gt;Contact : M. Jean Vagnol -&amp;nbsp; &lt;a href="mailto:j.vagnol@bbox.fr"&gt;j.vagnol@bbox.fr&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Organizer's website&lt;/h2&gt;&lt;p&gt;&lt;a href="http://cadmdanse.free.fr"&gt;cadmdanse.free.fr&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Competitions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;22 March 2014 &lt;a href="http://www.worlddancesport.org/Event/Competition/World_Cup-Marseille-19640/Adult-Latin-45980/Ranking"&gt;Latin Adult&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
	<a10:updated>2014-03-23T15:32:15+01:00</a10:updated>
</item>
<item>
	<guid isPermaLink="false">19689</guid>
	<link>http://www.worlddancesport.org/Event/Competition/International_Open-Marseille-19689</link>
	<title>WDSF International Open in Marseille, France on 22 March 2014</title>
	<description>&lt;h1&gt;WDSF International Open in Marseille, France on 22 March 2014&lt;/h1&gt;&lt;h2&gt;WDSF International Open&lt;/h2&gt;&lt;p&gt;Contact : M. Jean Vagnol -&amp;nbsp; &lt;a href="mailto:j.vagnol@bbox.fr"&gt;j.vagnol@bbox.fr&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Organizer's website&lt;/h2&gt;&lt;p&gt;&lt;a href="http://cadmdanse.free.fr"&gt;cadmdanse.free.fr&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Competitions&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;22 March 2014 &lt;a href="http://www.worlddancesport.org/Event/Competition/International_Open-Marseille-19689/Adult-Standard-46174/Ranking"&gt;Standard Adult&lt;/a&gt;&lt;/li&gt;&lt;li&gt;23 March 2014 &lt;a href="http://www.worlddancesport.org/Event/Competition/International_Open-Marseille-19689/Adult-Latin-46175/Ranking"&gt;Latin Adult&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
</item>
</channel></rss>
	</RSSXData>
]]></Data>
</XData>
</Class>


<Class name="Dance.Utils.Init.TaskSyncWDSFController">
<Super>%SYS.Task.Definition</Super>
<TimeCreated>63443,63387.021882</TimeCreated>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
</Method>

<Method name="SyncCompetitions">
<Description>
do ##class(Dance.Utils.TaskSyncWDSFController).SyncCompetitions()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>nowSyncSinceDate:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try{
		set syncCount = 0
		
		TSTART
		
		// wdsf date format: YYYY/MM/DD
		set prevSyncSinceDate = $GET(^Settings("Dance", "LastSyncWDSFCompetitions"), $ZD($H-1, 3))
		if (nowSyncSinceDate = ""){
			set nowSyncSinceDate = $REPLACE($ZD($ZDH($REPLACE(prevSyncSinceDate, "/", ""), 15) + 1, 3), "-", "/")
		}
		
		set wdsfData = ##class(Dance.Wdsf.ControllerAPI).GetCompetitions($REPLACE($ZD($H - 365, 3), "-", "/"), $REPLACE($ZD($H + 365, 3), "-", "/"), nowSyncSinceDate,,,,.st)
		$$$THROWONERROR(st, st)
		
		for i=1:1:wdsfData.Count(){
			do ##class(Dance.Data.CompetitionWDSF).Save(wdsfData.Get(i), .st)
			$$$THROWONERROR(st, st)
			
			set syncCount = syncCount + 1
		}		
		
		set ^Settings("Dance", "LastSyncWDSFCompetitions") = $ZD($H, 3)
		
		TCOMMIT
	}
	catch(ex){
		TROLLBACK
		set st = ex.AsStatus()	
	}
	
	quit st
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Utils.Init.TicketStatus">
<Abstract>1</Abstract>
<Super>BaseInit</Super>
<TimeCreated>63461,82932.419797</TimeCreated>

<Parameter name="PClassName">
<Default>TicketStatus</Default>
</Parameter>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    w !,"=== "_..#PClassName_" ==="
    do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data.Localization.LText", "LTextXData")
    do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data.Localization.LTextValue", "LTextValueXData")
    do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data."_..#PClassName, "ClassXData")
    
    quit $$$OK
]]></Implementation>
</Method>

<XData name="ClassXData">
<Data><![CDATA[
<ClassXData>
<TicketStatus><Name>FB9892FB-8E28-FFFF-AAAA-0ADF2410FA10</Name><Code>Paid</Code></TicketStatus>
<TicketStatus><Name>CB4CD67E-510E-FFFF-AAAA-09DA04C4EA9F</Name><Code>Canceled</Code></TicketStatus>
<TicketStatus><Name>CB4CD67E-510E-FFFF-CCCC-09DA04C4EA9F</Name><Code>Not paid</Code></TicketStatus>
</ClassXData>
]]></Data>
</XData>

<XData name="LTextXData">
<Data><![CDATA[
<LTextOrderStatusXData>
<LText><Guid>FB9892FB-8E28-FFFF-AAAA-0ADF2410FA10</Guid></LText>
<LText><Guid>CB4CD67E-510E-FFFF-AAAA-09DA04C4EA9F</Guid></LText>
<LText><Guid>CB4CD67E-510E-FFFF-CCCC-09DA04C4EA9F</Guid></LText>
</LTextOrderStatusXData>
]]></Data>
</XData>

<XData name="LTextValueXData">
<Data><![CDATA[
<LTextValueXData>
<LTextValue><LText>FB9892FB-8E28-FFFF-AAAA-0ADF2410FA10</LText><Value>Оплачено</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>FB9892FB-8E28-FFFF-AAAA-0ADF2410FA10</LText><Value>Paid</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>FB9892FB-8E28-FFFF-AAAA-0ADF2410FA10</LText><Value>Bezahlt</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>CB4CD67E-510E-FFFF-AAAA-09DA04C4EA9F</LText><Value>Отменено</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>CB4CD67E-510E-FFFF-AAAA-09DA04C4EA9F</LText><Value>Canceled</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>CB4CD67E-510E-FFFF-AAAA-09DA04C4EA9F</LText><Value>Storniert</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>CB4CD67E-510E-FFFF-CCCC-09DA04C4EA9F</LText><Value>Не оплачено</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>CB4CD67E-510E-FFFF-CCCC-09DA04C4EA9F</LText><Value>Not paid</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>CB4CD67E-510E-FFFF-CCCC-09DA04C4EA9F</LText><Value>Nicht bezahlt</Value><Lang>de</Lang></LTextValue>

</LTextValueXData>
]]></Data>
</XData>

<Method name="SetItalian">
<Description>
w ##class(Dance.Utils.Init.TicketStatus).SetItalian()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        $$$THROWONERROR(st, ##class(Dance.Data.TicketStatus).CodeIdxOpen("Paid").Name.SetValueByLang("Pagato", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.TicketStatus).CodeIdxOpen("Canceled").Name.SetValueByLang("Annullato", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.TicketStatus).CodeIdxOpen("Not paid").Name.SetValueByLang("Non pagato", "it"))
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Utils.Init.TicketStatusD</DataLocation>
<DefaultData>TicketStatusDefaultData</DefaultData>
<IdLocation>^Dance.Utils.Init.TicketStatusD</IdLocation>
<IndexLocation>^Dance.Utils.Init.TicketStatusI</IndexLocation>
<StreamLocation>^Dance.Utils.Init.TicketStatusS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="TicketStatusDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Utils.Init.Tournament">
<Abstract>1</Abstract>
<TimeCreated>63302,44719.895222</TimeCreated>

<Method name="ImportTestData">
<Description>
w ##class(Dance.Utils.Init.Tournament).ImportTestData()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART

		set tournaments = ##class(%ListOfObjects).%New()
		
		set data = ##class(%ZEN.proxyObject).%New()
		set data.name = "Турнир 1"		
    	set data.startDate = "2014-04-01"
    	set data.endDate = "2014-04-03"
    	set data.statusId = 1
    	set data.classId = 2
    	set data.organizersite = "www.site.com"
    	
    	do tournaments.Insert(data)
		
		set data = ##class(%ZEN.proxyObject).%New()
		set data.name = "Турнир 2"		
    	set data.startDate = "2014-03-21"
    	set data.endDate = "2014-03-25"
    	set data.statusId = 3
    	set data.classId = 8
    	set data.organizersite = "www.site2.com"
    	
		do tournaments.Insert(data)		
      	
      	for i=1:1:tournaments.Count(){
	      	set data = tournaments.GetAt(i)
	      	
		    if (data.id = ""){
	      		set tournament = ##class(Dance.Data.Tournament).%New()
	      		set tournament.Name = ##class(Dance.Data.Localization.LText).Create(data.name)
	      	}
	      	else{
		      	set tournament = ##class(Dance.Data.Tournament).%OpenId(data.id)
	      		set tournament.Name.Value = data.name
	      	}
	      	
	      	set tournament.StartDate = $ZDATEH(data.startDate, 15)
	      	set tournament.EndDate = $ZDATEH(data.endDate, 15)
	      	set tournament.OrganizerSite = data.organizersite
	      	set tournament.TStatus = ##class(Dance.Data.TournamentStatus).%OpenId(data.statusId)
	      	set tournament.TClass = ##class(Dance.Data.TournamentClass).%OpenId(data.classId)
	      		
	      	set st = tournament.%Save()
	      	if $$$ISERR(st) $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("SaveTournamentError"," | "_st))
      	
      	}
      	
      	/*
      	//===================================================================
      	set competitions = ##class(%ListOfObjects).%New()
		set tournament = ##class(Dance.Data.Tournament).%OpenId(2)
      	
		set data = ##class(%ZEN.proxyObject).%New()
		set data.name = "Группа 1"
		set data.startDate = "2014-04-01"
		set data.startTime = "15:00"
		set data.price = 2343
		set data.disciplineId = 1
		set data.ageCategoryId = 2
		set data.dancerClasses = ##class(%ListOfObjects).%New()
		do data.dancerClasses.Insert(##class(Dance.Web.JsonDancerClass).ConvertToProxyObject(##class(Dance.Data.DancerClass).%OpenId(1)))
		do data.dancerClasses.Insert(##class(Dance.Web.JsonDancerClass).ConvertToProxyObject(##class(Dance.Data.DancerClass).%OpenId(2)))
		do data.dancerClasses.Insert(##class(Dance.Web.JsonDancerClass).ConvertToProxyObject(##class(Dance.Data.DancerClass).%OpenId(3)))
	
		do competitions.Insert(data)	
		kill data
		
		set data = ##class(%ZEN.proxyObject).%New()
		set data.name = "Группа 2"
		set data.startDate = "2014-04-02"
		set data.startTime = "16:00"
		set data.price = 345
		set data.disciplineId = 2
		set data.ageCategoryId = 1
		set data.dancerClasses = ##class(%ListOfObjects).%New()
		do data.dancerClasses.Insert(##class(Dance.Web.JsonDancerClass).ConvertToProxyObject(##class(Dance.Data.DancerClass).%OpenId(4)))
		do data.dancerClasses.Insert(##class(Dance.Web.JsonDancerClass).ConvertToProxyObject(##class(Dance.Data.DancerClass).%OpenId(3)))
		do data.dancerClasses.Insert(##class(Dance.Web.JsonDancerClass).ConvertToProxyObject(##class(Dance.Data.DancerClass).%OpenId(1)))
	
		do competitions.Insert(data)	
		kill data
	
		set data3 = ##class(%ZEN.proxyObject).%New()
		set data3.name = "Группа 3"
		set data3.startDate = "2014-04-02"
		set data3.startTime = "14:00"
		set data3.price = 3453
		set data3.disciplineId = 4
		set data3.ageCategoryId = 4
		set data3.dancerClasses = ##class(%ListOfObjects).%New()
		do data3.dancerClasses.Insert(##class(Dance.Web.JsonDancerClass).ConvertToProxyObject(##class(Dance.Data.DancerClass).%OpenId(1)))
	
		do competitions.Insert(data3)	
		
		kill data
		
		for i=1:1:3{
			set data = competitions.GetAt(i)
			w !,data.name
			
			if (data.id = ""){
	      		set competition = ##class(Dance.Data.Competition).%New()
	      		set competition.Name = ##class(Dance.Data.Localization.LText).Create(data.name)
	      		set competition.Tournament = tournament
	      	}
	      	else{
		      	set competition = tournament.Competitions.GetAt(data.id)
	      		set competition.Name.Value = data.name
	      	}
	      	
	      	set competition.StartDate = $ZDATEH(data.startDate, 15)
	      	set competition.StartTime = ##class(%Library.Time).DisplayToLogical(data.startTime)
	      	
	      	set competition.Discipline = ##class(Dance.Data.Discipline).%OpenId(data.disciplineId)
	      	set competition.Price = data.price
	      	
	      	// AgeCategories array
	      	s competition.AgeCategory = ##class(Dance.Data.AgeCategory).%OpenId(data.ageCategoryId)
	        
		    // DancerClasses array
		    for i=1:1:data.dancerClasses.Count(){
		      	
		      	set dancerClasses = ##class(Dance.Data.DancerClass).%OpenId(data.dancerClasses.GetAt(i).id,,.st)
		      	$$$THROWONERROR(st,st)
		    	do competition.DancerClasses.SetAt(dancerClasses, dancerClasses.%Id())
		    }
	      	
	      	set st = competition.%Save()
	      	if $$$ISERR(st) $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("SaveCompetitionError"," | "_st))
    		kill competition
		}
		*/	
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}
			
	quit st
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Utils.Init.TournamentRank">
<Abstract>1</Abstract>
<Super>BaseInit</Super>
<TimeCreated>63289,45056.357648</TimeCreated>

<Parameter name="PClassName">
<Default>TournamentRank</Default>
</Parameter>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    w !,"=== "_..#PClassName_" ==="
    do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data.Localization.LText", "LTextXData")
    do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data.Localization.LTextValue", "LTextValueXData")
    do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data."_..#PClassName, "ClassXData")
    quit $$$OK
]]></Implementation>
</Method>

<XData name="ClassXData">
<Data><![CDATA[
<ClassXData>
<TournamentRank><Name>CBC20F73-49FC-4325-82AE-FEA3AE61DC20</Name><ShortName>10877D23-6841-450E-B53C-C8F5BBDA6447</ShortName><Code>МК</Code></TournamentRank>
<TournamentRank><Name>3217E815-4F35-4ED6-8973-08DEA840C5C7</Name><ShortName>03DD8AD8-9857-4D34-8EF5-FB4AC92C9A3A</ShortName><Code>РС</Code></TournamentRank>
<TournamentRank><Name>48A389A8-7E00-4CD7-94C0-BCB53F7235E3</Name><ShortName>55B7C7B1-D782-4E68-949B-6DC9A42D4DFB</ShortName><Code>МС</Code></TournamentRank>
<TournamentRank><Name>2D70F332-32CC-449E-ABF1-B07772A4AF0E</Name><ShortName>89483DF0-D61B-468E-9EED-688BA75E852F</ShortName><Code>рф</Code></TournamentRank>
<TournamentRank><Name>BD169385-BB73-4608-ACC2-0652F8D1FFE1</Name><ShortName>16F57E3F-E1E5-466D-8ED9-087E91B11196</ShortName><Code>ПМ</Code></TournamentRank>
<TournamentRank><Name>EAFD525E-5D0E-48C4-B7D6-97A89F9C2FC9</Name><ShortName>DD320337-19E6-4D5C-92D9-C43E94AE600C</ShortName><Code>ПФ</Code></TournamentRank>
<TournamentRank><Name>61E3DC65-5C07-44C8-A96F-5652B19A4844</Name><ShortName>2A0A9E83-E078-437A-BB8F-67E85F164693</ShortName><Code>ПР</Code></TournamentRank>
<TournamentRank><Name>ABF7A9E3-50D1-4101-BA41-70AB2188DC28</Name><ShortName>08308466-FDA3-4566-9700-4BB7C0797E17</ShortName><Code>ПККМ</Code></TournamentRank>
<TournamentRank><Name>F6D97D6F-BFED-484B-BC60-97FF165D4AF8</Name><ShortName>794E0252-1A11-4792-B7AB-7AA9510761E2</ShortName><Code>ПМ Формейшн</Code></TournamentRank>
<TournamentRank><Name>9273C1E7-B9D2-41FA-AA70-57DFA3B5D180</Name><ShortName>F384FA22-E814-4304-B2BD-D8B1F8D18D97</ShortName><Code>ПМ Ансамбли</Code></TournamentRank>



<TournamentRank><Name>878BB6F1-BB88-4B95-8532-2F5B37A9F0F5</Name><ShortName>65FBC39B-E418-4C8E-85D9-744F1833699C</ShortName><Code>Первенство "Буревестник"</Code></TournamentRank>
<TournamentRank><Name>1B316A8B-BB04-4026-BA43-5CD8972578EE</Name><ShortName>CA862D40-8530-4E72-B8A6-8446D2ABF32F</ShortName><Code>ЧМ</Code></TournamentRank>
<TournamentRank><Name>9EF2CD24-4918-45C7-846D-D40CE2FC2870</Name><ShortName>C4DBB87B-E916-4317-825C-0119A43E670E</ShortName><Code>ЧР</Code></TournamentRank>
<TournamentRank><Name>CB1F0E64-B709-4BC4-BAE4-743D890D4F90</Name><ShortName>A60A7510-0ECE-4361-962D-D6E529EDD6A0</ShortName><Code>ЧККМ</Code></TournamentRank>
<TournamentRank><Name>258F7C16-B8F2-4B06-B75B-5DF5C9DC15AA</Name><ShortName>3C6049AD-92BB-4B74-BB7D-05E71EFF1D1C</ShortName><Code>ЧМ Формейшн</Code></TournamentRank>
<TournamentRank><Name>32AC4CC9-ED62-453B-8768-B8C00F3E8414</Name><ShortName>8B1ACFAC-F64C-4117-A65E-FBE415412D86</ShortName><Code>ЧККР</Code></TournamentRank>
<TournamentRank><Name>39AE1DD8-59C5-4D1E-B964-32274E307A22</Name><ShortName>B7080054-7141-4614-8371-3C1C0ECC7A3A</ShortName><Code>ЧР Секвей</Code></TournamentRank>
<TournamentRank><Name>786F988F-6CE1-46CA-947F-8D43FFA5FA46</Name><ShortName>E2A22759-740D-463E-8177-15CA22FF090E</ShortName><Code>Чемпионат Европы</Code></TournamentRank>
<TournamentRank><Name>D9FB1A2F-4451-4723-9EFC-963B668FDCDA</Name><ShortName>E8C5F83D-2AE0-4A5B-A94D-CE0AEA50EC73</ShortName><Code>Чемпионат Европы среди студентов</Code></TournamentRank>
<TournamentRank><Name>7804B605-3214-4375-B9FB-CAF4FEA2B49A</Name><ShortName>65EF2A2C-5C09-459E-AB8B-264D07D6B236</ShortName><Code>ЧР среди студентов</Code></TournamentRank>


<TournamentRank><Name>A1CB5952-D0EF-45A0-ACBC-CE9C78DF520D</Name><ShortName>E6DD641F-FF98-440B-85E3-89AD3C5933E9</ShortName><Code>ЧМ по секвею</Code></TournamentRank>
<TournamentRank><Name>D034B917-5466-4C6F-82E9-5736803423D5</Name><ShortName>ACA69E1E-04B2-4C3D-8432-7EDB3AAD73AD</ShortName><Code>ЧМ среди ансамблей</Code></TournamentRank>
<TournamentRank><Name>712AC66D-F748-4C5F-BD1E-A704ED085713</Name><ShortName>2CCD6B7E-1280-4A13-ADED-1857325C6FED</ShortName><Code>ЧР ансамблей</Code></TournamentRank>
<TournamentRank><Name>80B78B2F-46DA-4084-AD0D-A386319390DD</Name><ShortName>1F05DF59-BFA7-4D3F-8B13-9947803BC38D</ShortName><Code>ПВ</Code></TournamentRank>
<TournamentRank><Name>4F7A79A8-B79F-48A2-BE3D-88C70496BB7B</Name><ShortName>897F06F6-34E8-4E21-8126-8CD51D4C8010</ShortName><Code>ЧМ среди студентов</Code></TournamentRank>
<TournamentRank><Name>D235F88B-0625-411D-BC1F-6019D01E298E</Name><ShortName>AC0BA1CD-2FBA-4DE7-93D5-F5B9BCC746C8</ShortName><Code>Первенство СТСР</Code></TournamentRank>
</ClassXData>
]]></Data>
</XData>

<XData name="LTextXData">
<Data><![CDATA[
<LTextXData>
<LText><Guid>CBC20F73-49FC-4325-82AE-FEA3AE61DC20</Guid></LText>
<LText><Guid>10877D23-6841-450E-B53C-C8F5BBDA6447</Guid></LText>

<LText><Guid>3217E815-4F35-4ED6-8973-08DEA840C5C7</Guid></LText>
<LText><Guid>03DD8AD8-9857-4D34-8EF5-FB4AC92C9A3A</Guid></LText>

<LText><Guid>48A389A8-7E00-4CD7-94C0-BCB53F7235E3</Guid></LText>
<LText><Guid>55B7C7B1-D782-4E68-949B-6DC9A42D4DFB</Guid></LText>

<LText><Guid>2D70F332-32CC-449E-ABF1-B07772A4AF0E</Guid></LText>
<LText><Guid>89483DF0-D61B-468E-9EED-688BA75E852F</Guid></LText>

<LText><Guid>BD169385-BB73-4608-ACC2-0652F8D1FFE1</Guid></LText>
<LText><Guid>16F57E3F-E1E5-466D-8ED9-087E91B11196</Guid></LText>

<LText><Guid>EAFD525E-5D0E-48C4-B7D6-97A89F9C2FC9</Guid></LText>
<LText><Guid>DD320337-19E6-4D5C-92D9-C43E94AE600C</Guid></LText>

<LText><Guid>61E3DC65-5C07-44C8-A96F-5652B19A4844</Guid></LText>
<LText><Guid>2A0A9E83-E078-437A-BB8F-67E85F164693</Guid></LText>

<LText><Guid>ABF7A9E3-50D1-4101-BA41-70AB2188DC28</Guid></LText>
<LText><Guid>08308466-FDA3-4566-9700-4BB7C0797E17</Guid></LText>

<LText><Guid>F6D97D6F-BFED-484B-BC60-97FF165D4AF8</Guid></LText>
<LText><Guid>794E0252-1A11-4792-B7AB-7AA9510761E2</Guid></LText>

<LText><Guid>9273C1E7-B9D2-41FA-AA70-57DFA3B5D180</Guid></LText>
<LText><Guid>F384FA22-E814-4304-B2BD-D8B1F8D18D97</Guid></LText>




<LText><Guid>878BB6F1-BB88-4B95-8532-2F5B37A9F0F5</Guid></LText>
<LText><Guid>65FBC39B-E418-4C8E-85D9-744F1833699C</Guid></LText>

<LText><Guid>1B316A8B-BB04-4026-BA43-5CD8972578EE</Guid></LText>
<LText><Guid>CA862D40-8530-4E72-B8A6-8446D2ABF32F</Guid></LText>

<LText><Guid>9EF2CD24-4918-45C7-846D-D40CE2FC2870</Guid></LText>
<LText><Guid>C4DBB87B-E916-4317-825C-0119A43E670E</Guid></LText>

<LText><Guid>CB1F0E64-B709-4BC4-BAE4-743D890D4F90</Guid></LText>
<LText><Guid>A60A7510-0ECE-4361-962D-D6E529EDD6A0</Guid></LText>

<LText><Guid>258F7C16-B8F2-4B06-B75B-5DF5C9DC15AA</Guid></LText>
<LText><Guid>3C6049AD-92BB-4B74-BB7D-05E71EFF1D1C</Guid></LText>

<LText><Guid>32AC4CC9-ED62-453B-8768-B8C00F3E8414</Guid></LText>
<LText><Guid>8B1ACFAC-F64C-4117-A65E-FBE415412D86</Guid></LText>

<LText><Guid>39AE1DD8-59C5-4D1E-B964-32274E307A22</Guid></LText>
<LText><Guid>B7080054-7141-4614-8371-3C1C0ECC7A3A</Guid></LText>

<LText><Guid>786F988F-6CE1-46CA-947F-8D43FFA5FA46</Guid></LText>
<LText><Guid>E2A22759-740D-463E-8177-15CA22FF090E</Guid></LText>

<LText><Guid>D9FB1A2F-4451-4723-9EFC-963B668FDCDA</Guid></LText>
<LText><Guid>E8C5F83D-2AE0-4A5B-A94D-CE0AEA50EC73</Guid></LText>

<LText><Guid>7804B605-3214-4375-B9FB-CAF4FEA2B49A</Guid></LText>
<LText><Guid>65EF2A2C-5C09-459E-AB8B-264D07D6B236</Guid></LText>



<LText><Guid>A1CB5952-D0EF-45A0-ACBC-CE9C78DF520D</Guid></LText>
<LText><Guid>E6DD641F-FF98-440B-85E3-89AD3C5933E9</Guid></LText>

<LText><Guid>D034B917-5466-4C6F-82E9-5736803423D5</Guid></LText>
<LText><Guid>ACA69E1E-04B2-4C3D-8432-7EDB3AAD73AD</Guid></LText>

<LText><Guid>712AC66D-F748-4C5F-BD1E-A704ED085713</Guid></LText>
<LText><Guid>2CCD6B7E-1280-4A13-ADED-1857325C6FED</Guid></LText>

<LText><Guid>80B78B2F-46DA-4084-AD0D-A386319390DD</Guid></LText>
<LText><Guid>1F05DF59-BFA7-4D3F-8B13-9947803BC38D</Guid></LText>

<LText><Guid>4F7A79A8-B79F-48A2-BE3D-88C70496BB7B</Guid></LText>
<LText><Guid>897F06F6-34E8-4E21-8126-8CD51D4C8010</Guid></LText>

<LText><Guid>D235F88B-0625-411D-BC1F-6019D01E298E</Guid></LText>
<LText><Guid>AC0BA1CD-2FBA-4DE7-93D5-F5B9BCC746C8</Guid></LText>

</LTextXData>
]]></Data>
</XData>

<XData name="LTextValueXData">
<Data><![CDATA[
<LTextValueXData>
<LTextValue><LText>CBC20F73-49FC-4325-82AE-FEA3AE61DC20</LText><Value>Межклубное соревнование</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>CBC20F73-49FC-4325-82AE-FEA3AE61DC20</LText><Value>Interdojo competition</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>CBC20F73-49FC-4325-82AE-FEA3AE61DC20</LText><Value>Interdojo competition</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>10877D23-6841-450E-B53C-C8F5BBDA6447</LText><Value>МК</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>10877D23-6841-450E-B53C-C8F5BBDA6447</LText><Value>IC</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>10877D23-6841-450E-B53C-C8F5BBDA6447</LText><Value>IC</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>3217E815-4F35-4ED6-8973-08DEA840C5C7</LText><Value>Российское соревнование</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>3217E815-4F35-4ED6-8973-08DEA840C5C7</LText><Value>Russian competition</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>3217E815-4F35-4ED6-8973-08DEA840C5C7</LText><Value>Russian competition</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>03DD8AD8-9857-4D34-8EF5-FB4AC92C9A3A</LText><Value>РС</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>03DD8AD8-9857-4D34-8EF5-FB4AC92C9A3A</LText><Value>RC</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>03DD8AD8-9857-4D34-8EF5-FB4AC92C9A3A</LText><Value>RC</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>48A389A8-7E00-4CD7-94C0-BCB53F7235E3</LText><Value>Международное соревнование</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>48A389A8-7E00-4CD7-94C0-BCB53F7235E3</LText><Value>International competition</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>48A389A8-7E00-4CD7-94C0-BCB53F7235E3</LText><Value>International competition</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>55B7C7B1-D782-4E68-949B-6DC9A42D4DFB</LText><Value>МС</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>55B7C7B1-D782-4E68-949B-6DC9A42D4DFB</LText><Value>InC</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>55B7C7B1-D782-4E68-949B-6DC9A42D4DFB</LText><Value>InC</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>2D70F332-32CC-449E-ABF1-B07772A4AF0E</LText><Value>Рейтинг МФТС</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>2D70F332-32CC-449E-ABF1-B07772A4AF0E</LText><Value>Rating MFDS</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>2D70F332-32CC-449E-ABF1-B07772A4AF0E</LText><Value>Rating MFDS</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>89483DF0-D61B-468E-9EED-688BA75E852F</LText><Value>РФ</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>89483DF0-D61B-468E-9EED-688BA75E852F</LText><Value>RF</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>89483DF0-D61B-468E-9EED-688BA75E852F</LText><Value>RF</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>BD169385-BB73-4608-ACC2-0652F8D1FFE1</LText><Value>Первенство Москвы</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>BD169385-BB73-4608-ACC2-0652F8D1FFE1</LText><Value>Championship of Moscow</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>BD169385-BB73-4608-ACC2-0652F8D1FFE1</LText><Value>Championship of Moscow</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>16F57E3F-E1E5-466D-8ED9-087E91B11196</LText><Value>ПМ</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>16F57E3F-E1E5-466D-8ED9-087E91B11196</LText><Value>CM</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>16F57E3F-E1E5-466D-8ED9-087E91B11196</LText><Value>CM</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>EAFD525E-5D0E-48C4-B7D6-97A89F9C2FC9</LText><Value>Первенство МФТС</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>EAFD525E-5D0E-48C4-B7D6-97A89F9C2FC9</LText><Value>Championship of MFDS</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>EAFD525E-5D0E-48C4-B7D6-97A89F9C2FC9</LText><Value>Championship of MFDS</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>DD320337-19E6-4D5C-92D9-C43E94AE600C</LText><Value>ПФ</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>DD320337-19E6-4D5C-92D9-C43E94AE600C</LText><Value>CF</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>DD320337-19E6-4D5C-92D9-C43E94AE600C</LText><Value>CF</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>61E3DC65-5C07-44C8-A96F-5652B19A4844</LText><Value>Первенство России</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>61E3DC65-5C07-44C8-A96F-5652B19A4844</LText><Value>Championship of Russian</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>61E3DC65-5C07-44C8-A96F-5652B19A4844</LText><Value>Championship of Russian</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>2A0A9E83-E078-437A-BB8F-67E85F164693</LText><Value>ПР</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>2A0A9E83-E078-437A-BB8F-67E85F164693</LText><Value>CR</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>2A0A9E83-E078-437A-BB8F-67E85F164693</LText><Value>CR</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>ABF7A9E3-50D1-4101-BA41-70AB2188DC28</LText><Value>Первенство Клубных Команд Москвы</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>ABF7A9E3-50D1-4101-BA41-70AB2188DC28</LText><Value>Championship club team in Moscow</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>ABF7A9E3-50D1-4101-BA41-70AB2188DC28</LText><Value>Championship club team in Moscow</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>08308466-FDA3-4566-9700-4BB7C0797E17</LText><Value>ПККМ</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>08308466-FDA3-4566-9700-4BB7C0797E17</LText><Value>CCTM</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>08308466-FDA3-4566-9700-4BB7C0797E17</LText><Value>CCTM</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>F6D97D6F-BFED-484B-BC60-97FF165D4AF8</LText><Value>Первенство Москвы по формейшн</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>F6D97D6F-BFED-484B-BC60-97FF165D4AF8</LText><Value>Championship of Moscow on Formations</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>F6D97D6F-BFED-484B-BC60-97FF165D4AF8</LText><Value>Championship of Moscow on Formations</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>794E0252-1A11-4792-B7AB-7AA9510761E2</LText><Value>ПМ Формейшн</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>794E0252-1A11-4792-B7AB-7AA9510761E2</LText><Value>CM Formations</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>794E0252-1A11-4792-B7AB-7AA9510761E2</LText><Value>CM Formations</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>9273C1E7-B9D2-41FA-AA70-57DFA3B5D180</LText><Value>Первенство Москвы среди ансамблей</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>9273C1E7-B9D2-41FA-AA70-57DFA3B5D180</LText><Value>Moscow championship of ensembles</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>9273C1E7-B9D2-41FA-AA70-57DFA3B5D180</LText><Value>Moscow championship of ensembles</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>F384FA22-E814-4304-B2BD-D8B1F8D18D97</LText><Value>ПМ Ансамбли</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>F384FA22-E814-4304-B2BD-D8B1F8D18D97</LText><Value>CM Ensembles</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>F384FA22-E814-4304-B2BD-D8B1F8D18D97</LText><Value>CM Ensembles</Value><Lang>de</Lang></LTextValue>




<LTextValue><LText>878BB6F1-BB88-4B95-8532-2F5B37A9F0F5</LText><Value>Первенство "Буревестник"</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>878BB6F1-BB88-4B95-8532-2F5B37A9F0F5</LText><Value>Championship of "Petrel"</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>878BB6F1-BB88-4B95-8532-2F5B37A9F0F5</LText><Value>Championship of "Petrel"</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>65FBC39B-E418-4C8E-85D9-744F1833699C</LText><Value>Первенство "Буревестник"</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>65FBC39B-E418-4C8E-85D9-744F1833699C</LText><Value>Championship of "Petrel"</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>65FBC39B-E418-4C8E-85D9-744F1833699C</LText><Value>Championship of "Petrel"</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>1B316A8B-BB04-4026-BA43-5CD8972578EE</LText><Value>Чемпионат Москвы</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>1B316A8B-BB04-4026-BA43-5CD8972578EE</LText><Value>Moscow Championship</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>1B316A8B-BB04-4026-BA43-5CD8972578EE</LText><Value>Moscow Championship</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>CA862D40-8530-4E72-B8A6-8446D2ABF32F</LText><Value>ЧМ</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>CA862D40-8530-4E72-B8A6-8446D2ABF32F</LText><Value>MC</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>CA862D40-8530-4E72-B8A6-8446D2ABF32F</LText><Value>MC</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>9EF2CD24-4918-45C7-846D-D40CE2FC2870</LText><Value>Чемпионат России</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>9EF2CD24-4918-45C7-846D-D40CE2FC2870</LText><Value>Russian Championship</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>9EF2CD24-4918-45C7-846D-D40CE2FC2870</LText><Value>Russian Championship</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>C4DBB87B-E916-4317-825C-0119A43E670E</LText><Value>ЧР</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>C4DBB87B-E916-4317-825C-0119A43E670E</LText><Value>RC</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>C4DBB87B-E916-4317-825C-0119A43E670E</LText><Value>RC</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>CB1F0E64-B709-4BC4-BAE4-743D890D4F90</LText><Value>Чемпионат Клубных Команд Москвы</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>CB1F0E64-B709-4BC4-BAE4-743D890D4F90</LText><Value>Championship club team in Moscow</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>CB1F0E64-B709-4BC4-BAE4-743D890D4F90</LText><Value>Championship club team in Moscow</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>A60A7510-0ECE-4361-962D-D6E529EDD6A0</LText><Value>ЧККМ</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>A60A7510-0ECE-4361-962D-D6E529EDD6A0</LText><Value>CCTM</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>A60A7510-0ECE-4361-962D-D6E529EDD6A0</LText><Value>CCTM</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>258F7C16-B8F2-4B06-B75B-5DF5C9DC15AA</LText><Value>Чемпионат Москвы по формейшн</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>258F7C16-B8F2-4B06-B75B-5DF5C9DC15AA</LText><Value>Championship of Moscow Formations</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>258F7C16-B8F2-4B06-B75B-5DF5C9DC15AA</LText><Value>Championship of Moscow Formations</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>3C6049AD-92BB-4B74-BB7D-05E71EFF1D1C</LText><Value>ЧМ Формейшн</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>3C6049AD-92BB-4B74-BB7D-05E71EFF1D1C</LText><Value>CM Formations</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>3C6049AD-92BB-4B74-BB7D-05E71EFF1D1C</LText><Value>CM Formations</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>32AC4CC9-ED62-453B-8768-B8C00F3E8414</LText><Value>Чемпионат Клубных Команд России</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>32AC4CC9-ED62-453B-8768-B8C00F3E8414</LText><Value>Russian championship club teams</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>32AC4CC9-ED62-453B-8768-B8C00F3E8414</LText><Value>Russian championship club teams</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>8B1ACFAC-F64C-4117-A65E-FBE415412D86</LText><Value>ЧККР</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>8B1ACFAC-F64C-4117-A65E-FBE415412D86</LText><Value>RCCT</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>8B1ACFAC-F64C-4117-A65E-FBE415412D86</LText><Value>RCCT</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>39AE1DD8-59C5-4D1E-B964-32274E307A22</LText><Value>Чемпионат России по секвею</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>39AE1DD8-59C5-4D1E-B964-32274E307A22</LText><Value>Championship of Russia on sequence dancing</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>39AE1DD8-59C5-4D1E-B964-32274E307A22</LText><Value>Championship of Russia on sequence dancing</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>B7080054-7141-4614-8371-3C1C0ECC7A3A</LText><Value>ЧР Секвей</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>B7080054-7141-4614-8371-3C1C0ECC7A3A</LText><Value>CR sequence dancing</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>B7080054-7141-4614-8371-3C1C0ECC7A3A</LText><Value>CR sequence dancing</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>786F988F-6CE1-46CA-947F-8D43FFA5FA46</LText><Value>Чемпионат Европы</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>786F988F-6CE1-46CA-947F-8D43FFA5FA46</LText><Value>European Championship</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>786F988F-6CE1-46CA-947F-8D43FFA5FA46</LText><Value>European Championship</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>E2A22759-740D-463E-8177-15CA22FF090E</LText><Value>Чемпионат Европы</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>E2A22759-740D-463E-8177-15CA22FF090E</LText><Value>European Championship</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>E2A22759-740D-463E-8177-15CA22FF090E</LText><Value>European Championship</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>D9FB1A2F-4451-4723-9EFC-963B668FDCDA</LText><Value>Чемпионат Европы среди студентов</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>D9FB1A2F-4451-4723-9EFC-963B668FDCDA</LText><Value>European Championship students</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>D9FB1A2F-4451-4723-9EFC-963B668FDCDA</LText><Value>European Championship students</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>E8C5F83D-2AE0-4A5B-A94D-CE0AEA50EC73</LText><Value>Чемпионат Европы среди студентов</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>E8C5F83D-2AE0-4A5B-A94D-CE0AEA50EC73</LText><Value>European Championship students</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>E8C5F83D-2AE0-4A5B-A94D-CE0AEA50EC73</LText><Value>European Championship students</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>7804B605-3214-4375-B9FB-CAF4FEA2B49A</LText><Value>Чемпионат России среди студентов</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>7804B605-3214-4375-B9FB-CAF4FEA2B49A</LText><Value>Championship of Russia among students</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>7804B605-3214-4375-B9FB-CAF4FEA2B49A</LText><Value>Championship of Russia among students</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>65EF2A2C-5C09-459E-AB8B-264D07D6B236</LText><Value>ЧР среди студентов</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>65EF2A2C-5C09-459E-AB8B-264D07D6B236</LText><Value>CR among students</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>65EF2A2C-5C09-459E-AB8B-264D07D6B236</LText><Value>CR among students</Value><Lang>de</Lang></LTextValue>





<LTextValue><LText>A1CB5952-D0EF-45A0-ACBC-CE9C78DF520D</LText><Value>Чемпионат Москвы по секвею</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>A1CB5952-D0EF-45A0-ACBC-CE9C78DF520D</LText><Value>Championship of Moscow on sequence dancing</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>A1CB5952-D0EF-45A0-ACBC-CE9C78DF520D</LText><Value>Championship of Moscow on sequence dancing</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>E6DD641F-FF98-440B-85E3-89AD3C5933E9</LText><Value>ЧМ по секвею</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>E6DD641F-FF98-440B-85E3-89AD3C5933E9</LText><Value>CM on sequence dancing</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>E6DD641F-FF98-440B-85E3-89AD3C5933E9</LText><Value>CM on sequence dancing</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>D034B917-5466-4C6F-82E9-5736803423D5</LText><Value>Чемпионат Москвы среди ансамблей</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>D034B917-5466-4C6F-82E9-5736803423D5</LText><Value>Moscow Championship of ensembles</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>D034B917-5466-4C6F-82E9-5736803423D5</LText><Value>Moscow Championship of ensembles</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>ACA69E1E-04B2-4C3D-8432-7EDB3AAD73AD</LText><Value>ЧМ среди ансамблей</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>ACA69E1E-04B2-4C3D-8432-7EDB3AAD73AD</LText><Value>CM of ensembles</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>ACA69E1E-04B2-4C3D-8432-7EDB3AAD73AD</LText><Value>CM of ensembles</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>712AC66D-F748-4C5F-BD1E-A704ED085713</LText><Value>Чемпионат России ансамблей</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>712AC66D-F748-4C5F-BD1E-A704ED085713</LText><Value>Russian Championship ensembles</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>712AC66D-F748-4C5F-BD1E-A704ED085713</LText><Value>Russian Championship ensembles</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>2CCD6B7E-1280-4A13-ADED-1857325C6FED</LText><Value>ЧР ансамблей</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>2CCD6B7E-1280-4A13-ADED-1857325C6FED</LText><Value>CR of ensembles</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>2CCD6B7E-1280-4A13-ADED-1857325C6FED</LText><Value>CR of ensembles</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>80B78B2F-46DA-4084-AD0D-A386319390DD</LText><Value>Первенство ВУЗов</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>80B78B2F-46DA-4084-AD0D-A386319390DD</LText><Value>Universities championship</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>80B78B2F-46DA-4084-AD0D-A386319390DD</LText><Value>Universities championship</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>1F05DF59-BFA7-4D3F-8B13-9947803BC38D</LText><Value>ПВ</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>1F05DF59-BFA7-4D3F-8B13-9947803BC38D</LText><Value>UC</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>1F05DF59-BFA7-4D3F-8B13-9947803BC38D</LText><Value>UC</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>4F7A79A8-B79F-48A2-BE3D-88C70496BB7B</LText><Value>Чемпионат Москвы среди студентов</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>4F7A79A8-B79F-48A2-BE3D-88C70496BB7B</LText><Value>Moscow championship among students</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>4F7A79A8-B79F-48A2-BE3D-88C70496BB7B</LText><Value>Moscow championship among students</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>897F06F6-34E8-4E21-8126-8CD51D4C8010</LText><Value>ЧМ среди студентов</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>897F06F6-34E8-4E21-8126-8CD51D4C8010</LText><Value>CM among students</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>897F06F6-34E8-4E21-8126-8CD51D4C8010</LText><Value>CM among students</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>D235F88B-0625-411D-BC1F-6019D01E298E</LText><Value>Первенство СТСР</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>D235F88B-0625-411D-BC1F-6019D01E298E</LText><Value>Championship of UDSR</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>D235F88B-0625-411D-BC1F-6019D01E298E</LText><Value>Championship of UDSR</Value><Lang>de</Lang></LTextValue>
<LTextValue><LText>AC0BA1CD-2FBA-4DE7-93D5-F5B9BCC746C8</LText><Value>Первенство СТСР</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>AC0BA1CD-2FBA-4DE7-93D5-F5B9BCC746C8</LText><Value>Championship of UDSR</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>AC0BA1CD-2FBA-4DE7-93D5-F5B9BCC746C8</LText><Value>Championship of UDSR</Value><Lang>de</Lang></LTextValue>


</LTextValueXData>
]]></Data>
</XData>

<Method name="CopyValueFromEngToAnother">
<Description>
w ##class(Dance.Utils.Init.TournamentRank).CopyValueFromEngToAnother("it")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>newLang:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
    
        &sql(DECLARE CCur CURSOR FOR
             SELECT %NOLOCK ID
             FROM Dance_Data.TournamentRank)
        
        &sql(OPEN CCur)
        for{
            &sql(FETCH CCur INTO :id) 
            quit:(SQLCODE '= 0)
            
            set obj = ##class(Dance.Data.TournamentRank).%OpenId(id)
            $$$THROWONERROR(st, obj.Name.SetValueByLang(obj.Name.GetValueByLang("en"), newLang))
            $$$THROWONERROR(st, obj.ShortName.SetValueByLang(obj.ShortName.GetValueByLang("en"), newLang))
        }
        
        &sql(CLOSE CCur)
    
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Utils.Init.TournamentStatus">
<Super>Dance.Utils.Init.BaseInit</Super>
<TimeCreated>63293,10528.110781</TimeCreated>

<Parameter name="PClassName">
<Default>TournamentStatus</Default>
</Parameter>

<Method name="Import">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    w !,"=== "_..#PClassName_" ==="
    do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data.Localization.LText", "LTextXData")
    do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data.Localization.LTextValue", "LTextValueXData")
    do ..ImportXData("Dance.Utils.Init."_..#PClassName, "Dance.Data."_..#PClassName, "ClassXData")
    quit $$$OK
]]></Implementation>
</Method>

<XData name="ClassXData">
<Data><![CDATA[
<ClassXData>
<TournamentStatus><Name>FB9892FB-8E28-45D2-AAF0-2ADF2410FA10</Name><Code>Initialization</Code><Sequence>1</Sequence></TournamentStatus>
<TournamentStatus><Name>CB4CD67E-510E-48FA-8AF7-99DA04C4EA9F</Name><Code>Registration</Code><Sequence>2</Sequence></TournamentStatus>
<TournamentStatus><Name>7C33DA68-04AF-4A94-8855-65028F74D091</Name><Code>RegistrationClosed</Code><Sequence>3</Sequence></TournamentStatus>
<TournamentStatus><Name>40D186C2-1CEE-45CB-9007-117F3466344C</Name><Code>Completed</Code><Sequence>4</Sequence></TournamentStatus>
<TournamentStatus><Name>07F18C3F-1EB7-4280-9AAB-F6D9C232FB29</Name><Code>Canceled</Code><Sequence>5</Sequence></TournamentStatus>
</ClassXData>
]]></Data>
</XData>

<XData name="LTextXData">
<Data><![CDATA[
<LTextOrderStatusXData>
<LText><Guid>FB9892FB-8E28-45D2-AAF0-2ADF2410FA10</Guid></LText>
<LText><Guid>CB4CD67E-510E-48FA-8AF7-99DA04C4EA9F</Guid></LText>
<LText><Guid>7C33DA68-04AF-4A94-8855-65028F74D091</Guid></LText>
<LText><Guid>40D186C2-1CEE-45CB-9007-117F3466344C</Guid></LText>
<LText><Guid>07F18C3F-1EB7-4280-9AAB-F6D9C232FB29</Guid></LText>
</LTextOrderStatusXData>
]]></Data>
</XData>

<XData name="LTextValueXData">
<Data><![CDATA[
<LTextValueXData>
<LTextValue><LText>FB9892FB-8E28-45D2-AAF0-2ADF2410FA10</LText><Value>Инициализация</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>FB9892FB-8E28-45D2-AAF0-2ADF2410FA10</LText><Value>Initialization</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>FB9892FB-8E28-45D2-AAF0-2ADF2410FA10</LText><Value>Initialisierung</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>CB4CD67E-510E-48FA-8AF7-99DA04C4EA9F</LText><Value>Регистрация</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>CB4CD67E-510E-48FA-8AF7-99DA04C4EA9F</LText><Value>Registration</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>CB4CD67E-510E-48FA-8AF7-99DA04C4EA9F</LText><Value>Registrierung</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>7C33DA68-04AF-4A94-8855-65028F74D091</LText><Value>Регистрация завершена</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>7C33DA68-04AF-4A94-8855-65028F74D091</LText><Value>Registration closed</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>7C33DA68-04AF-4A94-8855-65028F74D091</LText><Value>Registrierung abgeschlossen</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>40D186C2-1CEE-45CB-9007-117F3466344C</LText><Value>Завершен</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>40D186C2-1CEE-45CB-9007-117F3466344C</LText><Value>Сompleted</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>40D186C2-1CEE-45CB-9007-117F3466344C</LText><Value>Abgeschlossene</Value><Lang>de</Lang></LTextValue>

<LTextValue><LText>07F18C3F-1EB7-4280-9AAB-F6D9C232FB29</LText><Value>Отменен</Value><Lang>ru</Lang></LTextValue>
<LTextValue><LText>07F18C3F-1EB7-4280-9AAB-F6D9C232FB29</LText><Value>Canceled</Value><Lang>en</Lang></LTextValue>
<LTextValue><LText>07F18C3F-1EB7-4280-9AAB-F6D9C232FB29</LText><Value>Storniert</Value><Lang>de</Lang></LTextValue>
</LTextValueXData>
]]></Data>
</XData>

<Method name="SetItalian">
<Description>
w ##class(Dance.Utils.Init.TournamentStatus).SetItalian()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        $$$THROWONERROR(st, ##class(Dance.Data.TournamentStatus).CodeIdxOpen("Initialization").Name.SetValueByLang("Inizializzazione", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.TournamentStatus).CodeIdxOpen("Registration").Name.SetValueByLang("Registrazione", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.TournamentStatus).CodeIdxOpen("RegistrationClosed").Name.SetValueByLang("Registrazione chiuso", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.TournamentStatus).CodeIdxOpen("Completed").Name.SetValueByLang("Completato", "it"))
        $$$THROWONERROR(st, ##class(Dance.Data.TournamentStatus).CodeIdxOpen("Canceled").Name.SetValueByLang("Annullato", "it"))
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Utils.Journal">
<Super>%Persistent</Super>
<TimeCreated>63289,41745.96634</TimeCreated>

<Property name="EventType">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="CreatedTS">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="Location">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="1500"/>
</Property>

<Property name="Msg">
<Type>%Text</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="7000"/>
</Property>

<Method name="Create">
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String,location:%String,msg:%Text</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try{
		set log = ..%New()
		set log.EventType = type
		set log.CreatedTS = $ZDT($ZTS,3)
		set log.Location = location
		set log.Msg = msg
		do log.%Save()
	}
	catch(ex){
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Utils.JournalD</DataLocation>
<DefaultData>JournalDefaultData</DefaultData>
<IdLocation>^Dance.Utils.JournalD</IdLocation>
<IndexLocation>^Dance.Utils.JournalI</IndexLocation>
<StreamLocation>^Dance.Utils.JournalS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="JournalDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CreatedTS</Value>
</Value>
<Value name="3">
<Value>Location</Value>
</Value>
<Value name="4">
<Value>Msg</Value>
</Value>
<Value name="5">
<Value>EventType</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Dance.Utils.Msg">
<Abstract>1</Abstract>
<TimeCreated>63289,61228.306082</TimeCreated>

<Method name="GetErrorStatus">
<Description>
Get error status by key</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>errorKey:%String,additionalMsg:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit $system.Status.Error(5001, ..GetMsg(errorKey)_" "_additionalMsg)
]]></Implementation>
</Method>

<Method name="GetMsg">
<Description>
Get localized message</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>key:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit $GET(^Dance.Utils.Msg(key, $$$SessionLanguage), "No msg for key = "_key)
]]></Implementation>
</Method>

<Method name="SetMsg">
<Description>
Set localized message</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>lang:%String,key:%String,value:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set ^Dance.Utils.Msg(key, lang) = value
    quit $$$OK
]]></Implementation>
</Method>

<Method name="SetMsgForLangs">
<Description>
Set localized messages for langs</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>key:%String,ruValue:%String,enValue:%String,deValue:%String,itValue:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    do ..SetMsg("ru", key, ruValue)
    
    if (enValue = "") set enValue = key
    do ..SetMsg("en", key, enValue)
    
    if (deValue = "") set deValue = key
    do ..SetMsg("de", key, deValue)
    
    if (itValue = "") set itValue = key
    do ..SetMsg("it", key, itValue)
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="Init">
<Description>
do ##class(Dance.Utils.Msg).Init()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    
    do ..SetMsgForLangs("error_CoupleDifferentClubs",
                        "Партнер и партнерша должны быть из одного клуба!",
                        "Male partner and female partner must be from the same club!",
                        "Partner und die partner müssen aus dem gleichen club sein!",
                        "Partner e il partner deve essere dello stesso club!")
                        
                        
    
    do ..SetMsgForLangs("error_RegistrationClosed",
                        "Добавление участника невозможно. Регистрация в турнир уже завершена.",
                        "Adding a participant impossible. Registration in the tournament has been completed.",
                        "Hinzufügen ein Teilnehmer nicht möglich. Die Eintragung in das Turnier beendet ist.",
                        "Aggiunta impossibile un partecipante. L'iscrizione al torneo è stata completata.")
                        
    do ..SetMsgForLangs("error_ConflictCompetitionIsFound",
                        "Обнаружены конфликтные группы.",
                        "Found conflicting competitions.",
                        "Gefunden Konfliktparteien.",
                        "Gruppi in conflitto trovati.")

    do ..SetMsgForLangs("error_ParticipantNotCreated",
                        "При добавлении участника возникла ошибка.",
                        "When you add a participant has failed.",
                        "Beim Hinzufügen Mitglied ist fehlgeschlagen.",
                        "Quando si aggiunge un membro non è riuscita.")

    do ..SetMsgForLangs("error_FatalError",
                        "Произошла фатальная ошибка.",
                        "A fatal error occurred.",
                        "Ein schwerwiegender Fehler ist aufgetreten.",
                        "Si è verificato un errore irreversibile.")

    do ..SetMsgForLangs("error_ConnectionWDSFControllerFailed",
                        "Соединение с WDSF контроллером завершилось ошибкой.",
                        "Connect with WDSF controller has failed.",
                        "Kontakt mit WDSF-Controller ist ausgefallen.",
                        "Connettiti con regolatore WDSF non è riuscita.")

    do ..SetMsgForLangs("error_DancerClassNotFound",
                        "Класс танцора не найден.",
                        "Class dancer was not found.",
                        "Klasse Tänzer wurde nicht gefunden.",
                        "Class ballerino non è stato trovato.")

    do ..SetMsgForLangs("error_PersonUDSRNotFound",
                        "Спортсмен СТСР не найден.",
                        "Athlete UDSR not found.",
                        "Athlete UDSR nicht gefunden.",
                        "Atleta UDSR non trovato.")

    do ..SetMsgForLangs("error_CreateLocalization",
                        "Создание мультиязычного поля невозможно",
                        "Creating a multilingual field can not be.",
                        "Creating a multilingual field can not be.",
                        "Creating a multilingual field can not be.")

    do ..SetMsgForLangs("error_DeleteLocalization",
                        "Удаление мультиязычного поля невозможно.",
                        "Deleting a multilingual field impossible.",
                        "Deleting a multilingual field impossible.",
                        "Deleting a multilingual field impossible.")

    do ..SetMsgForLangs("error_SaveLocalization",
                        "Сохранение мультиязычного поля невозможно.",
                        "Saving multilingual fields impossible.",
                        "Saving multilingual fields impossible.",
                        "Saving multilingual fields impossible.")
                        
    do ..SetMsgForLangs("error_NoPrivilegeForDelete",
                        "Нет привилегий для удаления.",
                        "No privileges for removal.",
                        "No privileges for removal.",
                        "No privileges for removal.")
    
    do ..SetMsgForLangs("error_NoPrivilegeForUpdate",
                        "Нет привилегий для обновления.",
                        "No privileges for the update.",
                        "No privileges for the update.",
                        "No privileges for the update.")
    
    do ..SetMsgForLangs("error_BadResponseStatus",
                        "Ошибочный статус ответа сервера.",
                        "Error status response from the server.",
                        "Error status response from the server.",
                        "Error status response from the server.")
                        
    
    do ..SetMsgForLangs("error_TournamentDeactivate",
                        "Произошла ошибка при удалении турнира.",
                        "An error occurred while deleting the tournament.",
                        "An error occurred while deleting the tournament.",
                        "An error occurred while deleting the tournament.")
                                            
    
    do ..SetMsgForLangs("error_CompetitionDeactivate",
                        "Произошла ошибка при удалении группы.",
                        "An error occurred while deleting a competition.",
                        "An error occurred while deleting a competition.",
                        "An error occurred while deleting a competition.")
                        
    do ..SetMsgForLangs("error_ParticipantDeactivate",
                        "Произошла ошибка при удалении регистрации.",
                        "An error occurred while deleting the registration.",
                        "An error occurred while deleting the registration.",
                        "An error occurred while deleting the registration.")
                        
    do ..SetMsgForLangs("error_TournamentSave",
                        "Турнир не сохранен.",
                        "The tournament is not saved.",
                        "The tournament is not saved.",
                        "The tournament is not saved.")
                        
    do ..SetMsgForLangs("error_CompetitionSave",
                        "Группа не сохранена.",
                        "Competition is not saved.",
                        "Competition is not saved.",
                        "Competition is not saved.")
                        
    do ..SetMsgForLangs("error_FeedBackSave",
                        "Отзыв не сохранен.",
                        "Feedback is not saved.",
                        "Feedback is not saved.",
                        "Feedback is not saved.")


    do ..SetMsgForLangs("error_Recorder_AccessDenied",
                        "Регистратору запрещен доступ к турниру.",
                        "Registrar denied access to the tournament.",
                        "Registrar denied access to the tournament.",
                        "Registrar denied access to the tournament.")
                        
    q $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
SaveTournamentError

NoPrivilegeForDelete
NoPrivilegeForUpdate
*/
]]></Content>
</UDLText>
</Class>


<Class name="Dance.Utils.Service">
<Abstract>1</Abstract>
<TimeCreated>63612,51804.121086</TimeCreated>

<Method name="BuildAllIndices">
<Description>
do ##class(Dance.Utils.Service).BuildAllIndices()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.Localization.LText).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.Localization.LTextLanguage).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.Localization.LTextValue).%BuildIndices())
    
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.Tournament).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.AgeCategory).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.AgeCategoryWDSF).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.Competition).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.CompetitionType).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.CompetitionWDSF).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.Country).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.Couple).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.CoupleUDSR).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.CoupleWDSF).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.DancerClass).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.Discipline).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.FeedBack).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.Participant).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.ParticipantCoupleOther).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.ParticipantCoupleUDSR).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.ParticipantCoupleWDSF).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.ParticipantSingleOther).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.ParticipantSingleUDSR).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.ParticipantSingleWDSF).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.Person).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.Ticket).%BuildIndices())
    do $SYSTEM.OBJ.DisplayError(##class(Dance.Data.TicketDanceplat).%BuildIndices())
]]></Implementation>
</Method>

<Method name="UpdateTournamentUrl">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
        set st = $$$OK
    try{
        TSTART
        
        &sql(DECLARE TRNCurs CURSOR FOR 
             SELECT ID
             FROM Dance_Data.Tournament)    
                    
        &sql(OPEN TRNCurs)
        for  
        {   
            &sql(FETCH TRNCurs INTO :id) 
            quit:(SQLCODE '= 0)
            
            set trn = ##class(Dance.Data.Tournament).%OpenId(id)
            
            
            if ($ISOBJECT(trn.InfoUrl) = $$$NO){
                set trn.InfoUrl = ##class(Dance.Data.Localization.LText).Create(trn.OrganizerSite)
            }
            else{
                w !,"TRN ID = "_id_" Info exists"
            }
            
            
            if ($ISOBJECT(trn.AdditionInfoUrl) = $$$NO){
                set trn.AdditionInfoUrl = ##class(Dance.Data.Localization.LText).Create(trn.AnnouncementUrl)
            }
            else{
                w !,"TRN ID = "_id_" AdditionInfoUrl exists"
            }
            
            $$$THROWONERROR(st, trn.%Save())
        }
        
        &sql(CLOSE TRNCurs)
        
        TCOMMIT 
    }
    catch(ex){
        TROLLBACK
        
        set st = ex.AsStatus()
        w !,$SYSTEM.Status.GetErrorText(st)
    }
]]></Implementation>
</Method>

<Method name="UpdateFullNameForLangs">
<Description>
w ##class(Dance.Utils.Service).UpdateFullNameForLangs()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    set st = $$$OK
    try{
        TSTART
        
        &sql(DECLARE FNCurs CURSOR FOR 
             SELECT ID
             FROM Dance_Data.Person)    
                    
        &sql(OPEN FNCurs)
        for  
        {   
            &sql(FETCH FNCurs INTO :id) 
            quit:(SQLCODE '= 0)
            
            set obj = ##class(Dance.Data.Person).%OpenId(id)
            $$$THROWONERROR(st, obj.LastName.SetValueByLang(obj.LastName.GetValueByLang("en"), "de"))
            $$$THROWONERROR(st, obj.LastName.SetValueByLang(obj.LastName.GetValueByLang("en"), "it"))
            
            $$$THROWONERROR(st, obj.FirstName.SetValueByLang(obj.FirstName.GetValueByLang("en"), "de"))
            $$$THROWONERROR(st, obj.FirstName.SetValueByLang(obj.FirstName.GetValueByLang("en"), "it"))
        }
        
        &sql(CLOSE FNCurs)
        
       //====================================== 
        
       &sql(DECLARE FNCurs2 CURSOR FOR 
             SELECT ID
             FROM Dance_Data.Participant)    
                    
        &sql(OPEN FNCurs2)
        for  
        {   
            &sql(FETCH FNCurs2 INTO :id) 
            quit:(SQLCODE '= 0)
            
            set obj = ##class(Dance.Data.Participant).%OpenId(id)
            if ($ISOBJECT(obj.FullName) = $$$NO){
                continue
            }
            $$$THROWONERROR(st, obj.FullName.SetValueByLang(obj.FullName.GetValueByLang("en"), "de"))
            $$$THROWONERROR(st, obj.FullName.SetValueByLang(obj.FullName.GetValueByLang("en"), "it"))
        }
        
        &sql(CLOSE FNCurs2)
        
        TCOMMIT 
    }
    catch(ex){
        TROLLBACK
        
        set st = ex.AsStatus()
        w !,$SYSTEM.Status.GetErrorText(st)
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="CreateAgeGroups">
<Description>
w ##class(Dance.Utils.Service).CreateAgeGroups()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        set ag = ##class(Dance.Data.AgeCategory).%New()
        set ag.Code = "Ю-1+Д-2"
        set ag.OldestPartnerMaxAge = 13
        set ag.OldestPartnerMinAge = 11
        set ag.YoungestPartnerMaxAge = 13
        set ag.YoungestPartnerMinAge = 11
        set ag.SpecialLogic = 0
        set ag.Name = ##class(Dance.Data.Localization.LText).Create("Юниоры-1 + Дети-2")
        $$$THROWONERROR(st, ag.Name.SetValueByLang("Junior-1+Juvenile-2", "en"))
        $$$THROWONERROR(st, ag.Name.SetValueByLang("Junior-1+Juvenile-2", "de"))
        $$$THROWONERROR(st, ag.Name.SetValueByLang("Junior-1+Juvenile-2", "it"))
        $$$THROWONERROR(st, ag.%Save())
        
        
        
        
        set ag = ##class(Dance.Data.AgeCategory).%New()
        set ag.Code = "Молодежь+Ю-2"
        set ag.OldestPartnerMaxAge = 18
        set ag.OldestPartnerMinAge = 14
        set ag.YoungestPartnerMaxAge = 18
        set ag.YoungestPartnerMinAge = 14
        set ag.SpecialLogic = 0
        set ag.Name = ##class(Dance.Data.Localization.LText).Create("Молодежь + Юниоры-2")
        $$$THROWONERROR(st, ag.Name.SetValueByLang("Youth + Junior-2", "en"))
        $$$THROWONERROR(st, ag.Name.SetValueByLang("Youth + Junior-2", "de"))
        $$$THROWONERROR(st, ag.Name.SetValueByLang("Youth + Junior-2", "it"))
        $$$THROWONERROR(st, ag.%Save())
        
        
        
        set ag = ##class(Dance.Data.AgeCategory).%New()
        set ag.Code = "Взрослые+Молодежь+Сеньоры"
        set ag.OldestPartnerMaxAge = 99
        set ag.OldestPartnerMinAge = 16
        set ag.YoungestPartnerMaxAge = 99
        set ag.YoungestPartnerMinAge = 16
        set ag.SpecialLogic = 0
        set ag.Name = ##class(Dance.Data.Localization.LText).Create("Взрослые + Молодежь + Сеньоры")
        $$$THROWONERROR(st, ag.Name.SetValueByLang("Adult + Youth + Senior", "en"))
        $$$THROWONERROR(st, ag.Name.SetValueByLang("", "de"))
        $$$THROWONERROR(st, ag.Name.SetValueByLang("", "it"))
        $$$THROWONERROR(st, ag.%Save())
        
        TCOMMIT
    }
    catch(ex){
        TROLLBACK
        set st = ex.AsStatus()
        w !, $SYSTEM.Status.GetErrorText(st)
    }
    
    quit st
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Utils.TaskSyncWDSFController">
<Super>%SYS.Task.Definition</Super>
<TimeCreated>63443,63491.788522</TimeCreated>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ##class(Dance.Utils.TaskSyncWDSFController).SyncCompetitions()
	q $$$OK
]]></Implementation>
</Method>

<Method name="SyncCompetitions">
<Description>
do ##class(Dance.Utils.TaskSyncWDSFController).SyncCompetitions()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>nowSyncSinceDate:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try{
		set syncCount = 0
		
		TSTART
		
		// wdsf date format: YYYY-MM-DD
		set prevSyncSinceDate = $GET(^Settings("Dance", "LastSyncWDSFCompetitions"), $ZD($H-1, 3))
		if (nowSyncSinceDate = ""){
			set nowSyncSinceDate = $ZD($ZDH(prevSyncSinceDate, 15) - 7, 3)
		}
		
		set wdsfData = ##class(Dance.Wdsf.ControllerAPI).GetCompetitions($ZD($H - 365, 3), $ZD($H + 365, 3), nowSyncSinceDate, .st)
		$$$THROWONERROR(st, st)
		
		for i=1:1:wdsfData.competitions.Count(){
			do ##class(Dance.Data.CompetitionWDSF).Save(wdsfData.competitions.GetAt(i), .st)
			$$$THROWONERROR(st, st)
			
			set syncCount = syncCount + 1
		}		
		
		set ^Settings("Dance", "LastSyncWDSFCompetitions") = $ZD($H, 3)
		do ##class(Dance.Utils.Journal).Create("Log", "TaskSyncWDSFController.SyncCompetitions", "SyncCount="_syncCount)
		
		TCOMMIT
	}
	catch(ex){
		TROLLBACK
		set st = ex.AsStatus()	
		do ##class(Dance.Utils.Journal).Create("Error", "TaskSyncWDSFController.SyncCompetitions", $SYSTEM.Status.GetErrorText(st))
	}
	
	quit st
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Utils.TaskTickets">
<Super>%SYS.Task.Definition</Super>
<TimeCreated>63324,68778.945644</TimeCreated>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = ##class(Dance.Utils.TaskTickets).Import()
    do ##class(Dance.Data.Tournament).UpdateAllTournaments()
    do ##class(Dance.Data.Participant).UpdateAllParticipantsFullName()
    
    quit st
]]></Implementation>
</Method>

<Method name="Import">
<Description>
do ##class(Dance.Utils.TaskTickets).Import()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    /*
    do ##class(Dance.Data.Import.TicketDanceplat).%KillExtent()
    do ##class(Dance.Data.Ticket).%DeleteExtent()
    do ##class(Dance.Data.Participant).%DeleteExtent()
    do ##class(Dance.Data.Couple).%DeleteExtent()
    do ##class(Dance.Data.PersonWDSF).%DeleteExtent()
    
    d ##class(Dance.Data.Import.TicketDanceplat).%KillExtent()
    d ##class(Dance.Data.Ticket).%KillExtent()
    */
    set st = $$$OK
    
    try{
        &sql(DECLARE TCur CURSOR FOR 
             SELECT IdInternal, Hash
             FROM Dance_Data.Tournament
             WHERE IsActive = 1 AND (TStatus->Code='Registration' OR TStatus->Code='RegistrationClosed'))   
        
        &sql(OPEN TCur)
        for  
        {   
            &sql(FETCH TCur INTO :idInternal, :hash) 
            quit:(SQLCODE '= 0)
            set page = $G(^Settings("Dance", "ImportDanceplat", "TicketsPage"))_"?trn="_idInternal_"&hash="_hash_"&all=1"
            w !, "Tournament = "_idInternal
            w ##class(Dance.Data.Import.ImportDanceplat).Import("Dance.Data.Import.TicketDanceplat", page)    
        }
        
        &sql(CLOSE TCur)
    }
    catch(ex){
        set st = ex.AsStatus()
        do ##class(Dance.Utils.Journal).Create("Error", "TaskTickets.Import", $SYSTEM.Status.GetErrorText(st))
    }
    
    do ##class(Dance.Data.TicketDanceplat).SaveAllFromImportTable()
    quit st
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Utils.Test">
<Abstract>1</Abstract>
<TimeCreated>63339,74275.849932</TimeCreated>

<Method name="FindBug">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set cmp = ##class(Dance.Data.Competition).%OpenId(334)
	set proxyParams = ##class(%ZEN.proxyObject).%New()
	set proxyCmp = cmp.ConvertToProxyObject(proxyParams)
	do proxyCmp.%ToJSON()
]]></Implementation>
</Method>

<Method name="CoupleFix">
<Description>
do ##class(Dance.Utils.Test).CoupleFix()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set couple = ##class(Dance.Data.CoupleWDSF).%OpenId(481)
	#dim man As Dance.Data.PersonWDSF = couple.Man
	#dim woman As Dance.Data.PersonWDSF = couple.Woman
	
	d man.LastName.SetValueByLang("Копытов", "ru")
	d man.FirstName.SetValueByLang("Дмитрий", "ru")
	w man.%Save()
	
	d woman.LastName.SetValueByLang("Ваняшкина", "ru")
	d woman.FirstName.SetValueByLang("Анна", "ru")
	w woman.%Save()
	
	
	set couple = ##class(Dance.Data.CoupleWDSF).%OpenId(470)
	set man  = couple.Man
	set woman = couple.Woman
	
	d man.LastName.SetValueByLang("Олейников", "ru")
	d man.FirstName.SetValueByLang("Дмитрий", "ru")
	w man.%Save()
	
	d woman.LastName.SetValueByLang("Орловская", "ru")
	d woman.FirstName.SetValueByLang("Анастасия", "ru")
	w woman.%Save()
]]></Implementation>
</Method>

<Method name="Langs">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set lang = ##class(Dance.Data.Localization.LTextLanguage).CodeIdxOpen("ru")
	set lang.Name = "Русская версия"
	w lang.%Save()
	
	
	set lang = ##class(Dance.Data.Localization.LTextLanguage).CodeIdxOpen("en")
	set lang.Name = "English version"
	w lang.%Save()
	
	set lang = ##class(Dance.Data.Localization.LTextLanguage).CodeIdxOpen("de")
	set lang.Name = "Deutsch version"
	w lang.%Save()
]]></Implementation>
</Method>

<Method name="FixGlobal">
<Description>
do ##class(Dance.Utils.Test).FixGlobal()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do ..SaveParticipant("1", "15", "2014-10-13 05:24:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("2", "16", "2014-10-13 05:24:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("3", "23", "2014-10-13 05:24:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("4", "24", "2014-10-13 05:24:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("5", "23", "2014-10-13 05:24:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("6", "24", "2014-10-13 05:24:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("7", "47", "2014-10-13 05:24:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("8", "51", "2014-10-13 05:24:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("9", "21", "2014-10-13 05:24:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("10", "29", "2014-10-13 05:24:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("11", "50", "2014-10-13 05:24:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("12", "53", "2014-10-13 05:24:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("13", "8", "2014-10-13 05:24:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("14", "7", "2014-10-13 05:24:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("15", "21", "2014-10-13 05:24:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("16", "22", "2014-10-13 05:24:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("17", "25", "2014-10-13 05:24:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("18", "26", "2014-10-13 05:24:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("19", "45", "2014-10-13 05:24:18", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("20", "46", "2014-10-13 05:24:21", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("21", "48", "2014-10-13 05:24:24", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("22", "50", "2014-10-13 05:24:27", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("23", "15", "2014-10-13 05:24:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("24", "16", "2014-10-13 05:24:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("25", "23", "2014-10-13 05:24:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("26", "24", "2014-10-13 05:24:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("27", "47", "2014-10-13 05:24:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("28", "51", "2014-10-13 05:24:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("29", "41", "2014-10-13 05:24:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("30", "42", "2014-10-13 05:24:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("31", "15", "2014-10-13 05:24:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("32", "16", "2014-10-13 05:24:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("33", "23", "2014-10-13 05:24:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("34", "24", "2014-10-13 05:24:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("35", "24", "2014-10-13 05:24:32", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("36", "23", "2014-10-13 05:24:35", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("37", "16", "2014-10-13 05:24:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("38", "15", "2014-10-13 05:24:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("39", "47", "2014-10-13 05:24:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("40", "51", "2014-10-13 05:24:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("41", "11", "2014-10-13 05:24:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("42", "12", "2014-10-13 05:24:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("43", "23", "2014-10-13 05:24:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("44", "24", "2014-10-13 05:24:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("45", "17", "2014-10-13 05:24:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("46", "18", "2014-10-13 05:24:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("47", "23", "2014-10-13 05:24:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("48", "24", "2014-10-13 05:24:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("49", "1", "2014-10-13 05:24:42", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("50", "2", "2014-10-13 05:24:42", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("51", "39", "2014-10-13 05:24:42", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("52", "40", "2014-10-13 05:24:42", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("53", "7", "2014-10-13 05:24:42", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("54", "8", "2014-10-13 05:24:42", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("55", "19", "2014-10-13 05:24:44", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("56", "20", "2014-10-13 05:24:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("57", "22", "2014-10-13 05:24:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("58", "30", "2014-10-13 05:24:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("59", "9", "2014-10-13 05:24:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("60", "10", "2014-10-13 05:24:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("61", "36", "2014-10-13 05:24:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("62", "19", "2014-10-13 05:24:50", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("63", "20", "2014-10-13 05:24:54", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("64", "45", "2014-10-13 05:24:57", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("65", "46", "2014-10-13 05:25:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("66", "15", "2014-10-13 05:25:04", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("67", "16", "2014-10-13 05:25:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("68", "17", "2014-10-13 05:25:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("69", "18", "2014-10-13 05:25:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("70", "23", "2014-10-13 05:25:18", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("71", "24", "2014-10-13 05:25:22", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("72", "47", "2014-10-13 05:25:25", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("73", "51", "2014-10-13 05:25:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("74", "7", "2014-10-13 05:25:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("75", "8", "2014-10-13 05:25:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("76", "39", "2014-10-13 05:25:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("77", "40", "2014-10-13 05:25:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("78", "43", "2014-10-13 05:25:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("79", "44", "2014-10-13 05:25:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("80", "1", "2014-10-13 05:25:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("81", "2", "2014-10-13 05:25:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("82", "48", "2014-10-13 05:25:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("83", "53", "2014-10-13 05:25:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("84", "7", "2014-10-13 05:25:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("85", "8", "2014-10-13 05:25:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("86", "39", "2014-10-13 05:25:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("87", "40", "2014-10-13 05:25:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("88", "43", "2014-10-13 05:25:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("89", "44", "2014-10-13 05:25:30", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("90", "11", "2014-10-13 05:25:33", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("91", "12", "2014-10-13 05:25:37", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("92", "47", "2014-10-13 05:25:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("93", "51", "2014-10-13 05:25:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("94", "21", "2014-10-13 05:25:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("95", "30", "2014-10-13 05:25:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("96", "50", "2014-10-13 05:25:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("97", "55", "2014-10-13 05:25:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("98", "18", "2014-10-13 05:25:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("99", "24", "2014-10-13 05:25:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("100", "47", "2014-10-13 05:25:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("101", "9", "2014-10-13 05:25:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("102", "10", "2014-10-13 05:25:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("103", "32", "2014-10-13 05:25:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("104", "35", "2014-10-13 05:25:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("105", "36", "2014-10-13 05:25:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("106", "1", "2014-10-13 05:25:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("107", "2", "2014-10-13 05:25:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("108", "7", "2014-10-13 05:25:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("109", "8", "2014-10-13 05:25:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("110", "11", "2014-10-13 05:25:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("111", "22", "2014-10-13 05:25:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("112", "45", "2014-10-13 05:25:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("113", "46", "2014-10-13 05:25:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("114", "57", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("115", "66", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("116", "70", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("117", "72", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("118", "78", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("119", "92", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("120", "61", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("121", "62", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("122", "63", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("123", "67", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("124", "73", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("125", "86", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("126", "87", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("127", "57", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("128", "64", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("129", "66", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("130", "68", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("131", "70", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("132", "72", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("133", "79", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("134", "63", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("135", "67", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("136", "73", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("137", "84", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("138", "85", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("139", "88", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("140", "61", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("141", "62", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("142", "86", "2014-10-13 05:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("143", "87", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("144", "59", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("145", "60", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("146", "63", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("147", "67", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("148", "61", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("149", "62", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("150", "61", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("151", "62", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("152", "61", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("153", "62", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("154", "61", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("155", "62", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("156", "61", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("157", "62", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("158", "63", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("159", "67", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("160", "70", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("161", "68", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("162", "64", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("163", "66", "2014-10-13 05:47:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("164", "67", "2014-10-13 05:47:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("165", "63", "2014-10-13 05:47:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("166", "72", "2014-10-13 05:47:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("167", "79", "2014-10-13 05:47:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("168", "94", "2014-10-13 05:47:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("169", "60", "2014-10-13 05:47:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("170", "63", "2014-10-13 05:47:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("171", "67", "2014-10-13 05:47:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("172", "73", "2014-10-13 05:47:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("173", "87", "2014-10-13 05:47:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("174", "88", "2014-10-13 05:47:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("175", "63", "2014-10-13 05:47:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("176", "67", "2014-10-13 05:47:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("177", "73", "2014-10-13 05:47:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("178", "84", "2014-10-13 05:47:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("179", "85", "2014-10-13 05:47:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("180", "88", "2014-10-13 05:47:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("181", "63", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("182", "67", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("183", "73", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("184", "84", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("185", "85", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("186", "88", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("187", "77", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("188", "93", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("189", "69", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("190", "72", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("191", "70", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("192", "68", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("193", "66", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("194", "64", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("195", "78", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("196", "92", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("197", "68", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("198", "79", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("199", "94", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("200", "77", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("201", "70", "2014-10-13 05:47:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("202", "72", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("203", "77", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("204", "93", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("205", "94", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("206", "72", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("207", "66", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("208", "61", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("209", "62", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("210", "78", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("211", "92", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("212", "66", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("213", "72", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("214", "78", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("215", "92", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("216", "60", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("217", "59", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("218", "79", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("219", "77", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("220", "66", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("221", "57", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("222", "77", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("223", "79", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("224", "93", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("225", "94", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("226", "63", "2014-10-13 05:47:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("227", "67", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("228", "73", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("229", "86", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("230", "87", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("231", "88", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("232", "77", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("233", "93", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("234", "57", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("235", "66", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("236", "70", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("237", "72", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("238", "77", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("239", "79", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("240", "88", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("241", "87", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("242", "86", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("243", "87", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("244", "86", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("245", "76", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("246", "91", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("247", "76", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("248", "91", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("249", "94", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("250", "93", "2014-10-13 05:47:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("251", "77", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("252", "72", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("253", "70", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("254", "57", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("255", "93", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("256", "79", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("257", "77", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("258", "72", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("259", "70", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("260", "68", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("261", "66", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("262", "64", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("263", "57", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("264", "65", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("265", "69", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("266", "75", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("267", "63", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("268", "67", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("269", "73", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("270", "84", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("271", "85", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("272", "88", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("273", "88", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("274", "87", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("275", "86", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("276", "73", "2014-10-13 05:47:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("277", "59", "2014-10-13 05:47:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("278", "60", "2014-10-13 05:47:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("279", "63", "2014-10-13 05:47:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("280", "67", "2014-10-13 05:47:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("281", "74", "2014-10-13 05:47:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("282", "80", "2014-10-13 05:47:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("283", "81", "2014-10-13 05:47:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("284", "89", "2014-10-13 05:47:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("285", "93", "2014-10-13 05:47:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("286", "66", "2014-10-13 05:47:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("287", "70", "2014-10-13 05:47:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("288", "72", "2014-10-13 05:47:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("289", "77", "2014-10-13 05:47:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("290", "79", "2014-10-13 05:47:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("291", "57", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("292", "64", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("293", "66", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("294", "68", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("295", "70", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("296", "72", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("297", "77", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("298", "79", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("299", "93", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("300", "94", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("301", "69", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("302", "90", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("303", "57", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("304", "64", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("305", "68", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("306", "70", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("307", "57", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("308", "64", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("309", "68", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("310", "72", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("311", "77", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("312", "79", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("313", "93", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("314", "94", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("315", "63", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("316", "67", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("317", "73", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("318", "84", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("319", "85", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("320", "88", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("321", "75", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("322", "90", "2014-10-13 05:47:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("323", "63", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("324", "64", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("325", "68", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("326", "67", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("327", "73", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("328", "84", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("329", "85", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("330", "75", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("331", "68", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("332", "70", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("333", "72", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("334", "91", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("335", "92", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("336", "79", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("337", "94", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("338", "58", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("339", "71", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("340", "59", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("341", "60", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("342", "63", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("343", "67", "2014-10-13 05:47:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("344", "64", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("345", "68", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("346", "76", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("347", "91", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("348", "57", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("349", "65", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("350", "69", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("351", "63", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("352", "67", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("353", "74", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("354", "80", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("355", "81", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("356", "89", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("357", "60", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("358", "74", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("359", "61", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("360", "62", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("361", "68", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("362", "64", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("363", "70", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("364", "72", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("365", "78", "2014-10-13 05:47:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("366", "91", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("367", "57", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("368", "66", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("369", "70", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("370", "72", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("371", "79", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("372", "94", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("373", "58", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("374", "75", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("375", "66", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("376", "70", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("377", "72", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("378", "93", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("379", "94", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("380", "58", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("381", "65", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("382", "69", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("383", "71", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("384", "90", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("385", "64", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("386", "68", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("387", "58", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("388", "71", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("389", "77", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("390", "66", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("391", "70", "2014-10-13 05:47:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("392", "76", "2014-10-13 05:47:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("393", "64", "2014-10-13 05:47:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("394", "68", "2014-10-13 05:47:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("395", "66", "2014-10-13 05:47:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("396", "69", "2014-10-13 05:47:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("397", "75", "2014-10-13 05:47:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("398", "90", "2014-10-13 05:47:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("399", "65", "2014-10-13 05:47:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("400", "57", "2014-10-13 05:47:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("401", "84", "2014-10-13 05:47:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("402", "73", "2014-10-13 05:47:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("403", "68", "2014-10-13 05:47:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("404", "64", "2014-10-13 05:47:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("405", "85", "2014-10-13 05:47:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("406", "86", "2014-10-13 05:47:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("407", "87", "2014-10-13 05:47:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("408", "73", "2014-10-13 05:47:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("409", "57", "2014-10-13 05:47:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("410", "55", "2014-10-13 15:00:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("411", "53", "2014-10-13 15:00:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("412", "50", "2014-10-13 15:00:22", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("413", "48", "2014-10-13 15:00:25", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("414", "32", "2014-10-13 15:00:25", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("415", "53", "2014-10-13 20:00:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("416", "55", "2014-10-13 20:00:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("417", "13", "2014-10-14 15:00:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("418", "14", "2014-10-14 15:00:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("419", "22", "2014-10-14 15:00:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("420", "25", "2014-10-14 15:00:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("421", "26", "2014-10-14 15:00:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("422", "30", "2014-10-14 15:00:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("423", "45", "2014-10-14 15:00:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("424", "46", "2014-10-14 15:00:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("425", "48", "2014-10-14 15:00:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("426", "53", "2014-10-14 15:00:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("427", "41", "2014-10-14 20:00:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("428", "42", "2014-10-14 20:00:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("429", "43", "2014-10-14 20:00:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("430", "44", "2014-10-14 20:00:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("431", "26", "2014-10-15 10:00:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("432", "21", "2014-10-15 15:00:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("433", "22", "2014-10-15 15:00:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("434", "25", "2014-10-15 15:00:18", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("435", "26", "2014-10-15 15:00:20", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("436", "29", "2014-10-15 15:00:23", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("437", "30", "2014-10-15 15:00:26", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("438", "15", "2014-10-15 15:00:26", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("439", "16", "2014-10-15 15:00:26", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("440", "23", "2014-10-15 15:00:26", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("441", "9", "2014-10-15 15:00:26", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("442", "10", "2014-10-15 15:00:26", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("443", "32", "2014-10-15 15:00:26", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("444", "35", "2014-10-15 15:00:26", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("445", "36", "2014-10-15 15:00:26", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("446", "52", "2014-10-15 20:00:03", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("447", "47", "2014-10-16 05:00:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("448", "47", "2014-10-16 05:00:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("449", "47", "2014-10-16 05:00:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("450", "39", "2014-10-16 05:00:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("451", "40", "2014-10-16 05:00:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("452", "43", "2014-10-16 05:00:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("453", "44", "2014-10-16 05:00:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("454", "43", "2014-10-16 05:00:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("455", "44", "2014-10-16 05:00:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("456", "21", "2014-10-16 05:00:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("457", "22", "2014-10-16 05:00:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("458", "30", "2014-10-16 05:00:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("459", "48", "2014-10-16 05:00:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("460", "50", "2014-10-16 05:00:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("461", "53", "2014-10-16 05:00:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("462", "45", "2014-10-16 10:00:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("463", "46", "2014-10-16 10:00:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("464", "55", "2014-10-16 10:00:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("465", "53", "2014-10-16 10:00:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("466", "41", "2014-10-16 20:00:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("467", "42", "2014-10-16 20:00:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("468", "43", "2014-10-16 20:00:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("469", "44", "2014-10-16 20:00:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("470", "43", "2014-10-17 00:00:04", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("471", "44", "2014-10-17 00:00:04", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("472", "41", "2014-10-17 05:00:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("473", "42", "2014-10-17 05:00:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("474", "43", "2014-10-17 05:00:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("475", "44", "2014-10-17 05:00:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("476", "48", "2014-10-17 05:00:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("477", "50", "2014-10-17 05:00:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("478", "53", "2014-10-17 05:00:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("479", "55", "2014-10-17 05:00:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("480", "9", "2014-10-17 10:00:04", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("483", "95", "2014-10-17 11:13:24", "1", "CoupleWDSF", "2")
	do ..SaveParticipant("484", "45", "2014-10-19 00:00:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("485", "46", "2014-10-19 00:00:20", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("486", "48", "2014-10-19 00:00:22", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("487", "53", "2014-10-19 00:00:24", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("488", "52", "2014-10-19 15:00:04", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("489", "95", "2014-10-30 19:32:18", "1", "CoupleUDSR", "2")
	do ..SaveParticipant("490", "96", "2014-11-06 13:34:26", "1", "CoupleOther", "1")
	do ..SaveParticipant("491", "105", "2014-11-06 13:34:26", "1", "CoupleOther", "1")
	do ..SaveParticipant("492", "104", "2014-11-06 15:00:11", "1", "CoupleOther", "1")
	do ..SaveParticipant("493", "104", "2014-11-06 15:00:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("494", "100", "2014-11-06 15:00:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("495", "99", "2014-11-06 15:00:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("496", "101", "2014-11-06 15:00:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("497", "106", "2014-11-06 15:00:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("498", "104", "2014-11-06 15:00:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("499", "109", "2014-11-06 15:00:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("500", "100", "2014-11-06 15:00:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("501", "104", "2014-11-06 15:00:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("502", "109", "2014-11-06 15:00:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("503", "109", "2014-11-06 15:00:17", "1", "CoupleOther", "1")
	do ..SaveParticipant("504", "102", "2014-11-06 15:00:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("505", "99", "2014-11-06 15:00:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("506", "100", "2014-11-06 15:00:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("507", "104", "2014-11-06 15:00:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("508", "109", "2014-11-06 15:00:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("509", "98", "2014-11-06 15:00:22", "1", "CoupleOther", "1")
	do ..SaveParticipant("510", "103", "2014-11-06 15:00:28", "1", "CoupleOther", "1")
	do ..SaveParticipant("511", "108", "2014-11-06 15:00:33", "1", "CoupleOther", "1")
	do ..SaveParticipant("512", "100", "2014-11-06 15:00:33", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("513", "104", "2014-11-06 15:00:33", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("514", "109", "2014-11-06 15:00:33", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("515", "100", "2014-11-06 15:00:39", "1", "CoupleOther", "1")
	do ..SaveParticipant("516", "104", "2014-11-06 15:00:46", "1", "CoupleOther", "1")
	do ..SaveParticipant("517", "109", "2014-11-06 15:00:52", "1", "CoupleOther", "1")
	do ..SaveParticipant("518", "97", "2014-11-06 15:00:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("519", "98", "2014-11-06 15:00:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("520", "107", "2014-11-06 15:00:54", "1", "CoupleOther", "1")
	do ..SaveParticipant("521", "100", "2014-11-06 15:00:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("522", "104", "2014-11-06 15:00:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("523", "109", "2014-11-06 15:00:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("524", "105", "2014-11-06 15:00:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("525", "98", "2014-11-06 15:00:57", "1", "CoupleOther", "1")
	do ..SaveParticipant("526", "103", "2014-11-06 15:01:00", "1", "CoupleOther", "1")
	do ..SaveParticipant("527", "108", "2014-11-06 15:01:03", "1", "CoupleOther", "1")
	do ..SaveParticipant("528", "100", "2014-11-06 15:01:06", "1", "CoupleOther", "1")
	do ..SaveParticipant("529", "109", "2014-11-06 15:01:09", "1", "CoupleOther", "1")
	do ..SaveParticipant("530", "100", "2014-11-06 15:01:14", "1", "CoupleOther", "1")
	do ..SaveParticipant("531", "104", "2014-11-06 15:01:20", "1", "CoupleOther", "1")
	do ..SaveParticipant("532", "109", "2014-11-06 15:01:25", "1", "CoupleOther", "1")
	do ..SaveParticipant("533", "98", "2014-11-06 15:01:31", "1", "CoupleOther", "1")
	do ..SaveParticipant("534", "99", "2014-11-06 15:01:34", "1", "CoupleOther", "1")
	do ..SaveParticipant("535", "101", "2014-11-06 15:01:37", "1", "CoupleOther", "1")
	do ..SaveParticipant("536", "106", "2014-11-06 15:01:40", "1", "CoupleOther", "1")
	do ..SaveParticipant("537", "102", "2014-11-06 15:01:46", "1", "CoupleOther", "1")
	do ..SaveParticipant("538", "99", "2014-11-06 15:01:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("539", "101", "2014-11-06 15:01:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("540", "106", "2014-11-06 15:01:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("541", "106", "2014-11-06 15:01:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("542", "98", "2014-11-06 15:01:51", "1", "CoupleOther", "1")
	do ..SaveParticipant("543", "103", "2014-11-06 15:01:56", "1", "CoupleOther", "1")
	do ..SaveParticipant("544", "108", "2014-11-06 15:02:02", "1", "CoupleOther", "1")
	do ..SaveParticipant("545", "100", "2014-11-06 15:02:08", "1", "CoupleOther", "1")
	do ..SaveParticipant("546", "104", "2014-11-06 15:02:15", "1", "CoupleOther", "1")
	do ..SaveParticipant("547", "109", "2014-11-06 15:02:21", "1", "CoupleOther", "1")
	do ..SaveParticipant("548", "100", "2014-11-06 15:02:24", "1", "CoupleOther", "1")
	do ..SaveParticipant("549", "104", "2014-11-06 15:02:26", "1", "CoupleOther", "1")
	do ..SaveParticipant("550", "109", "2014-11-06 15:02:29", "1", "CoupleOther", "1")
	do ..SaveParticipant("551", "102", "2014-11-06 15:02:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("552", "110", "2014-11-06 15:02:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("553", "100", "2014-11-06 15:02:36", "1", "CoupleOther", "1")
	do ..SaveParticipant("554", "104", "2014-11-06 15:02:43", "1", "CoupleOther", "1")
	do ..SaveParticipant("555", "109", "2014-11-06 15:02:49", "1", "CoupleOther", "1")
	do ..SaveParticipant("556", "96", "2014-11-06 15:02:49", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("557", "105", "2014-11-06 15:02:49", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("558", "110", "2014-11-06 15:02:49", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("559", "104", "2014-11-06 15:02:52", "1", "CoupleOther", "1")
	do ..SaveParticipant("560", "109", "2014-11-06 15:02:55", "1", "CoupleOther", "1")
	do ..SaveParticipant("561", "105", "2014-11-06 15:03:02", "1", "CoupleOther", "1")
	do ..SaveParticipant("562", "101", "2014-11-06 15:03:07", "1", "CoupleOther", "1")
	do ..SaveParticipant("563", "101", "2014-11-06 15:03:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("564", "106", "2014-11-06 15:03:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("565", "104", "2014-11-06 15:03:14", "1", "CoupleOther", "1")
	do ..SaveParticipant("566", "100", "2014-11-06 15:03:20", "1", "CoupleOther", "1")
	do ..SaveParticipant("567", "109", "2014-11-06 15:03:26", "1", "CoupleOther", "1")
	do ..SaveParticipant("568", "99", "2014-11-06 15:03:32", "1", "CoupleOther", "1")
	do ..SaveParticipant("569", "101", "2014-11-06 15:03:38", "1", "CoupleOther", "1")
	do ..SaveParticipant("570", "106", "2014-11-06 15:03:44", "1", "CoupleOther", "1")
	do ..SaveParticipant("571", "104", "2014-11-06 15:03:50", "1", "CoupleOther", "1")
	do ..SaveParticipant("572", "109", "2014-11-06 15:03:57", "1", "CoupleOther", "1")
	do ..SaveParticipant("573", "104", "2014-11-06 15:03:59", "1", "CoupleOther", "1")
	do ..SaveParticipant("574", "109", "2014-11-06 15:04:02", "1", "CoupleOther", "1")
	do ..SaveParticipant("575", "98", "2014-11-06 15:04:09", "1", "CoupleOther", "1")
	do ..SaveParticipant("576", "103", "2014-11-06 15:04:15", "1", "CoupleOther", "1")
	do ..SaveParticipant("577", "108", "2014-11-06 15:04:21", "1", "CoupleOther", "1")
	do ..SaveParticipant("578", "108", "2014-11-06 15:04:28", "1", "CoupleOther", "1")
	do ..SaveParticipant("579", "100", "2014-11-06 15:04:35", "1", "CoupleOther", "1")
	do ..SaveParticipant("580", "104", "2014-11-06 15:04:41", "1", "CoupleOther", "1")
	do ..SaveParticipant("581", "110", "2014-11-06 15:04:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("582", "96", "2014-11-06 15:04:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("583", "105", "2014-11-06 15:04:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("584", "110", "2014-11-06 15:04:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("585", "110", "2014-11-06 15:04:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("586", "110", "2014-11-06 15:04:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("587", "99", "2014-11-06 15:04:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("588", "101", "2014-11-06 15:04:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("589", "106", "2014-11-06 15:04:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("590", "97", "2014-11-06 15:04:42", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("591", "100", "2014-11-06 15:04:47", "1", "CoupleOther", "1")
	do ..SaveParticipant("592", "100", "2014-11-06 15:04:53", "1", "CoupleOther", "1")
	do ..SaveParticipant("593", "109", "2014-11-06 15:05:00", "1", "CoupleOther", "1")
	do ..SaveParticipant("594", "100", "2014-11-06 15:05:00", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("595", "104", "2014-11-06 15:05:00", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("596", "99", "2014-11-06 15:05:00", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("597", "105", "2014-11-06 15:05:03", "1", "CoupleOther", "1")
	do ..SaveParticipant("598", "107", "2014-11-06 15:05:06", "1", "CoupleOther", "1")
	do ..SaveParticipant("599", "98", "2014-11-06 15:05:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("600", "103", "2014-11-06 15:05:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("601", "109", "2014-11-06 15:05:09", "1", "CoupleOther", "1")
	do ..SaveParticipant("602", "109", "2014-11-06 15:05:12", "1", "CoupleOther", "1")
	do ..SaveParticipant("603", "110", "2014-11-06 15:05:18", "1", "CoupleOther", "1")
	do ..SaveParticipant("604", "98", "2014-11-06 15:05:18", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("605", "105", "2014-11-06 15:05:22", "1", "CoupleOther", "1")
	do ..SaveParticipant("606", "110", "2014-11-06 15:05:22", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("607", "110", "2014-11-06 15:05:24", "1", "CoupleOther", "1")
	do ..SaveParticipant("608", "99", "2014-11-06 15:05:31", "1", "CoupleOther", "1")
	do ..SaveParticipant("609", "101", "2014-11-06 15:05:37", "1", "CoupleOther", "1")
	do ..SaveParticipant("610", "106", "2014-11-06 15:05:43", "1", "CoupleOther", "1")
	do ..SaveParticipant("611", "105", "2014-11-06 15:05:49", "1", "CoupleOther", "1")
	do ..SaveParticipant("612", "110", "2014-11-06 15:05:49", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("613", "96", "2014-11-06 15:05:54", "1", "CoupleOther", "1")
	do ..SaveParticipant("614", "98", "2014-11-06 15:05:58", "1", "CoupleOther", "1")
	do ..SaveParticipant("615", "97", "2014-11-06 15:05:58", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("616", "103", "2014-11-06 15:05:58", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("617", "108", "2014-11-06 15:05:58", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("618", "101", "2014-11-06 15:06:04", "1", "CoupleOther", "1")
	do ..SaveParticipant("619", "106", "2014-11-06 15:06:10", "1", "CoupleOther", "1")
	do ..SaveParticipant("620", "96", "2014-11-06 15:06:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("621", "102", "2014-11-06 15:06:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("622", "97", "2014-11-06 15:06:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("623", "97", "2014-11-06 15:06:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("624", "106", "2014-11-06 15:06:17", "1", "CoupleOther", "1")
	do ..SaveParticipant("625", "101", "2014-11-06 15:06:24", "1", "CoupleOther", "1")
	do ..SaveParticipant("626", "99", "2014-11-06 15:06:31", "1", "CoupleOther", "1")
	do ..SaveParticipant("627", "105", "2014-11-06 15:06:31", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("628", "105", "2014-11-06 15:06:31", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("629", "107", "2014-11-06 15:06:31", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("630", "110", "2014-11-06 15:06:38", "1", "CoupleOther", "1")
	do ..SaveParticipant("631", "104", "2014-11-06 15:06:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("632", "109", "2014-11-06 15:06:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("633", "98", "2014-11-06 15:06:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("634", "110", "2014-11-06 15:06:40", "1", "CoupleOther", "1")
	do ..SaveParticipant("635", "96", "2014-11-06 15:06:40", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("636", "105", "2014-11-06 15:06:40", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("637", "110", "2014-11-06 15:06:40", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("638", "98", "2014-11-06 15:06:43", "1", "CoupleOther", "1")
	do ..SaveParticipant("639", "97", "2014-11-06 15:06:43", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("640", "99", "2014-11-06 15:06:43", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("641", "106", "2014-11-06 15:06:43", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("642", "108", "2014-11-06 15:06:43", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("643", "96", "2014-11-06 15:06:50", "1", "CoupleOther", "1")
	do ..SaveParticipant("644", "105", "2014-11-06 15:06:56", "1", "CoupleWDSF", "1")
	do ..SaveParticipant("645", "110", "2014-11-06 15:07:02", "1", "CoupleWDSF", "1")
	do ..SaveParticipant("646", "96", "2014-11-06 15:07:02", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("647", "97", "2014-11-06 15:07:02", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("648", "103", "2014-11-06 15:07:02", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("649", "96", "2014-11-06 15:07:02", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("650", "105", "2014-11-06 15:07:02", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("651", "110", "2014-11-06 15:07:02", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("652", "110", "2014-11-06 15:07:08", "1", "CoupleOther", "1")
	do ..SaveParticipant("653", "102", "2014-11-06 15:07:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("654", "110", "2014-11-06 15:07:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("655", "110", "2014-11-06 15:07:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("656", "110", "2014-11-06 15:07:15", "1", "CoupleOther", "1")
	do ..SaveParticipant("657", "100", "2014-11-06 15:07:18", "1", "CoupleOther", "1")
	do ..SaveParticipant("658", "104", "2014-11-06 15:07:21", "1", "CoupleOther", "1")
	do ..SaveParticipant("659", "109", "2014-11-06 15:07:23", "1", "CoupleOther", "1")
	do ..SaveParticipant("660", "109", "2014-11-06 15:07:23", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("661", "96", "2014-11-06 15:07:23", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("662", "101", "2014-11-06 15:07:29", "1", "CoupleOther", "1")
	do ..SaveParticipant("663", "106", "2014-11-06 15:07:34", "1", "CoupleOther", "1")
	do ..SaveParticipant("664", "102", "2014-11-06 15:07:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("665", "105", "2014-11-06 15:07:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("666", "107", "2014-11-06 15:07:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("667", "110", "2014-11-06 15:07:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("668", "97", "2014-11-06 15:07:38", "1", "CoupleOther", "1")
	do ..SaveParticipant("669", "96", "2014-11-06 15:07:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("670", "105", "2014-11-06 15:07:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("671", "110", "2014-11-06 15:07:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("672", "102", "2014-11-06 15:07:41", "1", "CoupleOther", "1")
	do ..SaveParticipant("673", "98", "2014-11-06 15:07:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("674", "110", "2014-11-06 15:07:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("675", "110", "2014-11-06 15:07:47", "1", "CoupleOther", "1")
	do ..SaveParticipant("676", "102", "2014-11-06 15:07:53", "1", "CoupleOther", "1")
	do ..SaveParticipant("677", "110", "2014-11-06 15:07:56", "1", "CoupleOther", "1")
	do ..SaveParticipant("678", "109", "2014-11-06 15:08:02", "1", "CoupleOther", "1")
	do ..SaveParticipant("679", "96", "2014-11-06 15:08:02", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("680", "100", "2014-11-06 15:08:05", "1", "CoupleOther", "1")
	do ..SaveParticipant("681", "104", "2014-11-06 15:08:08", "1", "CoupleOther", "1")
	do ..SaveParticipant("682", "109", "2014-11-06 15:08:10", "1", "CoupleOther", "1")
	do ..SaveParticipant("683", "105", "2014-11-06 15:08:16", "1", "CoupleOther", "1")
	do ..SaveParticipant("684", "109", "2014-11-06 15:08:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("685", "96", "2014-11-06 15:08:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("686", "105", "2014-11-06 15:08:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("687", "110", "2014-11-06 15:08:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("688", "110", "2014-11-06 15:08:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("689", "96", "2014-11-06 15:08:22", "1", "CoupleOther", "1")
	do ..SaveParticipant("690", "105", "2014-11-06 15:08:29", "1", "CoupleOther", "1")
	do ..SaveParticipant("691", "107", "2014-11-06 15:08:32", "1", "CoupleOther", "1")
	do ..SaveParticipant("692", "105", "2014-11-06 15:08:37", "1", "CoupleOther", "1")
	do ..SaveParticipant("693", "110", "2014-11-06 15:08:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("694", "98", "2014-11-06 15:08:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("695", "96", "2014-11-06 15:08:44", "1", "CoupleOther", "1")
	do ..SaveParticipant("696", "105", "2014-11-06 15:08:49", "1", "CoupleOther", "1")
	do ..SaveParticipant("697", "110", "2014-11-06 15:08:55", "1", "CoupleOther", "1")
	do ..SaveParticipant("698", "109", "2014-11-06 15:09:01", "1", "CoupleOther", "1")
	do ..SaveParticipant("699", "110", "2014-11-06 15:09:04", "1", "CoupleOther", "1")
	do ..SaveParticipant("700", "105", "2014-11-06 15:09:04", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("701", "104", "2014-11-06 15:09:11", "1", "CoupleOther", "1")
	do ..SaveParticipant("702", "109", "2014-11-06 15:09:16", "1", "CoupleOther", "1")
	do ..SaveParticipant("703", "110", "2014-11-06 15:09:19", "1", "CoupleOther", "1")
	do ..SaveParticipant("704", "109", "2014-11-06 15:09:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("705", "104", "2014-11-06 15:09:22", "1", "CoupleOther", "1")
	do ..SaveParticipant("706", "109", "2014-11-06 15:09:25", "1", "CoupleOther", "1")
	do ..SaveParticipant("707", "105", "2014-11-06 15:09:25", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("708", "97", "2014-11-06 15:09:25", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("709", "96", "2014-11-06 15:09:25", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("710", "105", "2014-11-06 15:09:31", "1", "CoupleOther", "1")
	do ..SaveParticipant("711", "110", "2014-11-06 15:09:31", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("712", "100", "2014-11-06 15:09:38", "1", "CoupleOther", "1")
	do ..SaveParticipant("713", "105", "2014-11-06 15:09:41", "1", "CoupleOther", "1")
	do ..SaveParticipant("714", "110", "2014-11-06 15:09:44", "1", "CoupleOther", "1")
	do ..SaveParticipant("715", "97", "2014-11-06 15:09:44", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("716", "100", "2014-11-06 15:09:44", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("717", "100", "2014-11-06 15:09:44", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("718", "109", "2014-11-06 15:09:44", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("719", "96", "2014-11-06 15:09:50", "1", "CoupleOther", "1")
	do ..SaveParticipant("720", "110", "2014-11-06 15:09:56", "1", "CoupleOther", "1")
	do ..SaveParticipant("721", "99", "2014-11-06 15:09:56", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("722", "101", "2014-11-06 15:09:57", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("723", "106", "2014-11-06 15:09:57", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("724", "100", "2014-11-06 15:09:57", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("725", "104", "2014-11-06 15:09:57", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("726", "109", "2014-11-06 15:09:57", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("727", "100", "2014-11-06 15:09:57", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("728", "104", "2014-11-06 15:09:57", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("729", "109", "2014-11-06 15:09:57", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("730", "96", "2014-11-06 15:10:00", "1", "CoupleOther", "1")
	do ..SaveParticipant("731", "105", "2014-11-06 15:10:03", "1", "CoupleOther", "1")
	do ..SaveParticipant("732", "110", "2014-11-06 15:10:06", "1", "CoupleOther", "1")
	do ..SaveParticipant("733", "99", "2014-11-06 15:10:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("734", "101", "2014-11-06 15:10:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("735", "99", "2014-11-06 15:10:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("736", "101", "2014-11-06 15:10:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("737", "108", "2014-11-06 15:10:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("738", "108", "2014-11-06 15:10:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("739", "102", "2014-11-06 15:10:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("740", "107", "2014-11-06 15:10:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("741", "97", "2014-11-06 15:10:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("742", "96", "2014-11-06 15:10:12", "1", "CoupleOther", "1")
	do ..SaveParticipant("743", "105", "2014-11-06 15:10:18", "1", "CoupleOther", "1")
	do ..SaveParticipant("744", "110", "2014-11-06 15:10:25", "1", "CoupleOther", "1")
	do ..SaveParticipant("745", "105", "2014-11-06 15:10:32", "1", "CoupleOther", "1")
	do ..SaveParticipant("746", "107", "2014-11-06 15:10:37", "1", "CoupleWDSF", "1")
	do ..SaveParticipant("747", "99", "2014-11-06 15:10:48", "1", "CoupleOther", "1")
	do ..SaveParticipant("748", "101", "2014-11-06 15:10:54", "1", "CoupleOther", "1")
	do ..SaveParticipant("749", "106", "2014-11-06 15:11:00", "1", "CoupleOther", "1")
	do ..SaveParticipant("750", "100", "2014-11-06 15:11:06", "1", "CoupleOther", "1")
	do ..SaveParticipant("751", "104", "2014-11-06 15:11:13", "1", "CoupleOther", "1")
	do ..SaveParticipant("752", "109", "2014-11-06 15:11:19", "1", "CoupleOther", "1")
	do ..SaveParticipant("753", "105", "2014-11-06 15:11:25", "1", "CoupleOther", "1")
	do ..SaveParticipant("754", "110", "2014-11-06 15:11:32", "1", "CoupleOther", "1")
	do ..SaveParticipant("755", "102", "2014-11-06 15:11:38", "1", "CoupleOther", "1")
	do ..SaveParticipant("756", "107", "2014-11-06 15:11:44", "1", "CoupleOther", "1")
	do ..SaveParticipant("757", "110", "2014-11-06 15:11:56", "1", "CoupleOther", "1")
	do ..SaveParticipant("758", "96", "2014-11-06 15:12:02", "1", "CoupleOther", "1")
	do ..SaveParticipant("759", "110", "2014-11-06 15:12:08", "1", "CoupleOther", "1")
	do ..SaveParticipant("760", "105", "2014-11-06 15:12:14", "1", "CoupleOther", "1")
	do ..SaveParticipant("761", "96", "2014-11-06 15:12:20", "1", "CoupleOther", "1")
	do ..SaveParticipant("762", "105", "2014-11-06 15:12:26", "1", "CoupleOther", "1")
	do ..SaveParticipant("763", "96", "2014-11-06 15:12:32", "1", "CoupleOther", "1")
	do ..SaveParticipant("764", "106", "2014-11-06 15:12:32", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("765", "110", "2014-11-06 15:12:32", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("766", "97", "2014-11-06 15:12:32", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("767", "105", "2014-11-06 15:12:38", "1", "CoupleOther", "1")
	do ..SaveParticipant("768", "96", "2014-11-06 15:12:40", "1", "CoupleOther", "1")
	do ..SaveParticipant("769", "105", "2014-11-06 15:12:44", "1", "CoupleOther", "1")
	do ..SaveParticipant("770", "110", "2014-11-06 15:12:47", "1", "CoupleOther", "1")
	do ..SaveParticipant("771", "104", "2014-11-06 15:12:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("772", "107", "2014-11-06 15:12:50", "1", "CoupleOther", "1")
	do ..SaveParticipant("773", "102", "2014-11-06 15:12:53", "1", "CoupleOther", "1")
	do ..SaveParticipant("774", "110", "2014-11-06 15:12:53", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("775", "110", "2014-11-06 15:12:59", "1", "CoupleOther", "1")
	do ..SaveParticipant("776", "99", "2014-11-06 15:13:05", "1", "CoupleOther", "1")
	do ..SaveParticipant("777", "102", "2014-11-06 15:13:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("778", "109", "2014-11-06 15:13:08", "1", "CoupleOther", "1")
	do ..SaveParticipant("779", "97", "2014-11-06 15:13:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("780", "96", "2014-11-06 15:13:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("781", "102", "2014-11-06 15:13:13", "1", "CoupleOther", "1")
	do ..SaveParticipant("782", "105", "2014-11-06 15:13:19", "1", "CoupleOther", "1")
	do ..SaveParticipant("783", "100", "2014-11-06 15:13:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("784", "104", "2014-11-06 15:13:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("785", "105", "2014-11-06 15:13:24", "1", "CoupleOther", "1")
	do ..SaveParticipant("786", "110", "2014-11-06 15:13:30", "1", "CoupleOther", "1")
	do ..SaveParticipant("787", "96", "2014-11-06 15:13:30", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("788", "102", "2014-11-06 15:13:30", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("789", "98", "2014-11-06 15:13:31", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("790", "99", "2014-11-06 15:13:31", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("791", "101", "2014-11-06 15:13:31", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("792", "105", "2014-11-06 15:13:33", "1", "CoupleOther", "1")
	do ..SaveParticipant("793", "99", "2014-11-06 15:13:33", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("794", "101", "2014-11-06 15:13:33", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("795", "106", "2014-11-06 15:13:33", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("796", "105", "2014-11-06 15:13:40", "1", "CoupleOther", "1")
	do ..SaveParticipant("797", "97", "2014-11-06 15:13:40", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("798", "110", "2014-11-06 15:13:42", "1", "CoupleOther", "1")
	do ..SaveParticipant("799", "98", "2014-11-06 15:13:42", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("800", "103", "2014-11-06 15:13:42", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("801", "108", "2014-11-06 15:13:42", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("802", "99", "2014-11-06 15:13:43", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("803", "97", "2014-11-06 15:13:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("804", "100", "2014-11-06 15:13:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("805", "97", "2014-11-06 15:13:50", "1", "CoupleOther", "1")
	do ..SaveParticipant("806", "104", "2014-11-06 15:13:56", "1", "CoupleOther", "1")
	do ..SaveParticipant("807", "109", "2014-11-06 15:14:01", "1", "CoupleOther", "1")
	do ..SaveParticipant("808", "105", "2014-11-06 15:14:02", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("809", "104", "2014-11-06 15:14:02", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("810", "102", "2014-11-06 15:14:09", "1", "CoupleOther", "1")
	do ..SaveParticipant("811", "110", "2014-11-06 15:14:14", "1", "CoupleOther", "1")
	do ..SaveParticipant("812", "96", "2014-11-06 15:14:20", "1", "CoupleOther", "1")
	do ..SaveParticipant("813", "105", "2014-11-06 15:14:27", "1", "CoupleOther", "1")
	do ..SaveParticipant("814", "96", "2014-11-06 15:14:34", "1", "CoupleOther", "1")
	do ..SaveParticipant("815", "105", "2014-11-06 15:14:40", "1", "CoupleOther", "1")
	do ..SaveParticipant("816", "110", "2014-11-06 15:14:47", "1", "CoupleOther", "1")
	do ..SaveParticipant("817", "100", "2014-11-06 15:14:53", "1", "CoupleOther", "1")
	do ..SaveParticipant("818", "104", "2014-11-06 15:14:59", "1", "CoupleOther", "1")
	do ..SaveParticipant("819", "109", "2014-11-06 15:15:06", "1", "CoupleOther", "1")
	do ..SaveParticipant("820", "96", "2014-11-06 15:15:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("821", "102", "2014-11-06 15:15:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("822", "110", "2014-11-06 15:15:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("823", "105", "2014-11-06 15:15:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("824", "96", "2014-11-06 15:15:12", "1", "CoupleOther", "1")
	do ..SaveParticipant("825", "102", "2014-11-06 15:15:17", "1", "CoupleOther", "1")
	do ..SaveParticipant("826", "101", "2014-11-06 15:15:20", "1", "CoupleOther", "1")
	do ..SaveParticipant("827", "97", "2014-11-06 15:15:20", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("828", "99", "2014-11-06 15:15:26", "1", "CoupleOther", "1")
	do ..SaveParticipant("829", "110", "2014-11-06 15:15:26", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("830", "110", "2014-11-06 15:15:26", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("831", "98", "2014-11-06 15:15:31", "1", "CoupleOther", "1")
	do ..SaveParticipant("832", "109", "2014-11-06 15:15:34", "1", "CoupleOther", "1")
	do ..SaveParticipant("833", "100", "2014-11-06 15:15:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("834", "104", "2014-11-06 15:15:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("835", "96", "2014-11-06 15:15:40", "1", "CoupleOther", "1")
	do ..SaveParticipant("836", "105", "2014-11-06 15:15:47", "1", "CoupleOther", "1")
	do ..SaveParticipant("837", "110", "2014-11-06 15:15:53", "1", "CoupleOther", "1")
	do ..SaveParticipant("838", "97", "2014-11-06 15:15:53", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("839", "103", "2014-11-06 15:15:53", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("840", "108", "2014-11-06 15:15:53", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("841", "97", "2014-11-06 15:15:56", "1", "CoupleOther", "1")
	do ..SaveParticipant("842", "97", "2014-11-06 15:15:59", "1", "CoupleOther", "1")
	do ..SaveParticipant("843", "97", "2014-11-06 15:16:04", "1", "CoupleOther", "1")
	do ..SaveParticipant("844", "103", "2014-11-06 15:16:09", "1", "CoupleOther", "1")
	do ..SaveParticipant("845", "108", "2014-11-06 15:16:16", "1", "CoupleOther", "1")
	do ..SaveParticipant("846", "99", "2014-11-06 15:16:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("847", "101", "2014-11-06 15:16:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("848", "106", "2014-11-06 15:16:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("849", "99", "2014-11-06 15:16:22", "1", "CoupleOther", "1")
	do ..SaveParticipant("850", "101", "2014-11-06 15:16:28", "1", "CoupleOther", "1")
	do ..SaveParticipant("851", "106", "2014-11-06 15:16:34", "1", "CoupleOther", "1")
	do ..SaveParticipant("852", "99", "2014-11-06 15:16:37", "1", "CoupleOther", "1")
	do ..SaveParticipant("853", "101", "2014-11-06 15:16:40", "1", "CoupleOther", "1")
	do ..SaveParticipant("854", "106", "2014-11-06 15:16:43", "1", "CoupleOther", "1")
	do ..SaveParticipant("855", "99", "2014-11-06 15:16:45", "1", "CoupleOther", "1")
	do ..SaveParticipant("856", "101", "2014-11-06 15:16:48", "1", "CoupleOther", "1")
	do ..SaveParticipant("857", "106", "2014-11-06 15:16:51", "1", "CoupleOther", "1")
	do ..SaveParticipant("858", "101", "2014-11-06 15:16:57", "1", "CoupleOther", "1")
	do ..SaveParticipant("859", "106", "2014-11-06 15:17:03", "1", "CoupleOther", "1")
	do ..SaveParticipant("860", "101", "2014-11-06 15:17:06", "1", "CoupleOther", "1")
	do ..SaveParticipant("861", "96", "2014-11-06 15:17:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("862", "102", "2014-11-06 15:17:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("863", "107", "2014-11-06 15:17:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("864", "96", "2014-11-06 15:17:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("865", "105", "2014-11-06 15:17:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("866", "110", "2014-11-06 15:17:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("867", "110", "2014-11-06 15:17:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("868", "96", "2014-11-06 15:17:09", "1", "CoupleOther", "1")
	do ..SaveParticipant("869", "96", "2014-11-06 15:17:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("870", "110", "2014-11-06 15:17:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("871", "98", "2014-11-06 15:17:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("872", "98", "2014-11-06 15:17:12", "1", "CoupleOther", "1")
	do ..SaveParticipant("873", "103", "2014-11-06 15:17:14", "1", "CoupleOther", "1")
	do ..SaveParticipant("874", "108", "2014-11-06 15:17:17", "1", "CoupleOther", "1")
	do ..SaveParticipant("875", "101", "2014-11-06 15:17:24", "1", "CoupleOther", "1")
	do ..SaveParticipant("876", "99", "2014-11-06 15:17:30", "1", "CoupleOther", "1")
	do ..SaveParticipant("877", "106", "2014-11-06 15:17:36", "1", "CoupleOther", "1")
	do ..SaveParticipant("878", "105", "2014-11-06 15:17:36", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("879", "98", "2014-11-06 15:17:37", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("880", "104", "2014-11-06 15:17:37", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("881", "105", "2014-11-06 15:17:40", "1", "CoupleOther", "1")
	do ..SaveParticipant("882", "102", "2014-11-06 15:17:40", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("883", "110", "2014-11-06 15:17:40", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("884", "96", "2014-11-06 15:17:45", "1", "CoupleOther", "1")
	do ..SaveParticipant("885", "100", "2014-11-06 15:17:51", "1", "CoupleOther", "1")
	do ..SaveParticipant("886", "104", "2014-11-06 15:17:57", "1", "CoupleOther", "1")
	do ..SaveParticipant("887", "109", "2014-11-06 15:18:02", "1", "CoupleOther", "1")
	do ..SaveParticipant("888", "101", "2014-11-06 15:18:02", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("889", "104", "2014-11-06 15:18:08", "1", "CoupleOther", "1")
	do ..SaveParticipant("890", "99", "2014-11-06 15:18:13", "1", "CoupleOther", "1")
	do ..SaveParticipant("891", "106", "2014-11-06 15:18:18", "1", "CoupleOther", "1")
	do ..SaveParticipant("892", "105", "2014-11-06 15:18:18", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("893", "110", "2014-11-06 15:18:23", "1", "CoupleOther", "1")
	do ..SaveParticipant("894", "104", "2014-11-06 15:18:24", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("895", "98", "2014-11-06 15:18:27", "1", "CoupleOther", "1")
	do ..SaveParticipant("896", "103", "2014-11-06 15:18:30", "1", "CoupleOther", "1")
	do ..SaveParticipant("897", "96", "2014-11-06 15:18:30", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("898", "105", "2014-11-06 15:18:30", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("899", "110", "2014-11-06 15:18:30", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("900", "110", "2014-11-06 15:18:32", "1", "CoupleOther", "1")
	do ..SaveParticipant("901", "102", "2014-11-06 15:18:32", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("902", "110", "2014-11-06 15:18:35", "1", "CoupleOther", "1")
	do ..SaveParticipant("903", "107", "2014-11-06 15:18:35", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("904", "97", "2014-11-06 15:18:41", "1", "CoupleOther", "1")
	do ..SaveParticipant("905", "105", "2014-11-06 15:18:47", "1", "CoupleOther", "1")
	do ..SaveParticipant("906", "103", "2014-11-06 15:18:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("907", "102", "2014-11-06 15:18:50", "1", "CoupleOther", "1")
	do ..SaveParticipant("908", "105", "2014-11-06 15:18:53", "1", "CoupleOther", "1")
	do ..SaveParticipant("909", "107", "2014-11-06 15:18:53", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("910", "110", "2014-11-06 15:18:53", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("911", "105", "2014-11-06 15:18:53", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("912", "110", "2014-11-06 15:18:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("913", "104", "2014-11-06 15:18:58", "1", "CoupleOther", "1")
	do ..SaveParticipant("914", "108", "2014-11-06 15:18:58", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("915", "110", "2014-11-06 15:19:03", "1", "CoupleOther", "1")
	do ..SaveParticipant("916", "102", "2014-11-06 15:19:09", "1", "CoupleOther", "1")
	do ..SaveParticipant("917", "110", "2014-11-06 15:19:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("918", "109", "2014-11-06 15:19:15", "1", "CoupleOther", "1")
	do ..SaveParticipant("919", "107", "2014-11-06 15:19:18", "1", "CoupleOther", "1")
	do ..SaveParticipant("920", "110", "2014-11-06 15:19:24", "1", "CoupleOther", "1")
	do ..SaveParticipant("921", "104", "2014-11-06 20:00:04", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("922", "109", "2014-11-06 20:00:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("923", "100", "2014-11-06 20:00:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("924", "104", "2014-11-06 20:00:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("925", "109", "2014-11-06 20:00:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("926", "98", "2014-11-06 20:00:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("927", "98", "2014-11-06 20:00:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("928", "103", "2014-11-06 20:00:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("929", "108", "2014-11-06 20:00:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("930", "100", "2014-11-06 20:00:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("931", "104", "2014-11-06 20:00:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("932", "109", "2014-11-06 20:00:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("933", "100", "2014-11-06 20:00:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("934", "104", "2014-11-06 20:00:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("935", "109", "2014-11-06 20:00:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("936", "105", "2014-11-06 20:01:14", "1", "CoupleWDSF", "1")
	do ..SaveParticipant("937", "101", "2014-11-06 20:01:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("938", "99", "2014-11-06 20:01:22", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("939", "101", "2014-11-06 20:01:22", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("940", "106", "2014-11-06 20:01:22", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("941", "104", "2014-11-06 20:01:22", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("942", "109", "2014-11-06 20:01:22", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("943", "98", "2014-11-06 20:01:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("944", "103", "2014-11-06 20:01:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("945", "108", "2014-11-06 20:01:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("946", "108", "2014-11-06 20:01:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("947", "100", "2014-11-06 20:01:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("948", "104", "2014-11-06 20:01:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("949", "100", "2014-11-06 20:01:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("950", "100", "2014-11-06 20:01:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("951", "109", "2014-11-06 20:01:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("952", "109", "2014-11-06 20:01:39", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("953", "110", "2014-11-06 20:01:39", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("954", "99", "2014-11-06 20:01:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("955", "101", "2014-11-06 20:01:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("956", "106", "2014-11-06 20:01:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("957", "105", "2014-11-06 20:01:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("958", "101", "2014-11-06 20:01:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("959", "106", "2014-11-06 20:01:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("960", "106", "2014-11-06 20:01:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("961", "101", "2014-11-06 20:01:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("962", "99", "2014-11-06 20:01:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("963", "96", "2014-11-06 20:02:14", "1", "CoupleWDSF", "1")
	do ..SaveParticipant("964", "110", "2014-11-06 20:02:32", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("965", "101", "2014-11-06 20:02:40", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("966", "106", "2014-11-06 20:02:40", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("967", "110", "2014-11-06 20:03:00", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("968", "109", "2014-11-06 20:03:00", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("969", "109", "2014-11-06 20:03:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("970", "100", "2014-11-06 20:04:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("971", "105", "2014-11-06 20:05:05", "1", "CoupleWDSF", "1")
	do ..SaveParticipant("972", "96", "2014-11-06 20:07:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("973", "96", "2014-11-06 20:07:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("974", "105", "2014-11-06 20:07:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("975", "110", "2014-11-06 20:07:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("976", "99", "2014-11-06 20:07:18", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("977", "105", "2014-11-06 20:07:32", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("978", "110", "2014-11-06 20:07:32", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("979", "104", "2014-11-06 20:07:50", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("980", "109", "2014-11-06 20:07:50", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("981", "102", "2014-11-06 20:07:50", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("982", "110", "2014-11-06 20:07:50", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("983", "98", "2014-11-06 20:09:04", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("984", "96", "2014-11-06 20:11:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("985", "100", "2014-11-06 20:11:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("986", "104", "2014-11-06 20:11:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("987", "109", "2014-11-06 20:11:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("988", "99", "2014-11-06 20:11:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("989", "106", "2014-11-06 20:11:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("990", "110", "2014-11-06 20:12:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("991", "111", "2014-11-07 09:14:46", "1", "CoupleUDSR", "2")
	do ..SaveParticipant("992", "112", "2014-11-07 09:41:36", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("993", "100", "2014-11-08 20:00:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("994", "104", "2014-11-08 20:00:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("995", "109", "2014-11-08 20:00:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("996", "107", "2014-11-08 20:07:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("997", "102", "2014-11-08 20:07:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("998", "97", "2014-11-08 20:07:37", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("999", "110", "2014-11-09 15:06:36", "1", "CoupleWDSF", "1")
	do ..SaveParticipant("1000", "96", "2014-11-09 15:06:43", "1", "CoupleWDSF", "1")
	do ..SaveParticipant("1001", "105", "2014-11-09 15:07:09", "1", "CoupleWDSF", "1")
	do ..SaveParticipant("1002", "127", "2014-11-13 19:33:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1003", "128", "2014-11-13 19:33:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1004", "129", "2014-11-13 19:33:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1005", "130", "2014-11-13 19:33:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1006", "131", "2014-11-13 19:33:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1007", "128", "2014-11-13 19:42:28", "0", "CoupleUDSR", "1")
	do ..SaveParticipant("1008", "130", "2014-11-13 19:42:28", "0", "CoupleUDSR", "1")
	do ..SaveParticipant("1009", "175", "2014-11-13 19:42:28", "0", "CoupleUDSR", "1")
	do ..SaveParticipant("1010", "180", "2014-11-13 19:42:28", "0", "CoupleUDSR", "1")
	do ..SaveParticipant("1011", "128", "2014-11-13 19:43:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1012", "130", "2014-11-13 19:43:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1013", "175", "2014-11-13 19:43:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1014", "180", "2014-11-13 19:43:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1015", "126", "2014-11-13 20:29:00", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1016", "124", "2014-11-13 20:31:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1017", "132", "2014-11-13 20:31:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1018", "174", "2014-11-14 04:28:43", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1019", "110", "2014-11-14 05:20:20", "1", "CoupleOther", "1")
	do ..SaveParticipant("1020", "110", "2014-11-14 05:21:26", "1", "CoupleOther", "1")
	do ..SaveParticipant("1021", "175", "2014-11-14 06:58:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1022", "180", "2014-11-14 06:58:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1023", "123", "2014-11-14 10:14:36", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1024", "133", "2014-11-14 10:14:36", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1025", "124", "2014-11-14 10:53:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1026", "132", "2014-11-14 10:53:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1027", "134", "2014-11-14 10:53:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1028", "128", "2014-11-14 12:44:21", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1029", "130", "2014-11-14 12:44:21", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1030", "180", "2014-11-14 12:44:21", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1031", "175", "2014-11-14 12:44:21", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1032", "127", "2014-11-14 17:17:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1033", "128", "2014-11-14 17:17:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1034", "130", "2014-11-14 17:17:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1035", "129", "2014-11-14 17:17:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1036", "175", "2014-11-14 17:17:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1037", "129", "2014-11-14 17:48:32", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1038", "131", "2014-11-14 17:49:02", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1039", "137", "2014-11-14 17:50:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1040", "131", "2014-11-14 17:55:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1041", "137", "2014-11-14 17:55:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1042", "123", "2014-11-14 17:58:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1043", "133", "2014-11-14 17:58:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1044", "172", "2014-11-14 17:58:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1045", "173", "2014-11-14 17:58:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1046", "174", "2014-11-14 17:58:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1047", "177", "2014-11-14 17:58:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1048", "124", "2014-11-14 20:05:21", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1049", "126", "2014-11-14 20:05:21", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1050", "132", "2014-11-14 20:05:21", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1051", "124", "2014-11-14 23:20:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1052", "132", "2014-11-14 23:20:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1053", "134", "2014-11-14 23:20:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1054", "180", "2014-11-15 06:44:59", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1055", "175", "2014-11-15 06:44:59", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1056", "130", "2014-11-15 06:44:59", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1057", "128", "2014-11-15 06:44:59", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1058", "137", "2014-11-15 08:09:31", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1059", "131", "2014-11-15 08:09:31", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1060", "175", "2014-11-15 09:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1061", "130", "2014-11-15 09:47:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1062", "123", "2014-11-15 11:27:24", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1063", "133", "2014-11-15 11:27:24", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1064", "175", "2014-11-15 18:07:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1065", "130", "2014-11-15 18:07:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1066", "123", "2014-11-15 18:45:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1067", "133", "2014-11-15 18:45:09", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1068", "172", "2014-11-15 19:19:27", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1069", "173", "2014-11-15 19:19:27", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1070", "177", "2014-11-15 19:19:27", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1071", "175", "2014-11-15 19:20:35", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1072", "180", "2014-11-15 19:20:35", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1073", "137", "2014-11-15 21:07:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1074", "135", "2014-11-15 21:07:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1075", "131", "2014-11-15 21:07:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1076", "127", "2014-11-15 21:07:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1077", "130", "2014-11-16 07:56:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1078", "175", "2014-11-16 07:56:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1079", "180", "2014-11-16 07:56:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1080", "122", "2014-11-16 09:30:40", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1081", "127", "2014-11-16 09:30:40", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1082", "131", "2014-11-16 09:30:40", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1083", "137", "2014-11-16 09:30:40", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1084", "175", "2014-11-16 09:30:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1085", "180", "2014-11-16 09:30:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1086", "127", "2014-11-16 09:36:43", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1087", "129", "2014-11-16 09:36:43", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1088", "131", "2014-11-16 09:36:43", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1089", "137", "2014-11-16 11:09:59", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1090", "127", "2014-11-16 15:28:03", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1091", "128", "2014-11-16 15:28:03", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1092", "129", "2014-11-16 15:30:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1093", "130", "2014-11-16 15:30:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1094", "120", "2014-11-16 16:58:59", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1095", "125", "2014-11-16 16:58:59", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1096", "180", "2014-11-16 18:58:46", "1", "CoupleWDSF", "1")
	do ..SaveParticipant("1097", "123", "2014-11-16 19:58:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1098", "133", "2014-11-16 19:58:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1099", "172", "2014-11-16 19:58:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1100", "174", "2014-11-16 19:58:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1101", "180", "2014-11-16 20:48:09", "1", "CoupleWDSF", "1")
	do ..SaveParticipant("1102", "172", "2014-11-17 05:34:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1103", "174", "2014-11-17 05:34:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1104", "177", "2014-11-17 05:34:28", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1105", "123", "2014-11-17 05:51:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1106", "133", "2014-11-17 05:51:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1107", "174", "2014-11-17 05:51:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1108", "177", "2014-11-17 05:51:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1109", "123", "2014-11-17 06:29:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1110", "133", "2014-11-17 06:29:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1111", "172", "2014-11-17 06:29:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1112", "173", "2014-11-17 06:29:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1113", "174", "2014-11-17 06:29:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1114", "177", "2014-11-17 06:29:38", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1115", "127", "2014-11-17 06:32:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1116", "129", "2014-11-17 06:32:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1117", "131", "2014-11-17 06:32:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1118", "137", "2014-11-17 06:32:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1119", "169", "2014-11-17 06:32:31", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1120", "172", "2014-11-17 06:32:31", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1121", "177", "2014-11-17 06:32:31", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1122", "131", "2014-11-17 06:40:50", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1123", "137", "2014-11-17 06:40:50", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1124", "175", "2014-11-17 06:40:50", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1125", "180", "2014-11-17 06:40:50", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1126", "176", "2014-11-17 07:52:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1127", "174", "2014-11-17 07:52:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1128", "125", "2014-11-17 07:52:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1129", "123", "2014-11-17 08:28:21", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1130", "133", "2014-11-17 08:28:21", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1131", "128", "2014-11-17 09:48:53", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1132", "130", "2014-11-17 09:48:53", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1133", "175", "2014-11-17 09:48:53", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1134", "180", "2014-11-17 09:48:53", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1135", "122", "2014-11-17 11:19:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1136", "127", "2014-11-17 11:19:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1137", "128", "2014-11-17 11:19:35", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1138", "129", "2014-11-17 11:19:35", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1139", "130", "2014-11-17 11:19:35", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1140", "131", "2014-11-17 11:19:35", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1141", "137", "2014-11-17 11:19:35", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1142", "175", "2014-11-17 11:19:35", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1143", "180", "2014-11-17 11:19:35", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1144", "123", "2014-11-17 12:45:56", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1145", "171", "2014-11-17 12:45:56", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1146", "173", "2014-11-17 12:45:56", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1147", "180", "2014-11-17 17:09:57", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1148", "131", "2014-11-17 18:31:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1149", "137", "2014-11-17 18:31:10", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1150", "122", "2014-11-17 18:31:32", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1151", "127", "2014-11-17 18:31:32", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1152", "128", "2014-11-17 18:31:32", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1153", "129", "2014-11-17 18:31:32", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1154", "130", "2014-11-17 18:31:32", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1155", "131", "2014-11-17 18:31:32", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1156", "137", "2014-11-17 18:31:32", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1157", "175", "2014-11-17 18:31:32", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1158", "180", "2014-11-17 18:31:32", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1159", "123", "2014-11-17 21:17:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1160", "133", "2014-11-17 21:17:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1161", "172", "2014-11-17 21:17:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1162", "173", "2014-11-17 21:17:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1163", "174", "2014-11-17 21:17:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1164", "177", "2014-11-17 21:17:15", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1165", "129", "2014-11-17 21:31:18", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1166", "131", "2014-11-17 21:31:18", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1167", "137", "2014-11-17 21:31:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1168", "137", "2014-11-17 21:41:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1169", "123", "2014-11-17 23:05:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1170", "133", "2014-11-17 23:05:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1171", "171", "2014-11-18 05:32:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1172", "173", "2014-11-18 05:32:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1173", "129", "2014-11-18 06:21:30", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1174", "131", "2014-11-18 06:21:30", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1175", "127", "2014-11-18 10:08:48", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1176", "131", "2014-11-18 10:08:48", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1177", "172", "2014-11-18 11:38:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1178", "177", "2014-11-18 11:38:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1179", "131", "2014-11-18 12:18:42", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1180", "129", "2014-11-18 12:18:42", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1181", "137", "2014-11-18 12:18:42", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1182", "131", "2014-11-18 12:40:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1183", "125", "2014-11-18 13:03:02", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1184", "176", "2014-11-18 13:03:02", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1185", "130", "2014-11-18 14:24:03", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1186", "175", "2014-11-18 14:24:03", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1187", "129", "2014-11-18 19:49:02", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1188", "131", "2014-11-18 19:49:02", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1189", "123", "2014-11-18 21:03:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1190", "133", "2014-11-18 21:03:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1191", "171", "2014-11-18 21:03:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1192", "172", "2014-11-18 21:03:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1193", "173", "2014-11-18 21:03:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1194", "174", "2014-11-18 21:03:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1195", "130", "2014-11-18 21:41:37", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1196", "175", "2014-11-18 21:41:37", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1197", "180", "2014-11-18 21:41:37", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1198", "127", "2014-11-19 01:32:51", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1199", "129", "2014-11-19 01:32:51", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1200", "131", "2014-11-19 01:32:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1201", "137", "2014-11-19 01:32:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1202", "125", "2014-11-19 05:27:24", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1203", "176", "2014-11-19 05:27:24", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1204", "137", "2014-11-19 05:41:51", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1205", "133", "2014-11-19 05:51:53", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1206", "172", "2014-11-19 05:51:53", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1207", "173", "2014-11-19 05:51:53", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1208", "177", "2014-11-19 05:51:53", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1209", "123", "2014-11-19 05:51:53", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1210", "174", "2014-11-19 05:51:53", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1211", "123", "2014-11-19 05:52:48", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1212", "125", "2014-11-19 05:52:48", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1213", "174", "2014-11-19 05:52:48", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1214", "176", "2014-11-19 05:52:48", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1215", "175", "2014-11-19 06:29:50", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1216", "180", "2014-11-19 06:29:50", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1217", "123", "2014-11-19 07:34:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1218", "133", "2014-11-19 07:34:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1219", "172", "2014-11-19 07:34:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1220", "173", "2014-11-19 07:34:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1221", "174", "2014-11-19 07:34:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1222", "177", "2014-11-19 07:34:05", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1223", "122", "2014-11-19 08:11:27", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1224", "137", "2014-11-19 09:07:24", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1225", "123", "2014-11-19 09:08:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1226", "133", "2014-11-19 09:08:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1227", "171", "2014-11-19 09:08:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1228", "172", "2014-11-19 09:08:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1229", "173", "2014-11-19 09:08:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1230", "174", "2014-11-19 09:08:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1231", "177", "2014-11-19 09:08:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1232", "129", "2014-11-19 09:45:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1233", "131", "2014-11-19 09:45:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1234", "137", "2014-11-19 09:45:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1235", "175", "2014-11-19 09:47:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1236", "180", "2014-11-19 09:47:52", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1237", "124", "2014-11-19 10:29:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1238", "126", "2014-11-19 10:29:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1239", "132", "2014-11-19 10:29:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1240", "126", "2014-11-19 11:57:55", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1241", "127", "2014-11-19 12:35:48", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1242", "128", "2014-11-19 12:35:48", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1243", "129", "2014-11-19 12:35:48", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1244", "130", "2014-11-19 12:35:48", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1245", "131", "2014-11-19 12:35:48", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1246", "130", "2014-11-19 13:03:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1247", "175", "2014-11-19 13:03:16", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1248", "174", "2014-11-19 13:09:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1249", "177", "2014-11-19 13:09:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1250", "180", "2014-11-19 13:11:45", "1", "CoupleWDSF", "1")
	do ..SaveParticipant("1251", "123", "2014-11-19 15:24:50", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1252", "133", "2014-11-19 15:24:50", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1253", "132", "2014-11-19 18:27:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1254", "124", "2014-11-19 18:27:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1255", "134", "2014-11-19 18:27:41", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1256", "122", "2014-11-19 20:18:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1257", "128", "2014-11-19 20:18:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1258", "175", "2014-11-19 20:18:17", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1259", "172", "2014-11-19 20:36:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1260", "173", "2014-11-19 20:36:02", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1261", "177", "2014-11-19 20:36:02", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1262", "180", "2014-11-19 20:45:25", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1263", "175", "2014-11-19 20:45:25", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1264", "169", "2014-11-19 20:59:29", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1265", "180", "2014-11-19 21:33:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1266", "131", "2014-11-19 22:22:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1267", "137", "2014-11-19 22:22:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1268", "175", "2014-11-19 22:22:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1269", "180", "2014-11-19 22:22:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1270", "180", "2014-11-20 02:34:00", "1", "CoupleWDSF", "1")
	do ..SaveParticipant("1271", "180", "2014-11-20 03:24:17", "1", "CoupleWDSF", "1")
	do ..SaveParticipant("1272", "123", "2014-11-20 06:02:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1273", "133", "2014-11-20 06:02:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1274", "172", "2014-11-20 06:02:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1275", "174", "2014-11-20 06:02:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1276", "177", "2014-11-20 06:02:14", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1277", "180", "2014-11-20 10:02:23", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1278", "175", "2014-11-20 10:02:23", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1279", "175", "2014-11-20 10:06:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1280", "180", "2014-11-20 10:06:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1281", "122", "2014-11-20 15:41:30", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1282", "121", "2014-11-20 16:31:04", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1283", "135", "2014-11-20 18:56:51", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1284", "123", "2014-11-20 19:08:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1285", "133", "2014-11-20 19:08:45", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1286", "173", "2014-11-20 19:08:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1287", "174", "2014-11-20 19:08:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1288", "177", "2014-11-20 19:08:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1289", "120", "2014-11-20 19:31:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1290", "125", "2014-11-20 19:31:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1291", "176", "2014-11-20 19:31:08", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1292", "130", "2014-11-20 20:36:23", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1293", "175", "2014-11-20 20:36:23", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1294", "136", "2014-11-20 20:52:11", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1295", "133", "2014-11-21 10:13:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1296", "177", "2014-11-21 10:13:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1297", "121", "2014-11-21 10:24:52", "1", "CoupleOther", "1")
	do ..SaveParticipant("1298", "122", "2014-11-21 10:31:21", "1", "CoupleOther", "1")
	do ..SaveParticipant("1299", "123", "2014-11-21 11:02:54", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1300", "133", "2014-11-21 11:02:54", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1301", "172", "2014-11-21 11:02:54", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1302", "173", "2014-11-21 11:02:54", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1303", "174", "2014-11-21 11:02:54", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1304", "177", "2014-11-21 11:02:54", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1305", "132", "2014-11-21 15:31:21", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1306", "124", "2014-11-21 15:31:21", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1307", "134", "2014-11-21 15:31:21", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1308", "180", "2014-11-21 16:10:36", "1", "CoupleWDSF", "1")
	do ..SaveParticipant("1309", "134", "2014-11-21 17:20:07", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1310", "128", "2014-11-21 18:07:39", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1311", "129", "2014-11-21 18:07:39", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1312", "130", "2014-11-21 18:07:39", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1313", "134", "2014-11-21 19:26:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1314", "132", "2014-11-21 19:26:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1315", "124", "2014-11-21 19:26:19", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1316", "123", "2014-11-21 19:43:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1317", "133", "2014-11-21 19:43:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1318", "171", "2014-11-21 19:43:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1319", "172", "2014-11-21 19:43:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1320", "173", "2014-11-21 19:43:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1321", "174", "2014-11-21 19:43:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1322", "177", "2014-11-21 19:43:34", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1323", "175", "2014-11-21 21:12:12", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1324", "175", "2014-11-22 01:05:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1325", "180", "2014-11-22 01:05:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1326", "126", "2014-11-22 13:12:27", "1", "CoupleOther", "1")
	do ..SaveParticipant("1327", "126", "2014-11-22 13:36:48", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1328", "124", "2014-11-22 13:52:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1329", "132", "2014-11-22 13:52:13", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1330", "130", "2014-11-22 14:45:04", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1331", "175", "2014-11-22 14:45:04", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1332", "180", "2014-11-22 14:45:04", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1333", "128", "2014-11-22 14:46:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1334", "129", "2014-11-22 14:46:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1335", "130", "2014-11-22 14:46:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1336", "131", "2014-11-22 14:46:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1337", "135", "2014-11-22 14:46:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1338", "137", "2014-11-22 14:46:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1339", "175", "2014-11-22 14:46:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1340", "178", "2014-11-22 14:46:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1341", "180", "2014-11-22 14:46:46", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1342", "137", "2014-11-22 16:00:26", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1343", "180", "2014-11-22 16:01:01", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1344", "129", "2014-11-22 16:53:06", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1345", "131", "2014-11-22 16:53:20", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1346", "137", "2014-11-22 16:53:20", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1347", "175", "2014-11-22 16:53:20", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1348", "180", "2014-11-22 16:53:20", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1349", "177", "2014-11-22 18:21:47", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1350", "172", "2014-11-22 18:29:31", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1351", "174", "2014-11-22 18:29:31", "1", "CoupleUDSR", "1")
	do ..SaveParticipant("1352", "177", "2014-11-22 18:29:31", "1", "CoupleUDSR", "1")

	
	
	


	do ..SaveParticipantCoupleUDSR("49", "13")
	do ..SaveParticipantCoupleUDSR("80", "21")
	do ..SaveParticipantCoupleUDSR("106", "28")
	do ..SaveParticipantCoupleUDSR("50", "13")
	do ..SaveParticipantCoupleUDSR("81", "21")
	do ..SaveParticipantCoupleUDSR("107", "28")
	do ..SaveParticipantCoupleUDSR("14", "5")
	do ..SaveParticipantCoupleUDSR("53", "14")
	do ..SaveParticipantCoupleUDSR("74", "20")
	do ..SaveParticipantCoupleUDSR("84", "23")
	do ..SaveParticipantCoupleUDSR("108", "28")
	do ..SaveParticipantCoupleUDSR("13", "5")
	do ..SaveParticipantCoupleUDSR("54", "14")
	do ..SaveParticipantCoupleUDSR("75", "20")
	do ..SaveParticipantCoupleUDSR("85", "23")
	do ..SaveParticipantCoupleUDSR("109", "28")
	do ..SaveParticipantCoupleUDSR("59", "17")
	do ..SaveParticipantCoupleUDSR("101", "27")
	do ..SaveParticipantCoupleUDSR("441", "111")
	do ..SaveParticipantCoupleUDSR("480", "124")
	do ..SaveParticipantCoupleUDSR("60", "17")
	do ..SaveParticipantCoupleUDSR("102", "27")
	do ..SaveParticipantCoupleUDSR("442", "111")
	do ..SaveParticipantCoupleUDSR("41", "11")
	do ..SaveParticipantCoupleUDSR("90", "24")
	do ..SaveParticipantCoupleUDSR("110", "29")
	do ..SaveParticipantCoupleUDSR("42", "11")
	do ..SaveParticipantCoupleUDSR("91", "24")
	do ..SaveParticipantCoupleUDSR("417", "18")
	do ..SaveParticipantCoupleUDSR("418", "18")
	do ..SaveParticipantCoupleUDSR("1", "1")
	do ..SaveParticipantCoupleUDSR("23", "7")
	do ..SaveParticipantCoupleUDSR("31", "9")
	do ..SaveParticipantCoupleUDSR("38", "10")
	do ..SaveParticipantCoupleUDSR("66", "19")
	do ..SaveParticipantCoupleUDSR("438", "110")
	do ..SaveParticipantCoupleUDSR("2", "1")
	do ..SaveParticipantCoupleUDSR("24", "7")
	do ..SaveParticipantCoupleUDSR("32", "9")
	do ..SaveParticipantCoupleUDSR("37", "10")
	do ..SaveParticipantCoupleUDSR("67", "19")
	do ..SaveParticipantCoupleUDSR("439", "110")
	do ..SaveParticipantCoupleUDSR("45", "12")
	do ..SaveParticipantCoupleUDSR("68", "19")
	do ..SaveParticipantCoupleUDSR("46", "12")
	do ..SaveParticipantCoupleUDSR("69", "19")
	do ..SaveParticipantCoupleUDSR("98", "26")
	do ..SaveParticipantCoupleUDSR("55", "15")
	do ..SaveParticipantCoupleUDSR("62", "18")
	do ..SaveParticipantCoupleUDSR("56", "15")
	do ..SaveParticipantCoupleUDSR("63", "18")
	do ..SaveParticipantCoupleUDSR("9", "3")
	do ..SaveParticipantCoupleUDSR("15", "6")
	do ..SaveParticipantCoupleUDSR("432", "15")
	do ..SaveParticipantCoupleUDSR("94", "25")
	do ..SaveParticipantCoupleUDSR("456", "117")
	do ..SaveParticipantCoupleUDSR("16", "6")
	do ..SaveParticipantCoupleUDSR("433", "15")
	do ..SaveParticipantCoupleUDSR("57", "16")
	do ..SaveParticipantCoupleUDSR("111", "30")
	do ..SaveParticipantCoupleUDSR("419", "107")
	do ..SaveParticipantCoupleUDSR("457", "117")
	do ..SaveParticipantCoupleUDSR("3", "1")
	do ..SaveParticipantCoupleUDSR("5", "2")
	do ..SaveParticipantCoupleUDSR("25", "7")
	do ..SaveParticipantCoupleUDSR("33", "9")
	do ..SaveParticipantCoupleUDSR("36", "10")
	do ..SaveParticipantCoupleUDSR("43", "11")
	do ..SaveParticipantCoupleUDSR("47", "12")
	do ..SaveParticipantCoupleUDSR("70", "19")
	do ..SaveParticipantCoupleUDSR("440", "110")
	do ..SaveParticipantCoupleUDSR("4", "1")
	do ..SaveParticipantCoupleUDSR("6", "2")
	do ..SaveParticipantCoupleUDSR("26", "7")
	do ..SaveParticipantCoupleUDSR("34", "9")
	do ..SaveParticipantCoupleUDSR("35", "10")
	do ..SaveParticipantCoupleUDSR("44", "11")
	do ..SaveParticipantCoupleUDSR("48", "12")
	do ..SaveParticipantCoupleUDSR("71", "19")
	do ..SaveParticipantCoupleUDSR("99", "26")
	do ..SaveParticipantCoupleUDSR("17", "6")
	do ..SaveParticipantCoupleUDSR("434", "15")
	do ..SaveParticipantCoupleUDSR("420", "107")
	do ..SaveParticipantCoupleUDSR("18", "6")
	do ..SaveParticipantCoupleUDSR("435", "15")
	do ..SaveParticipantCoupleUDSR("421", "107")
	do ..SaveParticipantCoupleUDSR("431", "109")
	do ..SaveParticipantCoupleUDSR("10", "3")
	do ..SaveParticipantCoupleUDSR("436", "15")
	do ..SaveParticipantCoupleUDSR("437", "15")
	do ..SaveParticipantCoupleUDSR("58", "16")
	do ..SaveParticipantCoupleUDSR("95", "25")
	do ..SaveParticipantCoupleUDSR("422", "107")
	do ..SaveParticipantCoupleUDSR("458", "117")
	do ..SaveParticipantCoupleUDSR("103", "27")
	do ..SaveParticipantCoupleUDSR("414", "105")
	do ..SaveParticipantCoupleUDSR("443", "111")
	do ..SaveParticipantCoupleUDSR("104", "27")
	do ..SaveParticipantCoupleUDSR("444", "111")
	do ..SaveParticipantCoupleUDSR("61", "17")
	do ..SaveParticipantCoupleUDSR("105", "27")
	do ..SaveParticipantCoupleUDSR("445", "111")
	do ..SaveParticipantCoupleUDSR("51", "5")
	do ..SaveParticipantCoupleUDSR("76", "20")
	do ..SaveParticipantCoupleUDSR("86", "23")
	do ..SaveParticipantCoupleUDSR("450", "116")
	do ..SaveParticipantCoupleUDSR("52", "5")
	do ..SaveParticipantCoupleUDSR("77", "20")
	do ..SaveParticipantCoupleUDSR("87", "23")
	do ..SaveParticipantCoupleUDSR("451", "116")
	do ..SaveParticipantCoupleUDSR("29", "8")
	do ..SaveParticipantCoupleUDSR("427", "108")
	do ..SaveParticipantCoupleUDSR("466", "120")
	do ..SaveParticipantCoupleUDSR("472", "122")
	do ..SaveParticipantCoupleUDSR("30", "8")
	do ..SaveParticipantCoupleUDSR("428", "108")
	do ..SaveParticipantCoupleUDSR("467", "120")
	do ..SaveParticipantCoupleUDSR("473", "122")
	do ..SaveParticipantCoupleUDSR("78", "20")
	do ..SaveParticipantCoupleUDSR("88", "23")
	do ..SaveParticipantCoupleUDSR("454", "76")
	do ..SaveParticipantCoupleUDSR("429", "108")
	do ..SaveParticipantCoupleUDSR("452", "116")
	do ..SaveParticipantCoupleUDSR("468", "120")
	do ..SaveParticipantCoupleUDSR("470", "121")
	do ..SaveParticipantCoupleUDSR("474", "122")
	do ..SaveParticipantCoupleUDSR("79", "20")
	do ..SaveParticipantCoupleUDSR("89", "23")
	do ..SaveParticipantCoupleUDSR("455", "76")
	do ..SaveParticipantCoupleUDSR("430", "108")
	do ..SaveParticipantCoupleUDSR("453", "116")
	do ..SaveParticipantCoupleUDSR("469", "120")
	do ..SaveParticipantCoupleUDSR("471", "121")
	do ..SaveParticipantCoupleUDSR("475", "122")
	do ..SaveParticipantCoupleUDSR("19", "6")
	do ..SaveParticipantCoupleUDSR("484", "15")
	do ..SaveParticipantCoupleUDSR("64", "18")
	do ..SaveParticipantCoupleUDSR("112", "30")
	do ..SaveParticipantCoupleUDSR("462", "81")
	do ..SaveParticipantCoupleUDSR("423", "107")
	do ..SaveParticipantCoupleUDSR("20", "6")
	do ..SaveParticipantCoupleUDSR("485", "15")
	do ..SaveParticipantCoupleUDSR("65", "18")
	do ..SaveParticipantCoupleUDSR("113", "30")
	do ..SaveParticipantCoupleUDSR("463", "81")
	do ..SaveParticipantCoupleUDSR("424", "107")
	do ..SaveParticipantCoupleUDSR("7", "2")
	do ..SaveParticipantCoupleUDSR("27", "7")
	do ..SaveParticipantCoupleUDSR("39", "9")
	do ..SaveParticipantCoupleUDSR("72", "19")
	do ..SaveParticipantCoupleUDSR("92", "24")
	do ..SaveParticipantCoupleUDSR("100", "26")
	do ..SaveParticipantCoupleUDSR("447", "113")
	do ..SaveParticipantCoupleUDSR("448", "114")
	do ..SaveParticipantCoupleUDSR("449", "115")
	do ..SaveParticipantCoupleUDSR("21", "6")
	do ..SaveParticipantCoupleUDSR("486", "15")
	do ..SaveParticipantCoupleUDSR("82", "22")
	do ..SaveParticipantCoupleUDSR("413", "104")
	do ..SaveParticipantCoupleUDSR("425", "107")
	do ..SaveParticipantCoupleUDSR("459", "117")
	do ..SaveParticipantCoupleUDSR("476", "123")
	do ..SaveParticipantCoupleUDSR("11", "3")
	do ..SaveParticipantCoupleUDSR("22", "6")
	do ..SaveParticipantCoupleUDSR("96", "25")
	do ..SaveParticipantCoupleUDSR("412", "104")
	do ..SaveParticipantCoupleUDSR("460", "117")
	do ..SaveParticipantCoupleUDSR("477", "123")
	do ..SaveParticipantCoupleUDSR("8", "2")
	do ..SaveParticipantCoupleUDSR("28", "7")
	do ..SaveParticipantCoupleUDSR("40", "9")
	do ..SaveParticipantCoupleUDSR("73", "19")
	do ..SaveParticipantCoupleUDSR("93", "24")
	do ..SaveParticipantCoupleUDSR("446", "112")
	do ..SaveParticipantCoupleUDSR("488", "127")
	do ..SaveParticipantCoupleUDSR("12", "4")
	do ..SaveParticipantCoupleUDSR("487", "15")
	do ..SaveParticipantCoupleUDSR("83", "22")
	do ..SaveParticipantCoupleUDSR("411", "104")
	do ..SaveParticipantCoupleUDSR("415", "106")
	do ..SaveParticipantCoupleUDSR("426", "107")
	do ..SaveParticipantCoupleUDSR("461", "117")
	do ..SaveParticipantCoupleUDSR("465", "119")
	do ..SaveParticipantCoupleUDSR("478", "123")
	do ..SaveParticipantCoupleUDSR("97", "25")
	do ..SaveParticipantCoupleUDSR("410", "104")
	do ..SaveParticipantCoupleUDSR("416", "106")
	do ..SaveParticipantCoupleUDSR("464", "118")
	do ..SaveParticipantCoupleUDSR("479", "123")
	do ..SaveParticipantCoupleUDSR("114", "31")
	do ..SaveParticipantCoupleUDSR("127", "32")
	do ..SaveParticipantCoupleUDSR("409", "51")
	do ..SaveParticipantCoupleUDSR("221", "55")
	do ..SaveParticipantCoupleUDSR("234", "57")
	do ..SaveParticipantCoupleUDSR("254", "62")
	do ..SaveParticipantCoupleUDSR("263", "63")
	do ..SaveParticipantCoupleUDSR("291", "70")
	do ..SaveParticipantCoupleUDSR("303", "72")
	do ..SaveParticipantCoupleUDSR("307", "73")
	do ..SaveParticipantCoupleUDSR("348", "84")
	do ..SaveParticipantCoupleUDSR("367", "91")
	do ..SaveParticipantCoupleUDSR("400", "99")
	do ..SaveParticipantCoupleUDSR("338", "81")
	do ..SaveParticipantCoupleUDSR("373", "93")
	do ..SaveParticipantCoupleUDSR("380", "95")
	do ..SaveParticipantCoupleUDSR("387", "97")
	do ..SaveParticipantCoupleUDSR("144", "35")
	do ..SaveParticipantCoupleUDSR("217", "54")
	do ..SaveParticipantCoupleUDSR("277", "67")
	do ..SaveParticipantCoupleUDSR("340", "82")
	do ..SaveParticipantCoupleUDSR("145", "35")
	do ..SaveParticipantCoupleUDSR("169", "42")
	do ..SaveParticipantCoupleUDSR("216", "54")
	do ..SaveParticipantCoupleUDSR("278", "67")
	do ..SaveParticipantCoupleUDSR("341", "82")
	do ..SaveParticipantCoupleUDSR("357", "87")
	do ..SaveParticipantCoupleUDSR("156", "20")
	do ..SaveParticipantCoupleUDSR("120", "23")
	do ..SaveParticipantCoupleUDSR("140", "34")
	do ..SaveParticipantCoupleUDSR("148", "36")
	do ..SaveParticipantCoupleUDSR("150", "37")
	do ..SaveParticipantCoupleUDSR("152", "38")
	do ..SaveParticipantCoupleUDSR("154", "39")
	do ..SaveParticipantCoupleUDSR("208", "52")
	do ..SaveParticipantCoupleUDSR("359", "88")
	do ..SaveParticipantCoupleUDSR("157", "20")
	do ..SaveParticipantCoupleUDSR("121", "23")
	do ..SaveParticipantCoupleUDSR("141", "34")
	do ..SaveParticipantCoupleUDSR("149", "36")
	do ..SaveParticipantCoupleUDSR("151", "37")
	do ..SaveParticipantCoupleUDSR("153", "38")
	do ..SaveParticipantCoupleUDSR("155", "39")
	do ..SaveParticipantCoupleUDSR("209", "52")
	do ..SaveParticipantCoupleUDSR("360", "88")
	do ..SaveParticipantCoupleUDSR("158", "20")
	do ..SaveParticipantCoupleUDSR("122", "23")
	do ..SaveParticipantCoupleUDSR("134", "33")
	do ..SaveParticipantCoupleUDSR("146", "35")
	do ..SaveParticipantCoupleUDSR("165", "41")
	do ..SaveParticipantCoupleUDSR("170", "42")
	do ..SaveParticipantCoupleUDSR("175", "43")
	do ..SaveParticipantCoupleUDSR("181", "44")
	do ..SaveParticipantCoupleUDSR("226", "54")
	do ..SaveParticipantCoupleUDSR("267", "65")
	do ..SaveParticipantCoupleUDSR("279", "67")
	do ..SaveParticipantCoupleUDSR("315", "74")
	do ..SaveParticipantCoupleUDSR("323", "76")
	do ..SaveParticipantCoupleUDSR("342", "82")
	do ..SaveParticipantCoupleUDSR("351", "86")
	do ..SaveParticipantCoupleUDSR("128", "32")
	do ..SaveParticipantCoupleUDSR("162", "40")
	do ..SaveParticipantCoupleUDSR("194", "47")
	do ..SaveParticipantCoupleUDSR("262", "63")
	do ..SaveParticipantCoupleUDSR("292", "70")
	do ..SaveParticipantCoupleUDSR("304", "72")
	do ..SaveParticipantCoupleUDSR("308", "73")
	do ..SaveParticipantCoupleUDSR("324", "77")
	do ..SaveParticipantCoupleUDSR("344", "83")
	do ..SaveParticipantCoupleUDSR("362", "89")
	do ..SaveParticipantCoupleUDSR("385", "96")
	do ..SaveParticipantCoupleUDSR("393", "99")
	do ..SaveParticipantCoupleUDSR("404", "102")
	do ..SaveParticipantCoupleUDSR("264", "64")
	do ..SaveParticipantCoupleUDSR("349", "85")
	do ..SaveParticipantCoupleUDSR("381", "95")
	do ..SaveParticipantCoupleUDSR("399", "100")
	do ..SaveParticipantCoupleUDSR("115", "31")
	do ..SaveParticipantCoupleUDSR("129", "32")
	do ..SaveParticipantCoupleUDSR("163", "40")
	do ..SaveParticipantCoupleUDSR("193", "47")
	do ..SaveParticipantCoupleUDSR("207", "51")
	do ..SaveParticipantCoupleUDSR("212", "53")
	do ..SaveParticipantCoupleUDSR("220", "55")
	do ..SaveParticipantCoupleUDSR("235", "57")
	do ..SaveParticipantCoupleUDSR("261", "63")
	do ..SaveParticipantCoupleUDSR("286", "69")
	do ..SaveParticipantCoupleUDSR("293", "70")
	do ..SaveParticipantCoupleUDSR("390", "73")
	do ..SaveParticipantCoupleUDSR("368", "91")
	do ..SaveParticipantCoupleUDSR("375", "94")
	do ..SaveParticipantCoupleUDSR("395", "99")
	do ..SaveParticipantCoupleUDSR("159", "20")
	do ..SaveParticipantCoupleUDSR("123", "23")
	do ..SaveParticipantCoupleUDSR("135", "33")
	do ..SaveParticipantCoupleUDSR("147", "35")
	do ..SaveParticipantCoupleUDSR("164", "41")
	do ..SaveParticipantCoupleUDSR("171", "42")
	do ..SaveParticipantCoupleUDSR("176", "43")
	do ..SaveParticipantCoupleUDSR("182", "44")
	do ..SaveParticipantCoupleUDSR("227", "54")
	do ..SaveParticipantCoupleUDSR("268", "65")
	do ..SaveParticipantCoupleUDSR("280", "67")
	do ..SaveParticipantCoupleUDSR("316", "74")
	do ..SaveParticipantCoupleUDSR("326", "76")
	do ..SaveParticipantCoupleUDSR("343", "82")
	do ..SaveParticipantCoupleUDSR("352", "86")
	do ..SaveParticipantCoupleUDSR("130", "32")
	do ..SaveParticipantCoupleUDSR("161", "40")
	do ..SaveParticipantCoupleUDSR("192", "47")
	do ..SaveParticipantCoupleUDSR("197", "49")
	do ..SaveParticipantCoupleUDSR("260", "63")
	do ..SaveParticipantCoupleUDSR("294", "70")
	do ..SaveParticipantCoupleUDSR("305", "72")
	do ..SaveParticipantCoupleUDSR("309", "73")
	do ..SaveParticipantCoupleUDSR("325", "77")
	do ..SaveParticipantCoupleUDSR("331", "79")
	do ..SaveParticipantCoupleUDSR("345", "83")
	do ..SaveParticipantCoupleUDSR("361", "89")
	do ..SaveParticipantCoupleUDSR("386", "96")
	do ..SaveParticipantCoupleUDSR("394", "99")
	do ..SaveParticipantCoupleUDSR("403", "102")
	do ..SaveParticipantCoupleUDSR("189", "46")
	do ..SaveParticipantCoupleUDSR("265", "64")
	do ..SaveParticipantCoupleUDSR("301", "71")
	do ..SaveParticipantCoupleUDSR("350", "85")
	do ..SaveParticipantCoupleUDSR("382", "95")
	do ..SaveParticipantCoupleUDSR("396", "100")
	do ..SaveParticipantCoupleUDSR("116", "31")
	do ..SaveParticipantCoupleUDSR("131", "32")
	do ..SaveParticipantCoupleUDSR("160", "40")
	do ..SaveParticipantCoupleUDSR("191", "47")
	do ..SaveParticipantCoupleUDSR("201", "50")
	do ..SaveParticipantCoupleUDSR("236", "57")
	do ..SaveParticipantCoupleUDSR("253", "62")
	do ..SaveParticipantCoupleUDSR("259", "63")
	do ..SaveParticipantCoupleUDSR("287", "69")
	do ..SaveParticipantCoupleUDSR("295", "70")
	do ..SaveParticipantCoupleUDSR("306", "72")
	do ..SaveParticipantCoupleUDSR("391", "73")
	do ..SaveParticipantCoupleUDSR("332", "79")
	do ..SaveParticipantCoupleUDSR("363", "89")
	do ..SaveParticipantCoupleUDSR("369", "91")
	do ..SaveParticipantCoupleUDSR("376", "94")
	do ..SaveParticipantCoupleUDSR("339", "81")
	do ..SaveParticipantCoupleUDSR("383", "95")
	do ..SaveParticipantCoupleUDSR("388", "97")
	do ..SaveParticipantCoupleUDSR("117", "31")
	do ..SaveParticipantCoupleUDSR("132", "32")
	do ..SaveParticipantCoupleUDSR("166", "40")
	do ..SaveParticipantCoupleUDSR("190", "47")
	do ..SaveParticipantCoupleUDSR("202", "50")
	do ..SaveParticipantCoupleUDSR("206", "51")
	do ..SaveParticipantCoupleUDSR("213", "53")
	do ..SaveParticipantCoupleUDSR("237", "57")
	do ..SaveParticipantCoupleUDSR("252", "62")
	do ..SaveParticipantCoupleUDSR("258", "63")
	do ..SaveParticipantCoupleUDSR("288", "69")
	do ..SaveParticipantCoupleUDSR("296", "70")
	do ..SaveParticipantCoupleUDSR("310", "73")
	do ..SaveParticipantCoupleUDSR("333", "79")
	do ..SaveParticipantCoupleUDSR("364", "89")
	do ..SaveParticipantCoupleUDSR("370", "91")
	do ..SaveParticipantCoupleUDSR("377", "94")
	do ..SaveParticipantCoupleUDSR("408", "20")
	do ..SaveParticipantCoupleUDSR("124", "23")
	do ..SaveParticipantCoupleUDSR("136", "33")
	do ..SaveParticipantCoupleUDSR("172", "42")
	do ..SaveParticipantCoupleUDSR("177", "43")
	do ..SaveParticipantCoupleUDSR("183", "44")
	do ..SaveParticipantCoupleUDSR("228", "54")
	do ..SaveParticipantCoupleUDSR("269", "65")
	do ..SaveParticipantCoupleUDSR("276", "66")
	do ..SaveParticipantCoupleUDSR("317", "74")
	do ..SaveParticipantCoupleUDSR("327", "76")
	do ..SaveParticipantCoupleUDSR("402", "101")
	do ..SaveParticipantCoupleUDSR("358", "67")
	do ..SaveParticipantCoupleUDSR("281", "68")
	do ..SaveParticipantCoupleUDSR("353", "86")
	do ..SaveParticipantCoupleUDSR("266", "64")
	do ..SaveParticipantCoupleUDSR("321", "75")
	do ..SaveParticipantCoupleUDSR("330", "78")
	do ..SaveParticipantCoupleUDSR("374", "93")
	do ..SaveParticipantCoupleUDSR("397", "100")
	do ..SaveParticipantCoupleUDSR("245", "60")
	do ..SaveParticipantCoupleUDSR("247", "61")
	do ..SaveParticipantCoupleUDSR("346", "83")
	do ..SaveParticipantCoupleUDSR("392", "98")
	do ..SaveParticipantCoupleUDSR("200", "40")
	do ..SaveParticipantCoupleUDSR("187", "45")
	do ..SaveParticipantCoupleUDSR("222", "47")
	do ..SaveParticipantCoupleUDSR("203", "50")
	do ..SaveParticipantCoupleUDSR("219", "55")
	do ..SaveParticipantCoupleUDSR("232", "56")
	do ..SaveParticipantCoupleUDSR("238", "57")
	do ..SaveParticipantCoupleUDSR("251", "62")
	do ..SaveParticipantCoupleUDSR("257", "63")
	do ..SaveParticipantCoupleUDSR("289", "69")
	do ..SaveParticipantCoupleUDSR("297", "70")
	do ..SaveParticipantCoupleUDSR("311", "73")
	do ..SaveParticipantCoupleUDSR("389", "84")
	do ..SaveParticipantCoupleUDSR("118", "31")
	do ..SaveParticipantCoupleUDSR("195", "48")
	do ..SaveParticipantCoupleUDSR("210", "51")
	do ..SaveParticipantCoupleUDSR("214", "53")
	do ..SaveParticipantCoupleUDSR("365", "90")
	do ..SaveParticipantCoupleUDSR("133", "32")
	do ..SaveParticipantCoupleUDSR("167", "40")
	do ..SaveParticipantCoupleUDSR("223", "47")
	do ..SaveParticipantCoupleUDSR("198", "49")
	do ..SaveParticipantCoupleUDSR("218", "55")
	do ..SaveParticipantCoupleUDSR("239", "57")
	do ..SaveParticipantCoupleUDSR("256", "63")
	do ..SaveParticipantCoupleUDSR("290", "69")
	do ..SaveParticipantCoupleUDSR("298", "70")
	do ..SaveParticipantCoupleUDSR("312", "73")
	do ..SaveParticipantCoupleUDSR("336", "80")
	do ..SaveParticipantCoupleUDSR("371", "92")
	do ..SaveParticipantCoupleUDSR("282", "68")
	do ..SaveParticipantCoupleUDSR("354", "86")
	do ..SaveParticipantCoupleUDSR("283", "68")
	do ..SaveParticipantCoupleUDSR("355", "86")
	do ..SaveParticipantCoupleUDSR("137", "33")
	do ..SaveParticipantCoupleUDSR("178", "43")
	do ..SaveParticipantCoupleUDSR("184", "44")
	do ..SaveParticipantCoupleUDSR("270", "65")
	do ..SaveParticipantCoupleUDSR("318", "74")
	do ..SaveParticipantCoupleUDSR("328", "76")
	do ..SaveParticipantCoupleUDSR("401", "101")
	do ..SaveParticipantCoupleUDSR("138", "33")
	do ..SaveParticipantCoupleUDSR("179", "43")
	do ..SaveParticipantCoupleUDSR("185", "44")
	do ..SaveParticipantCoupleUDSR("271", "65")
	do ..SaveParticipantCoupleUDSR("319", "74")
	do ..SaveParticipantCoupleUDSR("329", "76")
	do ..SaveParticipantCoupleUDSR("405", "101")
	do ..SaveParticipantCoupleUDSR("125", "23")
	do ..SaveParticipantCoupleUDSR("142", "34")
	do ..SaveParticipantCoupleUDSR("229", "54")
	do ..SaveParticipantCoupleUDSR("242", "58")
	do ..SaveParticipantCoupleUDSR("244", "59")
	do ..SaveParticipantCoupleUDSR("275", "66")
	do ..SaveParticipantCoupleUDSR("406", "103")
	do ..SaveParticipantCoupleUDSR("126", "23")
	do ..SaveParticipantCoupleUDSR("143", "34")
	do ..SaveParticipantCoupleUDSR("173", "42")
	do ..SaveParticipantCoupleUDSR("230", "54")
	do ..SaveParticipantCoupleUDSR("241", "58")
	do ..SaveParticipantCoupleUDSR("243", "59")
	do ..SaveParticipantCoupleUDSR("274", "66")
	do ..SaveParticipantCoupleUDSR("407", "103")
	do ..SaveParticipantCoupleUDSR("139", "33")
	do ..SaveParticipantCoupleUDSR("174", "42")
	do ..SaveParticipantCoupleUDSR("180", "43")
	do ..SaveParticipantCoupleUDSR("186", "44")
	do ..SaveParticipantCoupleUDSR("231", "54")
	do ..SaveParticipantCoupleUDSR("240", "58")
	do ..SaveParticipantCoupleUDSR("272", "65")
	do ..SaveParticipantCoupleUDSR("273", "66")
	do ..SaveParticipantCoupleUDSR("320", "74")
	do ..SaveParticipantCoupleUDSR("284", "68")
	do ..SaveParticipantCoupleUDSR("356", "86")
	do ..SaveParticipantCoupleUDSR("302", "71")
	do ..SaveParticipantCoupleUDSR("322", "75")
	do ..SaveParticipantCoupleUDSR("384", "95")
	do ..SaveParticipantCoupleUDSR("398", "100")
	do ..SaveParticipantCoupleUDSR("246", "60")
	do ..SaveParticipantCoupleUDSR("248", "61")
	do ..SaveParticipantCoupleUDSR("334", "79")
	do ..SaveParticipantCoupleUDSR("347", "83")
	do ..SaveParticipantCoupleUDSR("366", "90")
	do ..SaveParticipantCoupleUDSR("119", "31")
	do ..SaveParticipantCoupleUDSR("196", "48")
	do ..SaveParticipantCoupleUDSR("211", "51")
	do ..SaveParticipantCoupleUDSR("215", "53")
	do ..SaveParticipantCoupleUDSR("335", "79")
	do ..SaveParticipantCoupleUDSR("285", "40")
	do ..SaveParticipantCoupleUDSR("188", "45")
	do ..SaveParticipantCoupleUDSR("224", "47")
	do ..SaveParticipantCoupleUDSR("204", "50")
	do ..SaveParticipantCoupleUDSR("233", "56")
	do ..SaveParticipantCoupleUDSR("250", "62")
	do ..SaveParticipantCoupleUDSR("255", "63")
	do ..SaveParticipantCoupleUDSR("299", "70")
	do ..SaveParticipantCoupleUDSR("313", "73")
	do ..SaveParticipantCoupleUDSR("378", "94")
	do ..SaveParticipantCoupleUDSR("168", "40")
	do ..SaveParticipantCoupleUDSR("225", "47")
	do ..SaveParticipantCoupleUDSR("199", "49")
	do ..SaveParticipantCoupleUDSR("205", "50")
	do ..SaveParticipantCoupleUDSR("249", "62")
	do ..SaveParticipantCoupleUDSR("300", "70")
	do ..SaveParticipantCoupleUDSR("314", "73")
	do ..SaveParticipantCoupleUDSR("337", "80")
	do ..SaveParticipantCoupleUDSR("372", "92")
	do ..SaveParticipantCoupleUDSR("379", "94")
	do ..SaveParticipantCoupleUDSR("489", "129")
	do ..SaveParticipantCoupleUDSR("556", "145")
	do ..SaveParticipantCoupleUDSR("582", "147")
	do ..SaveParticipantCoupleUDSR("620", "159")
	do ..SaveParticipantCoupleUDSR("635", "166")
	do ..SaveParticipantCoupleUDSR("646", "171")
	do ..SaveParticipantCoupleUDSR("649", "173")
	do ..SaveParticipantCoupleUDSR("661", "176")
	do ..SaveParticipantCoupleUDSR("669", "178")
	do ..SaveParticipantCoupleUDSR("679", "181")
	do ..SaveParticipantCoupleUDSR("685", "183")
	do ..SaveParticipantCoupleUDSR("780", "189")
	do ..SaveParticipantCoupleUDSR("709", "191")
	do ..SaveParticipantCoupleUDSR("787", "214")
	do ..SaveParticipantCoupleUDSR("820", "226")
	do ..SaveParticipantCoupleUDSR("861", "234")
	do ..SaveParticipantCoupleUDSR("864", "235")
	do ..SaveParticipantCoupleUDSR("869", "237")
	do ..SaveParticipantCoupleUDSR("897", "247")
	do ..SaveParticipantCoupleUDSR("972", "281")
	do ..SaveParticipantCoupleUDSR("973", "282")
	do ..SaveParticipantCoupleUDSR("984", "287")
	do ..SaveParticipantCoupleUDSR("518", "138")
	do ..SaveParticipantCoupleUDSR("590", "151")
	do ..SaveParticipantCoupleUDSR("615", "158")
	do ..SaveParticipantCoupleUDSR("622", "160")
	do ..SaveParticipantCoupleUDSR("623", "161")
	do ..SaveParticipantCoupleUDSR("639", "167")
	do ..SaveParticipantCoupleUDSR("647", "172")
	do ..SaveParticipantCoupleUDSR("708", "190")
	do ..SaveParticipantCoupleUDSR("715", "193")
	do ..SaveParticipantCoupleUDSR("741", "204")
	do ..SaveParticipantCoupleUDSR("766", "208")
	do ..SaveParticipantCoupleUDSR("779", "212")
	do ..SaveParticipantCoupleUDSR("797", "219")
	do ..SaveParticipantCoupleUDSR("803", "222")
	do ..SaveParticipantCoupleUDSR("827", "228")
	do ..SaveParticipantCoupleUDSR("838", "232")
	do ..SaveParticipantCoupleUDSR("998", "293")
	do ..SaveParticipantCoupleUDSR("519", "139")
	do ..SaveParticipantCoupleUDSR("599", "154")
	do ..SaveParticipantCoupleUDSR("604", "155")
	do ..SaveParticipantCoupleUDSR("633", "165")
	do ..SaveParticipantCoupleUDSR("673", "179")
	do ..SaveParticipantCoupleUDSR("694", "186")
	do ..SaveParticipantCoupleUDSR("789", "216")
	do ..SaveParticipantCoupleUDSR("799", "220")
	do ..SaveParticipantCoupleUDSR("871", "239")
	do ..SaveParticipantCoupleUDSR("879", "241")
	do ..SaveParticipantCoupleUDSR("926", "258")
	do ..SaveParticipantCoupleUDSR("927", "259")
	do ..SaveParticipantCoupleUDSR("943", "265")
	do ..SaveParticipantCoupleUDSR("983", "286")
	do ..SaveParticipantCoupleUDSR("962", "84")
	do ..SaveParticipantCoupleUDSR("495", "131")
	do ..SaveParticipantCoupleUDSR("505", "135")
	do ..SaveParticipantCoupleUDSR("538", "142")
	do ..SaveParticipantCoupleUDSR("587", "150")
	do ..SaveParticipantCoupleUDSR("596", "153")
	do ..SaveParticipantCoupleUDSR("640", "168")
	do ..SaveParticipantCoupleUDSR("721", "196")
	do ..SaveParticipantCoupleUDSR("733", "199")
	do ..SaveParticipantCoupleUDSR("735", "200")
	do ..SaveParticipantCoupleUDSR("790", "217")
	do ..SaveParticipantCoupleUDSR("793", "218")
	do ..SaveParticipantCoupleUDSR("802", "221")
	do ..SaveParticipantCoupleUDSR("846", "233")
	do ..SaveParticipantCoupleUDSR("938", "263")
	do ..SaveParticipantCoupleUDSR("954", "272")
	do ..SaveParticipantCoupleUDSR("976", "283")
	do ..SaveParticipantCoupleUDSR("988", "289")
	do ..SaveParticipantCoupleUDSR("494", "130")
	do ..SaveParticipantCoupleUDSR("500", "133")
	do ..SaveParticipantCoupleUDSR("506", "136")
	do ..SaveParticipantCoupleUDSR("512", "137")
	do ..SaveParticipantCoupleUDSR("521", "140")
	do ..SaveParticipantCoupleUDSR("594", "152")
	do ..SaveParticipantCoupleUDSR("716", "194")
	do ..SaveParticipantCoupleUDSR("717", "195")
	do ..SaveParticipantCoupleUDSR("724", "197")
	do ..SaveParticipantCoupleUDSR("727", "198")
	do ..SaveParticipantCoupleUDSR("783", "213")
	do ..SaveParticipantCoupleUDSR("804", "223")
	do ..SaveParticipantCoupleUDSR("833", "231")
	do ..SaveParticipantCoupleUDSR("923", "257")
	do ..SaveParticipantCoupleUDSR("930", "260")
	do ..SaveParticipantCoupleUDSR("933", "261")
	do ..SaveParticipantCoupleUDSR("947", "267")
	do ..SaveParticipantCoupleUDSR("949", "268")
	do ..SaveParticipantCoupleUDSR("950", "269")
	do ..SaveParticipantCoupleUDSR("970", "280")
	do ..SaveParticipantCoupleUDSR("985", "288")
	do ..SaveParticipantCoupleUDSR("993", "291")
	do ..SaveParticipantCoupleUDSR("937", "77")
	do ..SaveParticipantCoupleUDSR("961", "84")
	do ..SaveParticipantCoupleUDSR("496", "131")
	do ..SaveParticipantCoupleUDSR("563", "135")
	do ..SaveParticipantCoupleUDSR("539", "142")
	do ..SaveParticipantCoupleUDSR("588", "150")
	do ..SaveParticipantCoupleUDSR("722", "196")
	do ..SaveParticipantCoupleUDSR("734", "199")
	do ..SaveParticipantCoupleUDSR("736", "200")
	do ..SaveParticipantCoupleUDSR("791", "217")
	do ..SaveParticipantCoupleUDSR("794", "218")
	do ..SaveParticipantCoupleUDSR("847", "233")
	do ..SaveParticipantCoupleUDSR("888", "244")
	do ..SaveParticipantCoupleUDSR("939", "263")
	do ..SaveParticipantCoupleUDSR("955", "272")
	do ..SaveParticipantCoupleUDSR("958", "274")
	do ..SaveParticipantCoupleUDSR("965", "276")
	do ..SaveParticipantCoupleUDSR("504", "134")
	do ..SaveParticipantCoupleUDSR("551", "144")
	do ..SaveParticipantCoupleUDSR("621", "159")
	do ..SaveParticipantCoupleUDSR("653", "174")
	do ..SaveParticipantCoupleUDSR("664", "177")
	do ..SaveParticipantCoupleUDSR("739", "203")
	do ..SaveParticipantCoupleUDSR("777", "211")
	do ..SaveParticipantCoupleUDSR("788", "215")
	do ..SaveParticipantCoupleUDSR("821", "226")
	do ..SaveParticipantCoupleUDSR("862", "234")
	do ..SaveParticipantCoupleUDSR("882", "243")
	do ..SaveParticipantCoupleUDSR("901", "248")
	do ..SaveParticipantCoupleUDSR("981", "285")
	do ..SaveParticipantCoupleUDSR("997", "292")
	do ..SaveParticipantCoupleUDSR("600", "154")
	do ..SaveParticipantCoupleUDSR("616", "158")
	do ..SaveParticipantCoupleUDSR("648", "172")
	do ..SaveParticipantCoupleUDSR("800", "220")
	do ..SaveParticipantCoupleUDSR("839", "232")
	do ..SaveParticipantCoupleUDSR("906", "249")
	do ..SaveParticipantCoupleUDSR("928", "259")
	do ..SaveParticipantCoupleUDSR("944", "265")
	do ..SaveParticipantCoupleUDSR("493", "130")
	do ..SaveParticipantCoupleUDSR("498", "132")
	do ..SaveParticipantCoupleUDSR("501", "133")
	do ..SaveParticipantCoupleUDSR("507", "136")
	do ..SaveParticipantCoupleUDSR("513", "137")
	do ..SaveParticipantCoupleUDSR("522", "140")
	do ..SaveParticipantCoupleUDSR("595", "152")
	do ..SaveParticipantCoupleUDSR("631", "164")
	do ..SaveParticipantCoupleUDSR("725", "197")
	do ..SaveParticipantCoupleUDSR("728", "198")
	do ..SaveParticipantCoupleUDSR("771", "209")
	do ..SaveParticipantCoupleUDSR("784", "213")
	do ..SaveParticipantCoupleUDSR("809", "225")
	do ..SaveParticipantCoupleUDSR("834", "231")
	do ..SaveParticipantCoupleUDSR("880", "242")
	do ..SaveParticipantCoupleUDSR("894", "246")
	do ..SaveParticipantCoupleUDSR("921", "255")
	do ..SaveParticipantCoupleUDSR("924", "257")
	do ..SaveParticipantCoupleUDSR("931", "260")
	do ..SaveParticipantCoupleUDSR("934", "261")
	do ..SaveParticipantCoupleUDSR("941", "264")
	do ..SaveParticipantCoupleUDSR("948", "267")
	do ..SaveParticipantCoupleUDSR("979", "284")
	do ..SaveParticipantCoupleUDSR("986", "288")
	do ..SaveParticipantCoupleUDSR("994", "291")
	do ..SaveParticipantCoupleUDSR("524", "141")
	do ..SaveParticipantCoupleUDSR("557", "145")
	do ..SaveParticipantCoupleUDSR("583", "147")
	do ..SaveParticipantCoupleUDSR("627", "162")
	do ..SaveParticipantCoupleUDSR("628", "163")
	do ..SaveParticipantCoupleUDSR("636", "166")
	do ..SaveParticipantCoupleUDSR("650", "173")
	do ..SaveParticipantCoupleUDSR("665", "177")
	do ..SaveParticipantCoupleUDSR("670", "178")
	do ..SaveParticipantCoupleUDSR("686", "183")
	do ..SaveParticipantCoupleUDSR("700", "187")
	do ..SaveParticipantCoupleUDSR("707", "189")
	do ..SaveParticipantCoupleUDSR("808", "224")
	do ..SaveParticipantCoupleUDSR("823", "227")
	do ..SaveParticipantCoupleUDSR("865", "235")
	do ..SaveParticipantCoupleUDSR("878", "240")
	do ..SaveParticipantCoupleUDSR("892", "245")
	do ..SaveParticipantCoupleUDSR("898", "247")
	do ..SaveParticipantCoupleUDSR("911", "251")
	do ..SaveParticipantCoupleUDSR("957", "273")
	do ..SaveParticipantCoupleUDSR("977", "281")
	do ..SaveParticipantCoupleUDSR("974", "282")
	do ..SaveParticipantCoupleUDSR("960", "84")
	do ..SaveParticipantCoupleUDSR("497", "131")
	do ..SaveParticipantCoupleUDSR("564", "135")
	do ..SaveParticipantCoupleUDSR("540", "142")
	do ..SaveParticipantCoupleUDSR("541", "143")
	do ..SaveParticipantCoupleUDSR("589", "150")
	do ..SaveParticipantCoupleUDSR("641", "168")
	do ..SaveParticipantCoupleUDSR("723", "196")
	do ..SaveParticipantCoupleUDSR("764", "206")
	do ..SaveParticipantCoupleUDSR("795", "218")
	do ..SaveParticipantCoupleUDSR("848", "233")
	do ..SaveParticipantCoupleUDSR("940", "263")
	do ..SaveParticipantCoupleUDSR("956", "272")
	do ..SaveParticipantCoupleUDSR("959", "274")
	do ..SaveParticipantCoupleUDSR("966", "276")
	do ..SaveParticipantCoupleUDSR("989", "289")
	do ..SaveParticipantCoupleUDSR("629", "163")
	do ..SaveParticipantCoupleUDSR("666", "177")
	do ..SaveParticipantCoupleUDSR("740", "203")
	do ..SaveParticipantCoupleUDSR("863", "234")
	do ..SaveParticipantCoupleUDSR("903", "238")
	do ..SaveParticipantCoupleUDSR("909", "250")
	do ..SaveParticipantCoupleUDSR("996", "292")
	do ..SaveParticipantCoupleUDSR("617", "158")
	do ..SaveParticipantCoupleUDSR("642", "169")
	do ..SaveParticipantCoupleUDSR("737", "201")
	do ..SaveParticipantCoupleUDSR("738", "202")
	do ..SaveParticipantCoupleUDSR("801", "220")
	do ..SaveParticipantCoupleUDSR("840", "232")
	do ..SaveParticipantCoupleUDSR("914", "253")
	do ..SaveParticipantCoupleUDSR("929", "259")
	do ..SaveParticipantCoupleUDSR("945", "265")
	do ..SaveParticipantCoupleUDSR("946", "266")
	do ..SaveParticipantCoupleUDSR("660", "130")
	do ..SaveParticipantCoupleUDSR("499", "132")
	do ..SaveParticipantCoupleUDSR("502", "133")
	do ..SaveParticipantCoupleUDSR("508", "136")
	do ..SaveParticipantCoupleUDSR("514", "137")
	do ..SaveParticipantCoupleUDSR("523", "140")
	do ..SaveParticipantCoupleUDSR("632", "164")
	do ..SaveParticipantCoupleUDSR("684", "182")
	do ..SaveParticipantCoupleUDSR("704", "188")
	do ..SaveParticipantCoupleUDSR("718", "195")
	do ..SaveParticipantCoupleUDSR("726", "197")
	do ..SaveParticipantCoupleUDSR("729", "198")
	do ..SaveParticipantCoupleUDSR("922", "256")
	do ..SaveParticipantCoupleUDSR("925", "257")
	do ..SaveParticipantCoupleUDSR("932", "260")
	do ..SaveParticipantCoupleUDSR("935", "261")
	do ..SaveParticipantCoupleUDSR("942", "264")
	do ..SaveParticipantCoupleUDSR("951", "269")
	do ..SaveParticipantCoupleUDSR("952", "270")
	do ..SaveParticipantCoupleUDSR("968", "278")
	do ..SaveParticipantCoupleUDSR("969", "279")
	do ..SaveParticipantCoupleUDSR("980", "284")
	do ..SaveParticipantCoupleUDSR("987", "288")
	do ..SaveParticipantCoupleUDSR("995", "291")
	do ..SaveParticipantCoupleUDSR("552", "144")
	do ..SaveParticipantCoupleUDSR("558", "145")
	do ..SaveParticipantCoupleUDSR("581", "146")
	do ..SaveParticipantCoupleUDSR("584", "147")
	do ..SaveParticipantCoupleUDSR("585", "148")
	do ..SaveParticipantCoupleUDSR("586", "149")
	do ..SaveParticipantCoupleUDSR("606", "156")
	do ..SaveParticipantCoupleUDSR("612", "157")
	do ..SaveParticipantCoupleUDSR("637", "166")
	do ..SaveParticipantCoupleUDSR("651", "173")
	do ..SaveParticipantCoupleUDSR("654", "174")
	do ..SaveParticipantCoupleUDSR("655", "175")
	do ..SaveParticipantCoupleUDSR("667", "177")
	do ..SaveParticipantCoupleUDSR("671", "178")
	do ..SaveParticipantCoupleUDSR("674", "180")
	do ..SaveParticipantCoupleUDSR("687", "183")
	do ..SaveParticipantCoupleUDSR("688", "184")
	do ..SaveParticipantCoupleUDSR("693", "185")
	do ..SaveParticipantCoupleUDSR("711", "192")
	do ..SaveParticipantCoupleUDSR("765", "207")
	do ..SaveParticipantCoupleUDSR("774", "210")
	do ..SaveParticipantCoupleUDSR("822", "226")
	do ..SaveParticipantCoupleUDSR("829", "229")
	do ..SaveParticipantCoupleUDSR("830", "230")
	do ..SaveParticipantCoupleUDSR("866", "235")
	do ..SaveParticipantCoupleUDSR("867", "236")
	do ..SaveParticipantCoupleUDSR("870", "238")
	do ..SaveParticipantCoupleUDSR("883", "243")
	do ..SaveParticipantCoupleUDSR("899", "247")
	do ..SaveParticipantCoupleUDSR("910", "250")
	do ..SaveParticipantCoupleUDSR("912", "252")
	do ..SaveParticipantCoupleUDSR("917", "254")
	do ..SaveParticipantCoupleUDSR("953", "271")
	do ..SaveParticipantCoupleUDSR("964", "275")
	do ..SaveParticipantCoupleUDSR("967", "277")
	do ..SaveParticipantCoupleUDSR("978", "281")
	do ..SaveParticipantCoupleUDSR("975", "282")
	do ..SaveParticipantCoupleUDSR("982", "285")
	do ..SaveParticipantCoupleUDSR("990", "290")
	do ..SaveParticipantCoupleUDSR("991", "15")
	do ..SaveParticipantCoupleUDSR("992", "15")
	do ..SaveParticipantCoupleUDSR("1094", "339")
	do ..SaveParticipantCoupleUDSR("1289", "420")
	do ..SaveParticipantCoupleUDSR("1282", "416")
	do ..SaveParticipantCoupleUDSR("1080", "256")
	do ..SaveParticipantCoupleUDSR("1135", "351")
	do ..SaveParticipantCoupleUDSR("1150", "358")
	do ..SaveParticipantCoupleUDSR("1223", "389")
	do ..SaveParticipantCoupleUDSR("1256", "406")
	do ..SaveParticipantCoupleUDSR("1281", "415")
	do ..SaveParticipantCoupleUDSR("1097", "69")
	do ..SaveParticipantCoupleUDSR("1272", "168")
	do ..SaveParticipantCoupleUDSR("1023", "304")
	do ..SaveParticipantCoupleUDSR("1042", "313")
	do ..SaveParticipantCoupleUDSR("1062", "320")
	do ..SaveParticipantCoupleUDSR("1066", "323")
	do ..SaveParticipantCoupleUDSR("1316", "329")
	do ..SaveParticipantCoupleUDSR("1105", "344")
	do ..SaveParticipantCoupleUDSR("1109", "346")
	do ..SaveParticipantCoupleUDSR("1129", "349")
	do ..SaveParticipantCoupleUDSR("1144", "352")
	do ..SaveParticipantCoupleUDSR("1225", "354")
	do ..SaveParticipantCoupleUDSR("1159", "361")
	do ..SaveParticipantCoupleUDSR("1169", "365")
	do ..SaveParticipantCoupleUDSR("1189", "378")
	do ..SaveParticipantCoupleUDSR("1209", "383")
	do ..SaveParticipantCoupleUDSR("1211", "384")
	do ..SaveParticipantCoupleUDSR("1217", "388")
	do ..SaveParticipantCoupleUDSR("1251", "402")
	do ..SaveParticipantCoupleUDSR("1284", "418")
	do ..SaveParticipantCoupleUDSR("1299", "425")
	do ..SaveParticipantCoupleUDSR("1025", "82")
	do ..SaveParticipantCoupleUDSR("1048", "86")
	do ..SaveParticipantCoupleUDSR("1016", "299")
	do ..SaveParticipantCoupleUDSR("1051", "315")
	do ..SaveParticipantCoupleUDSR("1237", "395")
	do ..SaveParticipantCoupleUDSR("1254", "405")
	do ..SaveParticipantCoupleUDSR("1306", "426")
	do ..SaveParticipantCoupleUDSR("1315", "431")
	do ..SaveParticipantCoupleUDSR("1328", "434")
	do ..SaveParticipantCoupleUDSR("1095", "339")
	do ..SaveParticipantCoupleUDSR("1128", "348")
	do ..SaveParticipantCoupleUDSR("1183", "371")
	do ..SaveParticipantCoupleUDSR("1202", "381")
	do ..SaveParticipantCoupleUDSR("1212", "384")
	do ..SaveParticipantCoupleUDSR("1290", "420")
	do ..SaveParticipantCoupleUDSR("1049", "86")
	do ..SaveParticipantCoupleUDSR("1015", "299")
	do ..SaveParticipantCoupleUDSR("1238", "395")
	do ..SaveParticipantCoupleUDSR("1240", "396")
	do ..SaveParticipantCoupleUDSR("1327", "434")
	do ..SaveParticipantCoupleUDSR("1241", "104")
	do ..SaveParticipantCoupleUDSR("1002", "137")
	do ..SaveParticipantCoupleUDSR("1081", "256")
	do ..SaveParticipantCoupleUDSR("1175", "307")
	do ..SaveParticipantCoupleUDSR("1032", "310")
	do ..SaveParticipantCoupleUDSR("1076", "327")
	do ..SaveParticipantCoupleUDSR("1086", "331")
	do ..SaveParticipantCoupleUDSR("1090", "336")
	do ..SaveParticipantCoupleUDSR("1115", "345")
	do ..SaveParticipantCoupleUDSR("1136", "351")
	do ..SaveParticipantCoupleUDSR("1151", "358")
	do ..SaveParticipantCoupleUDSR("1198", "380")
	do ..SaveParticipantCoupleUDSR("1242", "104")
	do ..SaveParticipantCoupleUDSR("1028", "106")
	do ..SaveParticipantCoupleUDSR("1003", "137")
	do ..SaveParticipantCoupleUDSR("1310", "256")
	do ..SaveParticipantCoupleUDSR("1007", "297")
	do ..SaveParticipantCoupleUDSR("1011", "298")
	do ..SaveParticipantCoupleUDSR("1033", "310")
	do ..SaveParticipantCoupleUDSR("1057", "316")
	do ..SaveParticipantCoupleUDSR("1091", "336")
	do ..SaveParticipantCoupleUDSR("1131", "350")
	do ..SaveParticipantCoupleUDSR("1137", "351")
	do ..SaveParticipantCoupleUDSR("1152", "358")
	do ..SaveParticipantCoupleUDSR("1257", "406")
	do ..SaveParticipantCoupleUDSR("1333", "436")
	do ..SaveParticipantCoupleUDSR("1243", "104")
	do ..SaveParticipantCoupleUDSR("1004", "137")
	do ..SaveParticipantCoupleUDSR("1311", "256")
	do ..SaveParticipantCoupleUDSR("1035", "310")
	do ..SaveParticipantCoupleUDSR("1037", "311")
	do ..SaveParticipantCoupleUDSR("1187", "317")
	do ..SaveParticipantCoupleUDSR("1087", "331")
	do ..SaveParticipantCoupleUDSR("1092", "336")
	do ..SaveParticipantCoupleUDSR("1116", "345")
	do ..SaveParticipantCoupleUDSR("1138", "351")
	do ..SaveParticipantCoupleUDSR("1153", "358")
	do ..SaveParticipantCoupleUDSR("1165", "363")
	do ..SaveParticipantCoupleUDSR("1173", "367")
	do ..SaveParticipantCoupleUDSR("1180", "370")
	do ..SaveParticipantCoupleUDSR("1199", "380")
	do ..SaveParticipantCoupleUDSR("1232", "392")
	do ..SaveParticipantCoupleUDSR("1334", "436")
	do ..SaveParticipantCoupleUDSR("1344", "437")
	do ..SaveParticipantCoupleUDSR("1244", "104")
	do ..SaveParticipantCoupleUDSR("1029", "106")
	do ..SaveParticipantCoupleUDSR("1005", "137")
	do ..SaveParticipantCoupleUDSR("1312", "256")
	do ..SaveParticipantCoupleUDSR("1008", "297")
	do ..SaveParticipantCoupleUDSR("1012", "298")
	do ..SaveParticipantCoupleUDSR("1034", "310")
	do ..SaveParticipantCoupleUDSR("1056", "316")
	do ..SaveParticipantCoupleUDSR("1061", "319")
	do ..SaveParticipantCoupleUDSR("1065", "322")
	do ..SaveParticipantCoupleUDSR("1077", "330")
	do ..SaveParticipantCoupleUDSR("1093", "336")
	do ..SaveParticipantCoupleUDSR("1132", "350")
	do ..SaveParticipantCoupleUDSR("1139", "351")
	do ..SaveParticipantCoupleUDSR("1154", "358")
	do ..SaveParticipantCoupleUDSR("1185", "373")
	do ..SaveParticipantCoupleUDSR("1195", "379")
	do ..SaveParticipantCoupleUDSR("1246", "397")
	do ..SaveParticipantCoupleUDSR("1292", "421")
	do ..SaveParticipantCoupleUDSR("1330", "435")
	do ..SaveParticipantCoupleUDSR("1335", "436")
	do ..SaveParticipantCoupleUDSR("1245", "104")
	do ..SaveParticipantCoupleUDSR("1006", "137")
	do ..SaveParticipantCoupleUDSR("1182", "141")
	do ..SaveParticipantCoupleUDSR("1266", "166")
	do ..SaveParticipantCoupleUDSR("1082", "256")
	do ..SaveParticipantCoupleUDSR("1176", "307")
	do ..SaveParticipantCoupleUDSR("1038", "311")
	do ..SaveParticipantCoupleUDSR("1040", "312")
	do ..SaveParticipantCoupleUDSR("1188", "317")
	do ..SaveParticipantCoupleUDSR("1059", "318")
	do ..SaveParticipantCoupleUDSR("1075", "327")
	do ..SaveParticipantCoupleUDSR("1088", "331")
	do ..SaveParticipantCoupleUDSR("1117", "345")
	do ..SaveParticipantCoupleUDSR("1122", "347")
	do ..SaveParticipantCoupleUDSR("1140", "351")
	do ..SaveParticipantCoupleUDSR("1148", "357")
	do ..SaveParticipantCoupleUDSR("1155", "358")
	do ..SaveParticipantCoupleUDSR("1166", "363")
	do ..SaveParticipantCoupleUDSR("1174", "367")
	do ..SaveParticipantCoupleUDSR("1179", "370")
	do ..SaveParticipantCoupleUDSR("1200", "380")
	do ..SaveParticipantCoupleUDSR("1233", "392")
	do ..SaveParticipantCoupleUDSR("1336", "436")
	do ..SaveParticipantCoupleUDSR("1345", "437")
	do ..SaveParticipantCoupleUDSR("1026", "82")
	do ..SaveParticipantCoupleUDSR("1050", "86")
	do ..SaveParticipantCoupleUDSR("1017", "299")
	do ..SaveParticipantCoupleUDSR("1052", "315")
	do ..SaveParticipantCoupleUDSR("1239", "395")
	do ..SaveParticipantCoupleUDSR("1253", "405")
	do ..SaveParticipantCoupleUDSR("1305", "426")
	do ..SaveParticipantCoupleUDSR("1314", "431")
	do ..SaveParticipantCoupleUDSR("1329", "434")
	do ..SaveParticipantCoupleUDSR("1098", "69")
	do ..SaveParticipantCoupleUDSR("1273", "168")
	do ..SaveParticipantCoupleUDSR("1024", "304")
	do ..SaveParticipantCoupleUDSR("1043", "313")
	do ..SaveParticipantCoupleUDSR("1063", "320")
	do ..SaveParticipantCoupleUDSR("1067", "323")
	do ..SaveParticipantCoupleUDSR("1317", "329")
	do ..SaveParticipantCoupleUDSR("1106", "344")
	do ..SaveParticipantCoupleUDSR("1110", "346")
	do ..SaveParticipantCoupleUDSR("1130", "349")
	do ..SaveParticipantCoupleUDSR("1226", "354")
	do ..SaveParticipantCoupleUDSR("1160", "361")
	do ..SaveParticipantCoupleUDSR("1170", "365")
	do ..SaveParticipantCoupleUDSR("1190", "378")
	do ..SaveParticipantCoupleUDSR("1205", "383")
	do ..SaveParticipantCoupleUDSR("1218", "388")
	do ..SaveParticipantCoupleUDSR("1252", "402")
	do ..SaveParticipantCoupleUDSR("1285", "418")
	do ..SaveParticipantCoupleUDSR("1295", "424")
	do ..SaveParticipantCoupleUDSR("1300", "425")
	do ..SaveParticipantCoupleUDSR("1027", "82")
	do ..SaveParticipantCoupleUDSR("1053", "315")
	do ..SaveParticipantCoupleUDSR("1255", "405")
	do ..SaveParticipantCoupleUDSR("1307", "426")
	do ..SaveParticipantCoupleUDSR("1309", "428")
	do ..SaveParticipantCoupleUDSR("1313", "431")
	do ..SaveParticipantCoupleUDSR("1074", "327")
	do ..SaveParticipantCoupleUDSR("1283", "417")
	do ..SaveParticipantCoupleUDSR("1337", "436")
	do ..SaveParticipantCoupleUDSR("1294", "422")
	do ..SaveParticipantCoupleUDSR("1342", "149")
	do ..SaveParticipantCoupleUDSR("1267", "166")
	do ..SaveParticipantCoupleUDSR("1083", "256")
	do ..SaveParticipantCoupleUDSR("1039", "311")
	do ..SaveParticipantCoupleUDSR("1041", "312")
	do ..SaveParticipantCoupleUDSR("1058", "318")
	do ..SaveParticipantCoupleUDSR("1073", "327")
	do ..SaveParticipantCoupleUDSR("1089", "332")
	do ..SaveParticipantCoupleUDSR("1118", "345")
	do ..SaveParticipantCoupleUDSR("1123", "347")
	do ..SaveParticipantCoupleUDSR("1141", "351")
	do ..SaveParticipantCoupleUDSR("1149", "357")
	do ..SaveParticipantCoupleUDSR("1156", "358")
	do ..SaveParticipantCoupleUDSR("1167", "363")
	do ..SaveParticipantCoupleUDSR("1168", "364")
	do ..SaveParticipantCoupleUDSR("1181", "370")
	do ..SaveParticipantCoupleUDSR("1201", "380")
	do ..SaveParticipantCoupleUDSR("1204", "382")
	do ..SaveParticipantCoupleUDSR("1224", "391")
	do ..SaveParticipantCoupleUDSR("1234", "392")
	do ..SaveParticipantCoupleUDSR("1338", "436")
	do ..SaveParticipantCoupleUDSR("1346", "437")
	do ..SaveParticipantCoupleUDSR("1119", "300")
	do ..SaveParticipantCoupleUDSR("1264", "328")
	do ..SaveParticipantCoupleUDSR("1318", "329")
	do ..SaveParticipantCoupleUDSR("1171", "343")
	do ..SaveParticipantCoupleUDSR("1145", "352")
	do ..SaveParticipantCoupleUDSR("1227", "354")
	do ..SaveParticipantCoupleUDSR("1191", "378")
	do ..SaveParticipantCoupleUDSR("1099", "69")
	do ..SaveParticipantCoupleUDSR("1274", "168")
	do ..SaveParticipantCoupleUDSR("1120", "300")
	do ..SaveParticipantCoupleUDSR("1044", "313")
	do ..SaveParticipantCoupleUDSR("1068", "324")
	do ..SaveParticipantCoupleUDSR("1319", "329")
	do ..SaveParticipantCoupleUDSR("1102", "343")
	do ..SaveParticipantCoupleUDSR("1111", "346")
	do ..SaveParticipantCoupleUDSR("1228", "354")
	do ..SaveParticipantCoupleUDSR("1161", "361")
	do ..SaveParticipantCoupleUDSR("1177", "369")
	do ..SaveParticipantCoupleUDSR("1192", "378")
	do ..SaveParticipantCoupleUDSR("1206", "383")
	do ..SaveParticipantCoupleUDSR("1219", "388")
	do ..SaveParticipantCoupleUDSR("1259", "407")
	do ..SaveParticipantCoupleUDSR("1301", "425")
	do ..SaveParticipantCoupleUDSR("1350", "439")
	do ..SaveParticipantCoupleUDSR("1045", "313")
	do ..SaveParticipantCoupleUDSR("1069", "324")
	do ..SaveParticipantCoupleUDSR("1320", "329")
	do ..SaveParticipantCoupleUDSR("1172", "343")
	do ..SaveParticipantCoupleUDSR("1112", "346")
	do ..SaveParticipantCoupleUDSR("1146", "352")
	do ..SaveParticipantCoupleUDSR("1229", "354")
	do ..SaveParticipantCoupleUDSR("1162", "361")
	do ..SaveParticipantCoupleUDSR("1193", "378")
	do ..SaveParticipantCoupleUDSR("1207", "383")
	do ..SaveParticipantCoupleUDSR("1220", "388")
	do ..SaveParticipantCoupleUDSR("1260", "407")
	do ..SaveParticipantCoupleUDSR("1286", "418")
	do ..SaveParticipantCoupleUDSR("1302", "425")
	do ..SaveParticipantCoupleUDSR("1100", "69")
	do ..SaveParticipantCoupleUDSR("1275", "168")
	do ..SaveParticipantCoupleUDSR("1018", "300")
	do ..SaveParticipantCoupleUDSR("1046", "313")
	do ..SaveParticipantCoupleUDSR("1321", "329")
	do ..SaveParticipantCoupleUDSR("1103", "343")
	do ..SaveParticipantCoupleUDSR("1107", "344")
	do ..SaveParticipantCoupleUDSR("1113", "346")
	do ..SaveParticipantCoupleUDSR("1127", "348")
	do ..SaveParticipantCoupleUDSR("1230", "354")
	do ..SaveParticipantCoupleUDSR("1163", "361")
	do ..SaveParticipantCoupleUDSR("1194", "378")
	do ..SaveParticipantCoupleUDSR("1210", "383")
	do ..SaveParticipantCoupleUDSR("1213", "384")
	do ..SaveParticipantCoupleUDSR("1221", "388")
	do ..SaveParticipantCoupleUDSR("1248", "399")
	do ..SaveParticipantCoupleUDSR("1287", "418")
	do ..SaveParticipantCoupleUDSR("1303", "425")
	do ..SaveParticipantCoupleUDSR("1351", "439")
	do ..SaveParticipantCoupleUDSR("1031", "106")
	do ..SaveParticipantCoupleUDSR("1268", "166")
	do ..SaveParticipantCoupleUDSR("1084", "256")
	do ..SaveParticipantCoupleUDSR("1009", "297")
	do ..SaveParticipantCoupleUDSR("1013", "298")
	do ..SaveParticipantCoupleUDSR("1021", "301")
	do ..SaveParticipantCoupleUDSR("1036", "310")
	do ..SaveParticipantCoupleUDSR("1055", "316")
	do ..SaveParticipantCoupleUDSR("1060", "319")
	do ..SaveParticipantCoupleUDSR("1064", "322")
	do ..SaveParticipantCoupleUDSR("1071", "325")
	do ..SaveParticipantCoupleUDSR("1078", "330")
	do ..SaveParticipantCoupleUDSR("1124", "347")
	do ..SaveParticipantCoupleUDSR("1133", "350")
	do ..SaveParticipantCoupleUDSR("1142", "351")
	do ..SaveParticipantCoupleUDSR("1157", "358")
	do ..SaveParticipantCoupleUDSR("1186", "373")
	do ..SaveParticipantCoupleUDSR("1196", "379")
	do ..SaveParticipantCoupleUDSR("1215", "385")
	do ..SaveParticipantCoupleUDSR("1235", "393")
	do ..SaveParticipantCoupleUDSR("1247", "397")
	do ..SaveParticipantCoupleUDSR("1258", "406")
	do ..SaveParticipantCoupleUDSR("1263", "408")
	do ..SaveParticipantCoupleUDSR("1278", "412")
	do ..SaveParticipantCoupleUDSR("1279", "414")
	do ..SaveParticipantCoupleUDSR("1293", "421")
	do ..SaveParticipantCoupleUDSR("1323", "432")
	do ..SaveParticipantCoupleUDSR("1324", "433")
	do ..SaveParticipantCoupleUDSR("1331", "435")
	do ..SaveParticipantCoupleUDSR("1339", "436")
	do ..SaveParticipantCoupleUDSR("1347", "437")
	do ..SaveParticipantCoupleUDSR("1126", "348")
	do ..SaveParticipantCoupleUDSR("1184", "371")
	do ..SaveParticipantCoupleUDSR("1203", "381")
	do ..SaveParticipantCoupleUDSR("1214", "384")
	do ..SaveParticipantCoupleUDSR("1291", "420")
	do ..SaveParticipantCoupleUDSR("1276", "168")
	do ..SaveParticipantCoupleUDSR("1121", "300")
	do ..SaveParticipantCoupleUDSR("1047", "313")
	do ..SaveParticipantCoupleUDSR("1070", "324")
	do ..SaveParticipantCoupleUDSR("1322", "329")
	do ..SaveParticipantCoupleUDSR("1104", "343")
	do ..SaveParticipantCoupleUDSR("1108", "344")
	do ..SaveParticipantCoupleUDSR("1114", "346")
	do ..SaveParticipantCoupleUDSR("1231", "354")
	do ..SaveParticipantCoupleUDSR("1164", "361")
	do ..SaveParticipantCoupleUDSR("1178", "369")
	do ..SaveParticipantCoupleUDSR("1208", "383")
	do ..SaveParticipantCoupleUDSR("1222", "388")
	do ..SaveParticipantCoupleUDSR("1249", "399")
	do ..SaveParticipantCoupleUDSR("1261", "407")
	do ..SaveParticipantCoupleUDSR("1288", "418")
	do ..SaveParticipantCoupleUDSR("1296", "424")
	do ..SaveParticipantCoupleUDSR("1304", "425")
	do ..SaveParticipantCoupleUDSR("1349", "438")
	do ..SaveParticipantCoupleUDSR("1352", "439")
	do ..SaveParticipantCoupleUDSR("1340", "436")
	do ..SaveParticipantCoupleUDSR("1030", "106")
	do ..SaveParticipantCoupleUDSR("1343", "149")
	do ..SaveParticipantCoupleUDSR("1265", "156")
	do ..SaveParticipantCoupleUDSR("1269", "166")
	do ..SaveParticipantCoupleUDSR("1085", "256")
	do ..SaveParticipantCoupleUDSR("1010", "297")
	do ..SaveParticipantCoupleUDSR("1014", "298")
	do ..SaveParticipantCoupleUDSR("1022", "301")
	do ..SaveParticipantCoupleUDSR("1054", "316")
	do ..SaveParticipantCoupleUDSR("1072", "325")
	do ..SaveParticipantCoupleUDSR("1079", "330")
	do ..SaveParticipantCoupleUDSR("1125", "347")
	do ..SaveParticipantCoupleUDSR("1134", "350")
	do ..SaveParticipantCoupleUDSR("1143", "351")
	do ..SaveParticipantCoupleUDSR("1147", "356")
	do ..SaveParticipantCoupleUDSR("1158", "358")
	do ..SaveParticipantCoupleUDSR("1197", "379")
	do ..SaveParticipantCoupleUDSR("1216", "385")
	do ..SaveParticipantCoupleUDSR("1236", "393")
	do ..SaveParticipantCoupleUDSR("1262", "408")
	do ..SaveParticipantCoupleUDSR("1277", "412")
	do ..SaveParticipantCoupleUDSR("1280", "414")
	do ..SaveParticipantCoupleUDSR("1325", "433")
	do ..SaveParticipantCoupleUDSR("1332", "435")
	do ..SaveParticipantCoupleUDSR("1341", "436")
	do ..SaveParticipantCoupleUDSR("1348", "437")
	
	
	
	
	do ..SaveParticipantCoupleWDSF("483", "Minsk", "Kartoplya", "126", "43498", "41882", "Trener", "")
	do ..SaveParticipantCoupleWDSF("644", "Italy", "Italy", "170", "55883", "0", "", "")
	do ..SaveParticipantCoupleWDSF("645", "Italy", "Italy", "170", "55883", "0", "", "")
	do ..SaveParticipantCoupleWDSF("746", "Tallin", "Tallin", "205", "55883", "0", "", "")
	do ..SaveParticipantCoupleWDSF("936", "Baku", "DT Shane", "262", "52144", "0", "", "")
	do ..SaveParticipantCoupleWDSF("963", "Italy", "Italy", "170", "55883", "0", "", "")
	do ..SaveParticipantCoupleWDSF("971", "Tallin", "Tallin", "205", "55883", "0", "", "")
	do ..SaveParticipantCoupleWDSF("999", "Bishkek", "Bishkek", "294", "54422", "0", "", "")
	do ..SaveParticipantCoupleWDSF("1000", "Riga", "Riga", "295", "54422", "0", "", "")
	do ..SaveParticipantCoupleWDSF("1001", "Riga", "Riga", "295", "54422", "0", "", "")
	do ..SaveParticipantCoupleWDSF("1096", "Bogota", "Kiseleva", "341", "51120", "53298", "Yulia Zhukova", "")
	do ..SaveParticipantCoupleWDSF("1101", "москва", "данс вэй", "342", "55817", "55506", "антонов евгений", "")
	do ..SaveParticipantCoupleWDSF("1250", "Riga", "Aurum", "398", "53694", "54410", "Jelena Daņiļčenko", "Gatis Sevels")
	do ..SaveParticipantCoupleWDSF("1270", "Москва", "Диамант", "410", "54595", "55288", "Гальперина Наталья", "")
	do ..SaveParticipantCoupleWDSF("1271", "Хабаровск", "Мозаика", "411", "56655", "54682", "Корнев Юрий", "")
	do ..SaveParticipantCoupleWDSF("1308", "Москва", "Академия", "427", "54237", "55082", "Дурдина Елена", "Максимов Сергей")
	
	
	do ..SaveParticipantCoupleOther("490", "Brisben", "Club", "13", "U2hlbGRvbixBZGFtLDE5OTUtMDEtMDE7UG9ydG1hbixBbm4sMTk5NS0wMS0wMg==", "56248", "Adam", "Sheldon", "56249", "Ann", "Portman", "Trener", "")
	do ..SaveParticipantCoupleOther("491", "Brisben", "Club", "13", "U2hlbGRvbixBZGFtLDE5OTUtMDEtMDE7UG9ydG1hbixBbm4sMTk5NS0wMS0wMg==", "56248", "Adam", "Sheldon", "56249", "Ann", "Portman", "Trener", "")
	do ..SaveParticipantCoupleOther("492", "Москва", "Феерия", "176", "0KSLASHQtNGA0LXQvdC+0LIs0KHRgtC10LSLASHQsNC9LDE5OTktMDEtMDE70JDQs9GA0LXQu9C+0LLQsCzQntC70YzQs9CwLDE5OTktMDEtMDE=", "57709", "Степан", "Ядренов", "57709", "Ольга", "Агрелова", " Маров Константин", " Маров Константин ")
	do ..SaveParticipantCoupleOther("503", "Орел", "Жемчужина, СДЮШОР № 1", "176", "0JSLASHQuNC70LjQv9GC0LXQtdCyLNCU0LDQvdC40LjQuywyMDAwLTAxLTAxO9Ce0LfQtdGA0L7QstCwLNCd0LDRgtCw0LvRjNGPLDIwMDAtMDEtMDE=", "58074", "Даниил", "Пилиптеев", "58074", "Наталья", "Озерова", " Озерова Ирина", " Озерова Ирина ")
	do ..SaveParticipantCoupleOther("509", "Магадан", "Танцграция", "176", "0JHQvtC60L7QsizQlNCw0L3QuNC40LssMjAwMy0wMS0wMTvQnNCw0LvQutC+0LLQsCzQktC40LrRgtC+0YDQuNGPLDIwMDMtMDEtMDE=", "59170", "Даниил", "Боков", "59170", "Виктория", "Малкова", " Землянко Олег", " Землянко Лариса ")
	do ..SaveParticipantCoupleOther("510", "Магадан", "Танцграция", "176", "0JHQvtC60L7QsizQlNCw0L3QuNC40LssMjAwMy0wMS0wMTvQnNCw0LvQutC+0LLQsCzQktC40LrRgtC+0YDQuNGPLDIwMDMtMDEtMDE=", "59170", "Даниил", "Боков", "59170", "Виктория", "Малкова", " Землянко Олег", " Землянко Лариса ")
	do ..SaveParticipantCoupleOther("511", "Магадан", "Танцграция", "176", "0JHQvtC60L7QsizQlNCw0L3QuNC40LssMjAwMy0wMS0wMTvQnNCw0LvQutC+0LLQsCzQktC40LrRgtC+0YDQuNGPLDIwMDMtMDEtMDE=", "59170", "Даниил", "Боков", "59170", "Виктория", "Малкова", " Землянко Олег", " Землянко Лариса ")
	do ..SaveParticipantCoupleOther("515", "Якутск", "Квик-степ", "176", "0JDQu9C10LrRgdC10LXQsizQlNGN0L3QuNC10LssMjAwMC0wMS0wMTvQkdCw0YDQsNC90L7QstCwLNCQ0L3QsNGB0YLQsNGB0LjRjywyMDAwLTAxLTAx", "58074", "Дэниел", "Алексеев", "58074", "Анастасия", "Баранова", " Холмогорова Наталья", " Аничхин Иван ")
	do ..SaveParticipantCoupleOther("516", "Якутск", "Квик-степ", "176", "0JDQu9C10LrRgdC10LXQsizQlNGN0L3QuNC10LssMjAwMC0wMS0wMTvQkdCw0YDQsNC90L7QstCwLNCQ0L3QsNGB0YLQsNGB0LjRjywyMDAwLTAxLTAx", "58074", "Дэниел", "Алексеев", "58074", "Анастасия", "Баранова", " Холмогорова Наталья", " Аничхин Иван ")
	do ..SaveParticipantCoupleOther("517", "Якутск", "Квик-степ", "176", "0JDQu9C10LrRgdC10LXQsizQlNGN0L3QuNC10LssMjAwMC0wMS0wMTvQkdCw0YDQsNC90L7QstCwLNCQ0L3QsNGB0YLQsNGB0LjRjywyMDAwLTAxLTAx", "58074", "Дэниел", "Алексеев", "58074", "Анастасия", "Баранова", " Холмогорова Наталья", " Аничхин Иван ")
	do ..SaveParticipantCoupleOther("520", "С.-Петербург", "Новация", "176", "0JSLASHQtdGA0LXQv9C10LvQutC40L0s0JTQvNC40YLRgNC40LksMTk5Ny0wMS0wMTvQldGE0LjQvNC10L3QutC+LNCV0LrQsNGC0LXRgNC40L3QsCwxOTk4LTAxLTAx", "56979", "Дмитрий", "Перепелкин", "57344", "Екатерина", "Ефименко", " Ильиных Александр", " Ильиных Александр ")
	do ..SaveParticipantCoupleOther("525", "Москва", "Академия", "176", "0JzRg9GA0LDRgNGDLNCa0L7QvdGB0YLQsNC90YLQuNC9LDIwMDMtMDEtMDE70KHQsNC6LNCY0LvQvtC90LAsMjAwNC0wMS0wMQ==", "59170", "Константин", "Мурару", "59535", "Илона", "Сак", " Дурдина Елена", " Дурдина Елена ")
	do ..SaveParticipantCoupleOther("526", "Москва", "Академия", "176", "0JzRg9GA0LDRgNGDLNCa0L7QvdGB0YLQsNC90YLQuNC9LDIwMDMtMDEtMDE70KHQsNC6LNCY0LvQvtC90LAsMjAwNC0wMS0wMQ==", "59170", "Константин", "Мурару", "59535", "Илона", "Сак", " Дурдина Елена", " Дурдина Елена ")
	do ..SaveParticipantCoupleOther("527", "Москва", "Академия", "176", "0JzRg9GA0LDRgNGDLNCa0L7QvdGB0YLQsNC90YLQuNC9LDIwMDMtMDEtMDE70KHQsNC6LNCY0LvQvtC90LAsMjAwNC0wMS0wMQ==", "59170", "Константин", "Мурару", "59535", "Илона", "Сак", " Дурдина Елена", " Дурдина Елена ")
	do ..SaveParticipantCoupleOther("528", "Москва", "Союз", "176", "0JPQvtC70L7QstCw0L3QvtCyLNCd0LjQutC40YLQsCwxOTk5LTAxLTAxO9Cl0L7Qu9C+0LTQuNC70L7QstCwLNCi0LDRgtGM0YSLASHQvdCwLDIwMDAtMDEtMDE=", "57709", "Никита", "Голованов", "58074", "Татьяна", "Холодилова", " Безобразов Сергей", " Безобразов Сергей ")
	do ..SaveParticipantCoupleOther("529", "Москва", "Союз", "176", "0JPQvtC70L7QstCw0L3QvtCyLNCd0LjQutC40YLQsCwxOTk5LTAxLTAxO9Cl0L7Qu9C+0LTQuNC70L7QstCwLNCi0LDRgtGM0YSLASHQvdCwLDIwMDAtMDEtMDE=", "57709", "Никита", "Голованов", "58074", "Татьяна", "Холодилова", " Безобразов Сергей", " Безобразов Сергей ")
	do ..SaveParticipantCoupleOther("530", "Магадан", "Танцграция", "176", "0JzQsNC60YHQuNC80Y7QuizQlNC80LjRgtGA0LjQuSwyMDAwLTAxLTAxO9Ce0YDQu9C+0LLRgdC60LDRjyzQkNC90L3QsCwyMDAyLTAxLTAx", "58074", "Дмитрий", "Максимюк", "58805", "Анна", "Орловская", " Землянко Олег", " Землянко Олег ")
	do ..SaveParticipantCoupleOther("531", "Магадан", "Танцграция", "176", "0JzQsNC60YHQuNC80Y7QuizQlNC80LjRgtGA0LjQuSwyMDAwLTAxLTAxO9Ce0YDQu9C+0LLRgdC60LDRjyzQkNC90L3QsCwyMDAyLTAxLTAx", "58074", "Дмитрий", "Максимюк", "58805", "Анна", "Орловская", " Землянко Олег", " Землянко Олег ")
	do ..SaveParticipantCoupleOther("532", "Магадан", "Танцграция", "176", "0JzQsNC60YHQuNC80Y7QuizQlNC80LjRgtGA0LjQuSwyMDAwLTAxLTAxO9Ce0YDQu9C+0LLRgdC60LDRjyzQkNC90L3QsCwyMDAyLTAxLTAx", "58074", "Дмитрий", "Максимюк", "58805", "Анна", "Орловская", " Землянко Олег", " Землянко Олег ")
	do ..SaveParticipantCoupleOther("533", "Москва", "Латинский квартал", "176", "0JSLASHRg9GH0LrQvtCyLNCc0LDQutGB0LjQvCwyMDAzLTAxLTAxO9Ca0YDQuNCy0YbQvtCy0LAs0JzQsNGA0LjRjywyMDA0LTAxLTAx", "59170", "Максим", "Пучков", "59535", "Мария", "Кривцова", " Дуванов Сергей", " Дуванов Сергей ")
	do ..SaveParticipantCoupleOther("534", "Москва", "Кристалл", "176", "0JjRiNCw0L3QvtCyLNCY0LLQsNC9LDIwMDItMDEtMDE70JPQuNC70YzQvNCw0L3QvtCy0LAs0JLQtdGA0L7QvdC40LrQsCwyMDAyLTAxLTAx", "58805", "Иван", "Ишанов", "58805", "Вероника", "Гильманова", " Титков Дмитрий", " Титков Дмитрий ")
	do ..SaveParticipantCoupleOther("535", "Москва", "Кристалл", "176", "0JjRiNCw0L3QvtCyLNCY0LLQsNC9LDIwMDItMDEtMDE70JPQuNC70YzQvNCw0L3QvtCy0LAs0JLQtdGA0L7QvdC40LrQsCwyMDAyLTAxLTAx", "58805", "Иван", "Ишанов", "58805", "Вероника", "Гильманова", " Титков Дмитрий", " Титков Дмитрий ")
	do ..SaveParticipantCoupleOther("536", "Москва", "Кристалл", "176", "0JjRiNCw0L3QvtCyLNCY0LLQsNC9LDIwMDItMDEtMDE70JPQuNC70YzQvNCw0L3QvtCy0LAs0JLQtdGA0L7QvdC40LrQsCwyMDAyLTAxLTAx", "58805", "Иван", "Ишанов", "58805", "Вероника", "Гильманова", " Титков Дмитрий", " Титков Дмитрий ")
	do ..SaveParticipantCoupleOther("537", "Москва", "Лидия", "176", "0J7Qs9Cw0L3QtdGB0YSLASHQvSzQldCy0LPQtdC90LjQuSwxOTk2LTAxLTAxO9Ci0L7Qu9C+0LrQvtC70YzQvdC40LrQvtCy0LAs0JrRgdC10L3QuNGPLDE5OTgtMDEtMDE=", "56613", "Евгений", "Оганесян", "57344", "Ксения", "Толокольникова", " Исаева Лидия", " Исаева Лидия ")
	do ..SaveParticipantCoupleOther("542", "Самара", "Глория", "176", "0KXQsNC60Lgs0JTQsNC90LjQuywyMDAzLTAxLTAxO9Cf0L7RgdGC0L3QuNC60L7QstCwLNCV0LvQuNC30LDQstC10YLQsCwyMDA0LTAxLTAx", "59170", "Данил", "Хаки", "59535", "Елизавета", "Постникова", " Погорельский Степан", " Погорельский Степан ")
	do ..SaveParticipantCoupleOther("543", "Самара", "Глория", "176", "0KXQsNC60Lgs0JTQsNC90LjQuywyMDAzLTAxLTAxO9Cf0L7RgdGC0L3QuNC60L7QstCwLNCV0LvQuNC30LDQstC10YLQsCwyMDA0LTAxLTAx", "59170", "Данил", "Хаки", "59535", "Елизавета", "Постникова", " Погорельский Степан", " Погорельский Степан ")
	do ..SaveParticipantCoupleOther("544", "Самара", "Глория", "176", "0KXQsNC60Lgs0JTQsNC90LjQuywyMDAzLTAxLTAxO9Cf0L7RgdGC0L3QuNC60L7QstCwLNCV0LvQuNC30LDQstC10YLQsCwyMDA0LTAxLTAx", "59170", "Данил", "Хаки", "59535", "Елизавета", "Постникова", " Погорельский Степан", " Погорельский Степан ")
	do ..SaveParticipantCoupleOther("545", "Омск", "Данс-колледж", "176", "0JXRhNC40LzQvtCy0YHQutC40YUs0JzQuNGF0LDQuNC7LDE5OTktMDEtMDE70JvQtdCx0LXQtNC10LLQsCzQldC60LDRgtC10YDQuNC90LAsMTk5OS0wMS0wMQ==", "57709", "Михаил", "Ефимовских", "57709", "Екатерина", "Лебедева", " Шарипова Эльвира", " Попенко Елена ")
	do ..SaveParticipantCoupleOther("546", "Омск", "Данс-колледж", "176", "0JXRhNC40LzQvtCy0YHQutC40YUs0JzQuNGF0LDQuNC7LDE5OTktMDEtMDE70JvQtdCx0LXQtNC10LLQsCzQldC60LDRgtC10YDQuNC90LAsMTk5OS0wMS0wMQ==", "57709", "Михаил", "Ефимовских", "57709", "Екатерина", "Лебедева", " Шарипова Эльвира", " Попенко Елена ")
	do ..SaveParticipantCoupleOther("547", "Омск", "Данс-колледж", "176", "0JXRhNC40LzQvtCy0YHQutC40YUs0JzQuNGF0LDQuNC7LDE5OTktMDEtMDE70JvQtdCx0LXQtNC10LLQsCzQldC60LDRgtC10YDQuNC90LAsMTk5OS0wMS0wMQ==", "57709", "Михаил", "Ефимовских", "57709", "Екатерина", "Лебедева", " Шарипова Эльвира", " Попенко Елена ")
	do ..SaveParticipantCoupleOther("548", "Москва", "Латинский квартал", "176", "0JvQsNCy0YDQuNC60L7QsizQnNCw0LrRgdC40LwsMTk5OS0wMS0wMTvQmtCw0YjQsNCSLASH0L7QstCwLNCU0LDRgNGM0Y8sMjAwMC0wMS0wMQ==", "57709", "Максим", "Лавриков", "58074", "Дарья", "Кашапова", " Дуванов Сергей", " Лавриков Сергей ")
	do ..SaveParticipantCoupleOther("549", "Москва", "Латинский квартал", "176", "0JvQsNCy0YDQuNC60L7QsizQnNCw0LrRgdC40LwsMTk5OS0wMS0wMTvQmtCw0YjQsNCSLASH0L7QstCwLNCU0LDRgNGM0Y8sMjAwMC0wMS0wMQ==", "57709", "Максим", "Лавриков", "58074", "Дарья", "Кашапова", " Дуванов Сергей", " Лавриков Сергей ")
	do ..SaveParticipantCoupleOther("550", "Москва", "Латинский квартал", "176", "0JvQsNCy0YDQuNC60L7QsizQnNCw0LrRgdC40LwsMTk5OS0wMS0wMTvQmtCw0YjQsNCSLASH0L7QstCwLNCU0LDRgNGM0Y8sMjAwMC0wMS0wMQ==", "57709", "Максим", "Лавриков", "58074", "Дарья", "Кашапова", " Дуванов Сергей", " Лавриков Сергей ")
	do ..SaveParticipantCoupleOther("553", "Москва", "Русский Клуб", "176", "0KHQvNC40YDQvdC+0LIs0JXQstCz0LXQvdC40LksMjAwMC0wMS0wMTvQntGA0LXRiNC40L3QsCzQldC70LjQt9Cw0LLQtdGC0LAsMjAwMC0wMS0wMQ==", "58074", "Евгений", "Смирнов", "58074", "Елизавета", "Орешина", " Никовский Виктор", " Никовский Виктор ")
	do ..SaveParticipantCoupleOther("554", "Москва", "Русский Клуб", "176", "0KHQvNC40YDQvdC+0LIs0JXQstCz0LXQvdC40LksMjAwMC0wMS0wMTvQntGA0LXRiNC40L3QsCzQldC70LjQt9Cw0LLQtdGC0LAsMjAwMC0wMS0wMQ==", "58074", "Евгений", "Смирнов", "58074", "Елизавета", "Орешина", " Никовский Виктор", " Никовский Виктор ")
	do ..SaveParticipantCoupleOther("555", "Москва", "Русский Клуб", "176", "0KHQvNC40YDQvdC+0LIs0JXQstCz0LXQvdC40LksMjAwMC0wMS0wMTvQntGA0LXRiNC40L3QsCzQldC70LjQt9Cw0LLQtdGC0LAsMjAwMC0wMS0wMQ==", "58074", "Евгений", "Смирнов", "58074", "Елизавета", "Орешина", " Никовский Виктор", " Никовский Виктор ")
	do ..SaveParticipantCoupleOther("559", "Ярославль", "Дуэт", "176", "0KHRgtCw0YjQutC+LNCU0LzQuNGC0YDQuNC5LDE5OTktMDEtMDE70KjQvtCSLASH0LjQvdCwLNCa0YDQuNGB0YLQuNC90LAsMTk5OS0wMS0wMQ==", "57709", "Дмитрий", "Сташко", "57709", "Кристина", "Шопина", " Дудочкина Светлана", " Дудочкин Сергей ")
	do ..SaveParticipantCoupleOther("560", "Ярославль", "Дуэт", "176", "0KHRgtCw0YjQutC+LNCU0LzQuNGC0YDQuNC5LDE5OTktMDEtMDE70KjQvtCSLASH0LjQvdCwLNCa0YDQuNGB0YLQuNC90LAsMTk5OS0wMS0wMQ==", "57709", "Дмитрий", "Сташко", "57709", "Кристина", "Шопина", " Дудочкина Светлана", " Дудочкин Сергей ")
	do ..SaveParticipantCoupleOther("561", "Baku", "DT Shane", "241", "TWFsaWtvdixWYWxlcml5LDE5ODMtMTAtMDc7SGFzYW5vdmEsVnVzYWxhLDE4NDAtMTItMzE=", "52144", "Valeriy", "Malikov", "0", "Vusala", "Hasanova", " Chernova T. ", "")
	do ..SaveParticipantCoupleOther("562", "Москва", "Сигма", "176", "0JzQvtGA0YXQvtCyLNCU0LDQvdC40LjQuywyMDAyLTAxLTAxO9CR0YPRgNC10L3QuNC90LAs0JXQstCwLDIwMDMtMDEtMDE=", "58805", "Даниил", "Морхов", "59170", "Ева", "Буренина", " Ведерников Сергей", " Ведерников Сергей ")
	do ..SaveParticipantCoupleOther("565", "Йошкар-Ола", "Динамо Марий Эл", "176", "0KDQtdGI0LXRgtC+0LIs0J3QuNC60LjRgtCwLDIwMDAtMDEtMDE70KDRi9Cx0LDQutC+0LLQsCzQn9C+0LvQuNC90LAsMjAwMS0wMS0wMQ==", "58074", "Никита", "Решетов", "58440", "Полина", "Рыбакова", " Ильина Ольга", " Ильина Ольга ")
	do ..SaveParticipantCoupleOther("566", "Йошкар-Ола", "Динамо Марий Эл", "176", "0KDQtdGI0LXRgtC+0LIs0J3QuNC60LjRgtCwLDIwMDAtMDEtMDE70KDRi9Cx0LDQutC+0LLQsCzQn9C+0LvQuNC90LAsMjAwMS0wMS0wMQ==", "58074", "Никита", "Решетов", "58440", "Полина", "Рыбакова", " Ильина Ольга", " Ильина Ольга ")
	do ..SaveParticipantCoupleOther("567", "Йошкар-Ола", "Динамо Марий Эл", "176", "0KDQtdGI0LXRgtC+0LIs0J3QuNC60LjRgtCwLDIwMDAtMDEtMDE70KDRi9Cx0LDQutC+0LLQsCzQn9C+0LvQuNC90LAsMjAwMS0wMS0wMQ==", "58074", "Никита", "Решетов", "58440", "Полина", "Рыбакова", " Ильина Ольга", " Ильина Ольга ")
	do ..SaveParticipantCoupleOther("568", "Магадан", "Modest", "176", "0JzQsNGA0YbQvtGF0LAs0JXQstCz0LXQvdC40LksMjAwMi0wMS0wMTvQrtGJ0LXQvdC60L4s0JXQu9C40LfQsNCy0LXRgtCwLDIwMDItMDEtMDE=", "58805", "Евгений", "Марцоха", "58805", "Елизавета", "Ющенко", " Берендеева Анастасия", " Берендеева Анастасия ")
	do ..SaveParticipantCoupleOther("569", "Магадан", "Modest", "176", "0JzQsNGA0YbQvtGF0LAs0JXQstCz0LXQvdC40LksMjAwMi0wMS0wMTvQrtGJ0LXQvdC60L4s0JXQu9C40LfQsNCy0LXRgtCwLDIwMDItMDEtMDE=", "58805", "Евгений", "Марцоха", "58805", "Елизавета", "Ющенко", " Берендеева Анастасия", " Берендеева Анастасия ")
	do ..SaveParticipantCoupleOther("570", "Магадан", "Modest", "176", "0JzQsNGA0YbQvtGF0LAs0JXQstCz0LXQvdC40LksMjAwMi0wMS0wMTvQrtGJ0LXQvdC60L4s0JXQu9C40LfQsNCy0LXRgtCwLDIwMDItMDEtMDE=", "58805", "Евгений", "Марцоха", "58805", "Елизавета", "Ющенко", " Берендеева Анастасия", " Берендеева Анастасия ")
	do ..SaveParticipantCoupleOther("571", "Магадан", "Modest", "176", "0JTQtdC80LXQvdC10LIs0KHQtdC80LXQvSwyMDAwLTAxLTAxO9Cc0LDRgtCy0LXQtdCy0LAs0JDQvdCw0YHRgtCw0YHQuNGPLDIwMDEtMDEtMDE=", "58074", "Семен", "Деменев", "58440", "Анастасия", "Матвеева", " Берендеева Анастасия", " Берендеева Анастасия ")
	do ..SaveParticipantCoupleOther("572", "Магадан", "Modest", "176", "0JTQtdC80LXQvdC10LIs0KHQtdC80LXQvSwyMDAwLTAxLTAxO9Cc0LDRgtCy0LXQtdCy0LAs0JDQvdCw0YHRgtCw0YHQuNGPLDIwMDEtMDEtMDE=", "58074", "Семен", "Деменев", "58440", "Анастасия", "Матвеева", " Берендеева Анастасия", " Берендеева Анастасия ")
	do ..SaveParticipantCoupleOther("573", "Москва", "Диамант", "176", "0JzQsNC30YPRgCzQodGC0LDQvdC40YHQu9Cw0LIsMjAwMS0wMS0wMTvQm9C40LLQtdC90YbQtdCy0LAs0JrRgNC40YHRgtC40L3QsCwyMDAwLTAxLTAx", "58440", "Станислав", "Мазур", "58074", "Кристина", "Ливенцева", " Гальперина Наталья", " Загорникова Светлана ")
	do ..SaveParticipantCoupleOther("574", "Москва", "Диамант", "176", "0JzQsNC30YPRgCzQodGC0LDQvdC40YHQu9Cw0LIsMjAwMS0wMS0wMTvQm9C40LLQtdC90YbQtdCy0LAs0JrRgNC40YHRgtC40L3QsCwyMDAwLTAxLTAx", "58440", "Станислав", "Мазур", "58074", "Кристина", "Ливенцева", " Гальперина Наталья", " Загорникова Светлана ")
	do ..SaveParticipantCoupleOther("575", "Владивосток", "ДАНС-ЛИДЕР", "176", "0J3QsNCx0LjQtdCyLNCQ0LvQtdC60YHQsNC90LTRgCwyMDAzLTAxLTAxO9CR0L7Rj9GA0LrQuNC90LAs0JXQu9C10L3QsCwyMDA0LTAxLTAx", "59170", "Александр", "Набиев", "59535", "Елена", "Бояркина", " Соловьёва Ирина", " Соловьёва Ирина ")
	do ..SaveParticipantCoupleOther("576", "Владивосток", "ДАНС-ЛИДЕР", "176", "0J3QsNCx0LjQtdCyLNCQ0LvQtdC60YHQsNC90LTRgCwyMDAzLTAxLTAxO9CR0L7Rj9GA0LrQuNC90LAs0JXQu9C10L3QsCwyMDA0LTAxLTAx", "59170", "Александр", "Набиев", "59535", "Елена", "Бояркина", " Соловьёва Ирина", " Соловьёва Ирина ")
	do ..SaveParticipantCoupleOther("577", "Владивосток", "ДАНС-ЛИДЕР", "176", "0J3QsNCx0LjQtdCyLNCQ0LvQtdC60YHQsNC90LTRgCwyMDAzLTAxLTAxO9CR0L7Rj9GA0LrQuNC90LAs0JXQu9C10L3QsCwyMDA0LTAxLTAx", "59170", "Александр", "Набиев", "59535", "Елена", "Бояркина", " Соловьёва Ирина", " Соловьёва Ирина ")
	do ..SaveParticipantCoupleOther("578", "Тверь", "КС ДЮСШОР № 1", "176", "0JDQu9C40LHQtdC60L7QsizQrdC70YzQtNCw0YAsMjAwMy0wMS0wMTvQktC+0LvQutC+0LLQsCzQndCw0YLQsNC70LjRjywyMDA0LTAxLTAx", "59170", "Эльдар", "Алибеков", "59535", "Наталия", "Волкова", " Семенова Анастасия", " Семенова Анастасия ")
	do ..SaveParticipantCoupleOther("579", "Ростов-на-Дону", "Кристалл-Данс", "176", "0J3QtdCy0LDQu9C10L3QvdGL0Lks0JzQsNC60YHQuNC8LDIwMDAtMDEtMDE70JSLASHQvtCSLASH0L7QstCwLNCV0LvQtdC90LAsMjAwMS0wMS0wMQ==", "58074", "Максим", "Неваленный", "58440", "Елена", "Попова", " Прачев Станислав", " Прачев Станислав ")
	do ..SaveParticipantCoupleOther("580", "Ростов-на-Дону", "Кристалл-Данс", "176", "0J3QtdCy0LDQu9C10L3QvdGL0Lks0JzQsNC60YHQuNC8LDIwMDAtMDEtMDE70JSLASHQvtCSLASH0L7QstCwLNCV0LvQtdC90LAsMjAwMS0wMS0wMQ==", "58074", "Максим", "Неваленный", "58440", "Елена", "Попова", " Прачев Станислав", " Прачев Станислав ")
	do ..SaveParticipantCoupleOther("591", "Владимир", "Арт-Баланс", "176", "0JLQvtC70L7RgdC+0LLRgdC60LjQuSzQktC40YLQsNC70LjQuSwxOTk5LTAxLTAxO9CU0LXQvNGP0L3QutC+0LLQsCzQmtCw0YDQuNC90LAsMTk5OS0wMS0wMQ==", "57709", "Виталий", "Волосовский", "57709", "Карина", "Демянкова", " Тараканов Олег", " Тараканов Олег ")
	do ..SaveParticipantCoupleOther("592", "Москва", "Академия", "176", "0JrRg9C70LXQsdCw0LrQuNC9LNCU0LzQuNGC0YDQuNC5LDIwMDAtMDEtMDE70J3QuNC60L7Qu9Cw0LXQstCwLNCa0LDRgNC40L3QsCwyMDAwLTAxLTAx", "58074", "Дмитрий", "Кулебакин", "58074", "Карина", "Николаева", " Дурдина Елена", " Дурдина Елена ")
	do ..SaveParticipantCoupleOther("593", "Москва", "Академия", "176", "0JrRg9C70LXQsdCw0LrQuNC9LNCU0LzQuNGC0YDQuNC5LDIwMDAtMDEtMDE70J3QuNC60L7Qu9Cw0LXQstCwLNCa0LDRgNC40L3QsCwyMDAwLTAxLTAx", "58074", "Дмитрий", "Кулебакин", "58074", "Карина", "Николаева", " Дурдина Елена", " Дурдина Елена ")
	do ..SaveParticipantCoupleOther("597", "С.-Петербург", "Новация", "176", "0KHQtdGA0LPQtdC10LIs0JXQstCz0LXQvdC40LksMTk5Ni0wMS0wMTvQk9GA0LjQs9C+0YDRjNC10LLQsCzQldC70LjQt9Cw0LLQtdGC0LAsMTk5OC0wMS0wMQ==", "56613", "Евгений", "Сергеев", "57344", "Елизавета", "Григорьева", " Ильиных Александр", " Ильиных Александр ")
	do ..SaveParticipantCoupleOther("598", "С.-Петербург", "Новация", "176", "0KHQtdGA0LPQtdC10LIs0JXQstCz0LXQvdC40LksMTk5Ni0wMS0wMTvQk9GA0LjQs9C+0YDRjNC10LLQsCzQldC70LjQt9Cw0LLQtdGC0LAsMTk5OC0wMS0wMQ==", "56613", "Евгений", "Сергеев", "57344", "Елизавета", "Григорьева", " Ильиных Александр", " Ильиных Александр ")
	do ..SaveParticipantCoupleOther("601", "Пермь", "Калейдоскоп", "176", "0JSLASHQsNC00YPRh9C10LIs0JPRgNC40LPQvtGA0LjQuSwxOTk5LTAxLTAxO9CS0LXRgNGI0LjQvdC40L3QsCzQodC+0YTRjNGPLDIwMDEtMDEtMDE=", "57709", "Григорий", "Падучев", "58440", "Софья", "Вершинина", " Афанасьева Марина", " Афанасьева Марина ")
	do ..SaveParticipantCoupleOther("602", "Самара", "СКА", "176", "0KHQstC40YDRjtC60L7QsizQkNGA0YLQtdC8LDIwMDAtMDEtMDE70K7QtNC40L3QsCzQmNGA0LjQvdCwLDIwMDEtMDEtMDE=", "58074", "Артем", "Свирюков", "58440", "Ирина", "Юдина", " Титов Владимир", " Титов Владимир ")
	do ..SaveParticipantCoupleOther("603", "Брянск", "Фантазия", "176", "0JrRg9C30LXQvdC60L7QsizQlNC10L3QuNGBLDE5ODktMDEtMDE70JbRg9GC0LXQvdC60L7QstCwLNCQ0L3QsNGB0YLQsNGB0LjRjywxOTg4LTAxLTAx", "54057", "Денис", "Кузенков", "53691", "Анастасия", "Жутенкова", " Фанасютин Виктор", " Фанасютин Виктор ")
	do ..SaveParticipantCoupleOther("605", "Самара", "СКА", "176", "0J3QsNC30LDRgNC+0LIs0J7Qu9C10LMsMTk5My0wMS0wMTvQn9C+0LPQvtC00LjQvdCwLNCQ0LvQtdC60YHQsNC90LTRgNCwLDE5OTYtMDEtMDE=", "55518", "Олег", "Назаров", "56613", "Александра", "Погодина", " Титов Владимир", " Титов Владимир ")
	do ..SaveParticipantCoupleOther("607", "Москва", "Русский Клуб", "176", "0JrQvtGA0L7Qu9GM0LrQvtCyLNCg0L7QvNCw0L0sMTk5MS0wMS0wMTvQldGA0LXQvNC40L3QsCzQlNCw0YDRjNGPLDE5OTEtMDEtMDE=", "54787", "Роман", "Корольков", "54787", "Дарья", "Еремина", " Никовский Виктор", " Панин Олег ")
	do ..SaveParticipantCoupleOther("608", "Москва", "Лидия", "176", "0J3QsNGD0LzQutC40L0s0JPQu9C10LEsMjAwMi0wMS0wMTvQqNC10LLRh9C10L3QutC+LNCb0LjQu9C40Y8sMjAwMy0wMS0wMQ==", "58805", "Глеб", "Наумкин", "59170", "Лилия", "Шевченко", " Исаева Лидия", " Исаева Лидия ")
	do ..SaveParticipantCoupleOther("609", "Москва", "Лидия", "176", "0J3QsNGD0LzQutC40L0s0JPQu9C10LEsMjAwMi0wMS0wMTvQqNC10LLRh9C10L3QutC+LNCb0LjQu9C40Y8sMjAwMy0wMS0wMQ==", "58805", "Глеб", "Наумкин", "59170", "Лилия", "Шевченко", " Исаева Лидия", " Исаева Лидия ")
	do ..SaveParticipantCoupleOther("610", "Москва", "Лидия", "176", "0J3QsNGD0LzQutC40L0s0JPQu9C10LEsMjAwMi0wMS0wMTvQqNC10LLRh9C10L3QutC+LNCb0LjQu9C40Y8sMjAwMy0wMS0wMQ==", "58805", "Глеб", "Наумкин", "59170", "Лилия", "Шевченко", " Исаева Лидия", " Исаева Лидия ")
	do ..SaveParticipantCoupleOther("611", "Волгоград", "Родина", "176", "0JrQvtGC0LXQu9C10LLQtdGGLNCT0LXQvdC90LDQtNC40LksMTk5Mi0wMS0wMTvQmtC+0LLQsNC70LXQstCwLNCV0LrQsNGC0LXRgNC40L3QsCwxOTk0LTAxLTAx", "55152", "Геннадий", "Котелевец", "55883", "Екатерина", "Ковалева", " Юдина Татьяна", " Юдина Татьяна ")
	do ..SaveParticipantCoupleOther("613", "Москва", "Фиеста-М", "176", "0KjQtdGF0L7QstGG0L7QsizQldCy0LPQtdC90LjQuSwxOTg4LTAxLTAxO9Ce0LLRh9C40L3QvdC40LrQvtCy0LAs0JXQutCw0YLQtdGA0LjQvdCwLDE5OTMtMDEtMDE=", "53691", "Евгений", "Шеховцов", "55518", "Екатерина", "Овчинникова", " Бровко Дмитрий", " Бровко Дмитрий ")
	do ..SaveParticipantCoupleOther("614", "Иваново", "Натали", "176", "0KHQvtC70L7QstGM0ZHQsizQndC40LrQuNGC0LAsMjAwNC0wMS0wMTvQmtC+0YDRj9Cz0LjQvdCwLNCQ0LvQtdC90LAsMjAwNC0wMS0wMQ==", "59535", "Никита", "Соловьёв", "59535", "Алена", "Корягина", " Сахаров Алексей", " Сахаров Алексей ")
	do ..SaveParticipantCoupleOther("618", "Москва", "Линия танца", "176", "0KLQsNGA0LDRgdC+0LIs0JDQu9C10LrRgdC10LksMjAwMi0wMS0wMTvQk9C+0LvRg9Cx0LrQuNC90LAs0JrRgNC40YHRgtC40L3QsCwyMDAyLTAxLTAx", "58805", "Алексей", "Тарасов", "58805", "Кристина", "Голубкина", " Соломатина Ирина", " Соломатина Ирина ")
	do ..SaveParticipantCoupleOther("619", "Москва", "Линия танца", "176", "0KLQsNGA0LDRgdC+0LIs0JDQu9C10LrRgdC10LksMjAwMi0wMS0wMTvQk9C+0LvRg9Cx0LrQuNC90LAs0JrRgNC40YHRgtC40L3QsCwyMDAyLTAxLTAx", "58805", "Алексей", "Тарасов", "58805", "Кристина", "Голубкина", " Соломатина Ирина", " Соломатина Ирина ")
	do ..SaveParticipantCoupleOther("624", "Чита", "Хип-твист", "176", "0JDQvdGC0L7QvdC+0LIs0JLRj9GH0LXRgdC70LDQsiwyMDAxLTAxLTAxO9CX0L7Qu9C+0YLQsNGA0LXQstCwLNCf0L7Qu9C40L3QsCwyMDAyLTAxLTAx", "58440", "Вячеслав", "Антонов", "58805", "Полина", "Золотарева", " Ганеев Сергей", " Ганеев Сергей ")
	do ..SaveParticipantCoupleOther("625", "Чита", "Хип-твист", "176", "0JDQvdGC0L7QvdC+0LIs0JLRj9GH0LXRgdC70LDQsiwyMDAxLTAxLTAxO9CX0L7Qu9C+0YLQsNGA0LXQstCwLNCf0L7Qu9C40L3QsCwyMDAyLTAxLTAx", "58440", "Вячеслав", "Антонов", "58805", "Полина", "Золотарева", " Ганеев Сергей", " Ганеев Сергей ")
	do ..SaveParticipantCoupleOther("626", "Чита", "Хип-твист", "176", "0JDQvdGC0L7QvdC+0LIs0JLRj9GH0LXRgdC70LDQsiwyMDAxLTAxLTAxO9CX0L7Qu9C+0YLQsNGA0LXQstCwLNCf0L7Qu9C40L3QsCwyMDAyLTAxLTAx", "58440", "Вячеслав", "Антонов", "58805", "Полина", "Золотарева", " Ганеев Сергей", " Ганеев Сергей ")
	do ..SaveParticipantCoupleOther("630", "Vilnius", "Ratuto", "241", "UHV6cmF2aW4sQW50b24sMTk4Ny0wMS0xNDtLYXJwZW5rbyxBbGEsMTg0MC0xMi0zMQ==", "53339", "Anton", "Puzravin", "0", "Ala", "Karpenko", " Visockas ", "")
	do ..SaveParticipantCoupleOther("634", "Волгоград", "ДЮСШ-Мечта", "176", "0KHQtdC70LXQt9C90LXQsizQkNGA0YLQtdC8LDE5OTMtMDEtMDE70JzQsNC60LDRgNC+0LLQsCzQlNCw0YDRjNGPLDE5OTYtMDEtMDE=", "55518", "Артем", "Селезнев", "56613", "Дарья", "Макарова", " Кривошеев Владимир", " Бойко Татьяна ")
	do ..SaveParticipantCoupleOther("638", "Волгоград", "Спектр", "176", "0JSLASHRg9Cz0LDRh9C10LIs0JPQtdGA0LzQsNC9LDIwMDQtMDEtMDE70KHQtdC00YzQvNC+0LLQsCzQkNC90LDRgdGC0LDRgdC40Y8sMjAwNS0wMS0wMQ==", "59535", "Герман", "Пугачев", "59901", "Анастасия", "Седьмова", " Шеломицкий Анатолий", " Шеломицкий Анатолий ")
	do ..SaveParticipantCoupleOther("643", "Italy", "Italy", "241", "QmVuZW5hdG8sTWF1cml6aW8sMTk5NC0wMS0wMTtWZXNlbGtpbmEsVGF0aWFuYSwxODQwLTEyLTMx", "55883", "Maurizio", "Benenato", "0", "Tatiana", "Veselkina", " Massimiliano Paladino ", "")
	do ..SaveParticipantCoupleOther("652", "Москва", "Сказка", "176", "0JDQsdGA0LDQvNC10L3QutC+0LIs0JDQvdGC0L7QvSwxOTg5LTAxLTAxO9Cf0LXRgtGA0YSLASHQutC+0LLQsCzQndCw0YLQsNC70YzRjywxOTkxLTAxLTAx", "54057", "Антон", "Абраменков", "54787", "Наталья", "Петрякова", " Шумов Вадим", " Шумов Вадим ")
	do ..SaveParticipantCoupleOther("656", "Москва", "Dance Way", "176", "0K7QtNCw0LXQsizQkNC90YLQvtC9LDE5OTUtMDEtMDE70JHQvtC90LTQsNGA0LXQvdC60L4s0JDQvdCz0LXQu9C40L3QsCwxOTk0LTAxLTAx", "56248", "Антон", "Юдаев", "55883", "Ангелина", "Бондаренко", " Антонов Евгений", " Антонов Евгений ")
	do ..SaveParticipantCoupleOther("657", "Ростов-на-Дону", "МАЙКЛ", "176", "0JPQstCw0YHQsNC70LjQsCzQlNCw0YLQuNC60L4sMTk5OS0wMS0wMTvQktCw0LnRgNCw0LTRj9C9LNCQ0L3QsNGB0YLQsNGB0LjRjywyMDAwLTAxLTAx", "57709", "Датико", "Гвасалиа", "58074", "Анастасия", "Вайрадян", " Асриян Михаил", " Асриян Ирина ")
	do ..SaveParticipantCoupleOther("658", "Ростов-на-Дону", "МАЙКЛ", "176", "0JPQstCw0YHQsNC70LjQsCzQlNCw0YLQuNC60L4sMTk5OS0wMS0wMTvQktCw0LnRgNCw0LTRj9C9LNCQ0L3QsNGB0YLQsNGB0LjRjywyMDAwLTAxLTAx", "57709", "Датико", "Гвасалиа", "58074", "Анастасия", "Вайрадян", " Асриян Михаил", " Асриян Ирина ")
	do ..SaveParticipantCoupleOther("659", "Ростов-на-Дону", "МАЙКЛ", "176", "0JPQstCw0YHQsNC70LjQsCzQlNCw0YLQuNC60L4sMTk5OS0wMS0wMTvQktCw0LnRgNCw0LTRj9C9LNCQ0L3QsNGB0YLQsNGB0LjRjywyMDAwLTAxLTAx", "57709", "Датико", "Гвасалиа", "58074", "Анастасия", "Вайрадян", " Асриян Михаил", " Асриян Ирина ")
	do ..SaveParticipantCoupleOther("662", "С.-Петербург", "Новация", "176", "0JrQsNC70YSLASHQtdCyLNCd0LjQutC40YLQsCwyMDAxLTAxLTAxO9CS0L7Qu9C+0YbQutCw0Y8s0JXQutCw0YLQtdGA0LjQvdCwLDIwMDMtMDEtMDE=", "58440", "Никита", "Каляев", "59170", "Екатерина", "Волоцкая", " Ильиных Александр", " Ильиных Александр ")
	do ..SaveParticipantCoupleOther("663", "С.-Петербург", "Новация", "176", "0JrQsNC70YSLASHQtdCyLNCd0LjQutC40YLQsCwyMDAxLTAxLTAxO9CS0L7Qu9C+0YbQutCw0Y8s0JXQutCw0YLQtdGA0LjQvdCwLDIwMDMtMDEtMDE=", "58440", "Никита", "Каляев", "59170", "Екатерина", "Волоцкая", " Ильиных Александр", " Ильиных Александр ")
	do ..SaveParticipantCoupleOther("668", "москва", "диамант", "176", "0JrQu9GO0LrQvtC50YLRjCzQk9C70LXQsSwyMDAzLTAzLTE3O9Co0LDQvdGM0LPQuNC90LAs0JXQutCw0YLQtdGA0LjQvdCwLDE4NDAtMTItMzE=", "59245", "Глеб", "Клюкойть", "0", "Екатерина", "Шаньгина", " Гальпертна Н. ", "")
	do ..SaveParticipantCoupleOther("672", "Москва", "Латинский квартал", "176", "0JjQstCw0L3QvtCyLNCV0LLQs9C10L3QuNC5LDE5OTctMDEtMDE70JSLASHQtdC60LDRgNGB0LrQsNGPLNCS0LjQutGC0L7RgNC40Y8sMTk5OC0wMS0wMQ==", "56979", "Евгений", "Иванов", "57344", "Виктория", "Пекарская", " Дуванов Сергей", " Дуванов Сергей ")
	do ..SaveParticipantCoupleOther("675", "Kharkiv", "Grand", "241", "UmV2ZW5rb3YsUGF2bG8sMTk4Ny0wMS0xNjtHbmV6ZHlsb3ZhLEdhbm5hLDE4NDAtMTItMzE=", "53341", "Pavlo", "Revenkov", "0", "Ganna", "Gnezdylova", " Bogdanova Larysa ", "")
	do ..SaveParticipantCoupleOther("676", "Москва", "Русский Клуб", "176", "0JvQvtCz0YPRgtC+0LIs0JDQu9C10LrRgdC10LksMTk5Ny0wMS0wMTvQlNCw0YPRgtC+0LLQsCzQkNC70LjQvdCwLDIwMDAtMDEtMDE=", "56979", "Алексей", "Логутов", "58074", "Алина", "Даутова", " Никовский Виктор", " Никовский Виктор ")
	do ..SaveParticipantCoupleOther("677", "Железнодорожный", "ТСЦ Буревестник", "176", "0JzQtdGC0LrQuNC9LNCQ0LvQtdC60YHQtdC5LDE5OTQtMDEtMDE70J7Qu9C10L3QuNC90LAs0JDQvdCw0YHRgtCw0YHQuNGPLDE5OTktMDEtMDE=", "55883", "Алексей", "Меткин", "57709", "Анастасия", "Оленина", " Бессонов Иван", " Бессонов Иван ")
	do ..SaveParticipantCoupleOther("678", "Иваново", "Натали", "176", "0JSLASHQvtCSLASH0LXQvdC60L4s0JrQuNGA0LjQu9C7LDIwMDAtMDEtMDE70KbRi9Cx0YPQu9GM0LrQvizQmtGA0LjRgdGC0LjQvdCwLDIwMDItMDEtMDE=", "58074", "Кирилл", "Попенко", "58805", "Кристина", "Цыбулько", " Сахаров Алексей", " Сахаров Алексей ")
	do ..SaveParticipantCoupleOther("680", "Владивосток", "ДАНС-ЛИДЕР", "176", "0KHQutC+0YDQuNC60L7QsizQktC70LDQtNC40YHQu9Cw0LIsMTk5OS0wMS0wMTvQmtC70L7Rh9Cw0L3QvtCy0LAs0JjRgNC40L3QsCwyMDAxLTAxLTAx", "57709", "Владислав", "Скориков", "58440", "Ирина", "Клочанова", " Соловьёва Ирина", " Соловьёва Ирина ")
	do ..SaveParticipantCoupleOther("681", "Владивосток", "ДАНС-ЛИДЕР", "176", "0KHQutC+0YDQuNC60L7QsizQktC70LDQtNC40YHQu9Cw0LIsMTk5OS0wMS0wMTvQmtC70L7Rh9Cw0L3QvtCy0LAs0JjRgNC40L3QsCwyMDAxLTAxLTAx", "57709", "Владислав", "Скориков", "58440", "Ирина", "Клочанова", " Соловьёва Ирина", " Соловьёва Ирина ")
	do ..SaveParticipantCoupleOther("682", "Владивосток", "ДАНС-ЛИДЕР", "176", "0KHQutC+0YDQuNC60L7QsizQktC70LDQtNC40YHQu9Cw0LIsMTk5OS0wMS0wMTvQmtC70L7Rh9Cw0L3QvtCy0LAs0JjRgNC40L3QsCwyMDAxLTAxLTAx", "57709", "Владислав", "Скориков", "58440", "Ирина", "Клочанова", " Соловьёва Ирина", " Соловьёва Ирина ")
	do ..SaveParticipantCoupleOther("683", "Москва", "Кристалл", "176", "0KTQuNC70LDRgtC+0LIs0KHQtdGA0LPQtdC5LDE5OTQtMDEtMDE70JrQu9GO0YfQsNGA0LXQstCwLNCS0LDQu9C10YDQuNGPLDE5OTctMDEtMDE=", "55883", "Сергей", "Филатов", "56979", "Валерия", "Ключарева", " Титков Дмитрий", " Глушко Ольга ")
	do ..SaveParticipantCoupleOther("689", "Волгоград", "Спектр", "176", "0KjQtdC70L7QvNC40YbQutC40Lks0JLQu9Cw0LTQuNC80LjRgCwxOTg5LTAxLTAxO9Co0LXQu9C+0LzQuNGG0LrQsNGPLNCe0LvRjNCz0LAsMTk5MS0wMS0wMQ==", "54057", "Владимир", "Шеломицкий", "54787", "Ольга", "Шеломицкая", " Шеломицкий Анатолий", " Шеломицкий Анатолий ")
	do ..SaveParticipantCoupleOther("690", "Волгоград", "Спектр", "176", "0KjQtdC70L7QvNC40YbQutC40Lks0JLQu9Cw0LTQuNC80LjRgCwxOTg5LTAxLTAxO9Co0LXQu9C+0LzQuNGG0LrQsNGPLNCe0LvRjNCz0LAsMTk5MS0wMS0wMQ==", "54057", "Владимир", "Шеломицкий", "54787", "Ольга", "Шеломицкая", " Шеломицкий Анатолий", " Шеломицкий Анатолий ")
	do ..SaveParticipantCoupleOther("691", "Кострома", "Арс", "176", "0JDRgNGC0LDQvNC+0L3QvtCyLNCh0LXRgNCz0LXQuSwxOTk4LTAxLTAxO9Co0LDRhNC90LXRgCzQkNC90L3QsCwxOTk3LTAxLTAx", "57344", "Сергей", "Артамонов", "56979", "Анна", "Шафнер", " Базанова Елена", " Базанова Елена ")
	do ..SaveParticipantCoupleOther("692", "Мурманск", "ЦСТ ДЮСШ №14", "176", "0KHRgtC+0LHQvtGA0L7QsizQlNC80LjRgtGA0LjQuSwxOTkwLTAxLTAxO9Ca0YDRi9GB0LDQvdC+0LLQsCzQldC60LDRgtC10YDQuNC90LAsMTk5MS0wMS0wMQ==", "54422", "Дмитрий", "Стоборов", "54787", "Екатерина", "Крысанова", " Стоборова Светлана", " Стоборова Светлана ")
	do ..SaveParticipantCoupleOther("695", "Шахты", "Па+Па", "176", "0JPQvtC70L7Qu9C+0LHQvtCyLNCQ0LvQtdC60YHQtdC5LDE5OTItMDEtMDE70JrQsNC70LDRh9C10LLQsCzQodCy0LXRgtC70LDQvdCwLDE5OTYtMDEtMDE=", "55152", "Алексей", "Гололобов", "56613", "Светлана", "Калачева", " Стрельников Аркадий", " Стрельников Аркадий ")
	do ..SaveParticipantCoupleOther("696", "Шахты", "Па+Па", "176", "0JPQvtC70L7Qu9C+0LHQvtCyLNCQ0LvQtdC60YHQtdC5LDE5OTItMDEtMDE70JrQsNC70LDRh9C10LLQsCzQodCy0LXRgtC70LDQvdCwLDE5OTYtMDEtMDE=", "55152", "Алексей", "Гололобов", "56613", "Светлана", "Калачева", " Стрельников Аркадий", " Стрельников Аркадий ")
	do ..SaveParticipantCoupleOther("697", "Шахты", "Па+Па", "176", "0JPQvtC70L7Qu9C+0LHQvtCyLNCQ0LvQtdC60YHQtdC5LDE5OTItMDEtMDE70JrQsNC70LDRh9C10LLQsCzQodCy0LXRgtC70LDQvdCwLDE5OTYtMDEtMDE=", "55152", "Алексей", "Гололобов", "56613", "Светлана", "Калачева", " Стрельников Аркадий", " Стрельников Аркадий ")
	do ..SaveParticipantCoupleOther("698", "Казань", "Танго", "176", "0JzQuNC90L3QtdCx0LDQtdCyLNCi0LjQvNGD0YAsMTk5OS0wMS0wMTvQn9C10YLRg9GF0L7QstCwLNCS0LDQu9C10YDQuNGPLDE5OTktMDEtMDE=", "57709", "Тимур", "Миннебаев", "57709", "Валерия", "Петухова", " Краснов Роман", " Краснов Роман ")
	do ..SaveParticipantCoupleOther("699", "Кострома", "Арс", "176", "0JDRgNGC0LDQvNC+0L3QvtCyLNCh0LXRgNCz0LXQuSwxOTk4LTAxLTAxO9Co0LDRhNC90LXRgCzQkNC90L3QsCwxOTk3LTAxLTAx", "57344", "Сергей", "Артамонов", "56979", "Анна", "Шафнер", " Базанова Елена", " Базанова Елена ")
	do ..SaveParticipantCoupleOther("701", "Москва", "Лидия", "176", "0JbQuNCy0L7QsizQmNCz0L7RgNGMLDE5OTktMDEtMDE70JrRg9C30YzQvNC40L3QsCzQmNGA0LjQvdCwLDIwMDEtMDEtMDE=", "57709", "Игорь", "Живов", "58440", "Ирина", "Кузьмина", " Исаева Лидия", " Смодлев Николай ")
	do ..SaveParticipantCoupleOther("702", "Москва", "Лидия", "176", "0JbQuNCy0L7QsizQmNCz0L7RgNGMLDE5OTktMDEtMDE70JrRg9C30YzQvNC40L3QsCzQmNGA0LjQvdCwLDIwMDEtMDEtMDE=", "57709", "Игорь", "Живов", "58440", "Ирина", "Кузьмина", " Исаева Лидия", " Смодлев Николай ")
	do ..SaveParticipantCoupleOther("703", "Москва", "Русский Клуб", "176", "0KfRg9C80LDRh9C10L3QutC+LNCQ0L3QtNGA0LXQuSwxOTk0LTAxLTAxO9CR0YPRiNC10LLQsCzQkNC70LXQutGB0LDQvdC00YDQsCwxOTk1LTAxLTAx", "55883", "Андрей", "Чумаченко", "56248", "Александра", "Бушева", " Никовский Виктор", " Панин Олег ")
	do ..SaveParticipantCoupleOther("705", "Москва", "Магнолия", "176", "0JvQsNGF0LjQvSzQlNC80LjRgtGA0LjQuSwxOTk5LTAxLTAxO9Cg0L7QttC90L7QstCwLNCv0L3QsCwyMDAwLTAxLTAx", "57709", "Дмитрий", "Лахин", "58074", "Яна", "Рожнова", " Бекмаметов Станислав", " Бекмаметов Станислав ")
	do ..SaveParticipantCoupleOther("706", "Москва", "Магнолия", "176", "0JvQsNGF0LjQvSzQlNC80LjRgtGA0LjQuSwxOTk5LTAxLTAxO9Cg0L7QttC90L7QstCwLNCv0L3QsCwyMDAwLTAxLTAx", "57709", "Дмитрий", "Лахин", "58074", "Яна", "Рожнова", " Бекмаметов Станислав", " Бекмаметов Станислав ")
	do ..SaveParticipantCoupleOther("710", "Москва", "Линия танца", "176", "0JzQuNGF0LDQu9GM0LrQvtCyLNCh0LXRgNCz0LXQuSwxOTg3LTAxLTAxO9CS0L7RgNC+0LHRjNC10LLQsCzQmtGB0LXQvdC40Y8sMTk4OS0wMS0wMQ==", "53326", "Сергей", "Михальков", "54057", "Ксения", "Воробьева", " Соломатина Ирина", " Соломатина Ирина ")
	do ..SaveParticipantCoupleOther("712", "Ковров", "Экспромт", "176", "0JSLASHQtdGC0YDQvtGH0LXQvdC60L7QsizQkNC70LXQutGB0LXQuSwxOTk5LTAxLTAxO9Ca0YPQu9C40LrQvtCy0LAs0JjRgNC40L3QsCwyMDAwLTAxLTAx", "57709", "Алексей", "Петроченков", "58074", "Ирина", "Куликова", " Фомичева Ольга", " Фомичева Ольга ")
	do ..SaveParticipantCoupleOther("713", "С.-Петербург", "Грация", "176", "0JSLASHQtdGC0YDQvtCSLASH0LDQstC70L7QstGB0LrQuNC5LNCQ0LvQtdC60YHQsNC90LTRgCwxOTg2LTAxLTAxO9Ch0LXQvNC60LjQvdCwLNCc0LDRgNCz0LDRgNC40YLQsCwxOTkyLTAxLTAx", "52961", "Александр", "Петропавловский", "55152", "Маргарита", "Семкина", " Андрейченко Андрей", " Андрейченко Андрей ")
	do ..SaveParticipantCoupleOther("714", "С.-Петербург", "Грация", "176", "0JSLASHQtdGC0YDQvtCSLASH0LDQstC70L7QstGB0LrQuNC5LNCQ0LvQtdC60YHQsNC90LTRgCwxOTg2LTAxLTAxO9Ch0LXQvNC60LjQvdCwLNCc0LDRgNCz0LDRgNC40YLQsCwxOTkyLTAxLTAx", "52961", "Александр", "Петропавловский", "55152", "Маргарита", "Семкина", " Андрейченко Андрей", " Андрейченко Андрей ")
	do ..SaveParticipantCoupleOther("719", "Prague", "Prague", "241", "QnVyZXMsTWFyZWssMTk5MC0wMS0wMTtLYWxpc2gsS2F0ZXJpbmEsMTg0MC0xMi0zMQ==", "54422", "Marek", "Bures", "0", "Katerina", "Kalish", " Prague ", "")
	do ..SaveParticipantCoupleOther("720", "Riga", "Riga", "241", "U3V2b3JvdnMsSmV2Z2VuaWpzLDE5OTAtMDEtMDE7QmF6LFRpbmEsMTg0MC0xMi0zMQ==", "54422", "Jevgenijs", "Suvorovs", "0", "Tina", "Baz", " Riga ", "")
	do ..SaveParticipantCoupleOther("730", "Волгоград", "Альянс", "176", "0J3QuNC60LjRgtC40L0s0JTQvNC40YLRgNC40LksMTk5My0wMS0wMTvQnNCw0LrRgdC40LzQvtCy0LAs0JDQvdC90LAsMTk5NS0wMS0wMQ==", "55518", "Дмитрий", "Никитин", "56248", "Анна", "Максимова", " Беликов Сергей", " Беликов Алексей ")
	do ..SaveParticipantCoupleOther("731", "Волгоград", "Альянс", "176", "0J3QuNC60LjRgtC40L0s0JTQvNC40YLRgNC40LksMTk5My0wMS0wMTvQnNCw0LrRgdC40LzQvtCy0LAs0JDQvdC90LAsMTk5NS0wMS0wMQ==", "55518", "Дмитрий", "Никитин", "56248", "Анна", "Максимова", " Беликов Сергей", " Беликов Алексей ")
	do ..SaveParticipantCoupleOther("732", "Волгоград", "Альянс", "176", "0J3QuNC60LjRgtC40L0s0JTQvNC40YLRgNC40LksMTk5My0wMS0wMTvQnNCw0LrRgdC40LzQvtCy0LAs0JDQvdC90LAsMTk5NS0wMS0wMQ==", "55518", "Дмитрий", "Никитин", "56248", "Анна", "Максимова", " Беликов Сергей", " Беликов Алексей ")
	do ..SaveParticipantCoupleOther("742", "Belgrad", "Belgrad", "241", "S25lemV2aWMsSXZhbiwxOTkwLTAxLTAxO1lvdmFub3ZpYyxWaW9sZXR0YSwxODQwLTEyLTMx", "54422", "Ivan", "Knezevic", "0", "Violetta", "Yovanovic", " Belgrad ", "")
	do ..SaveParticipantCoupleOther("743", "Belgrad", "Belgrad", "241", "S25lemV2aWMsSXZhbiwxOTkwLTAxLTAxO1lvdmFub3ZpYyxWaW9sZXR0YSwxODQwLTEyLTMx", "54422", "Ivan", "Knezevic", "0", "Violetta", "Yovanovic", " Belgrad ", "")
	do ..SaveParticipantCoupleOther("744", "Belgrad", "Belgrad", "241", "S25lemV2aWMsSXZhbiwxOTkwLTAxLTAxO1lvdmFub3ZpYyxWaW9sZXR0YSwxODQwLTEyLTMx", "54422", "Ivan", "Knezevic", "0", "Violetta", "Yovanovic", " Belgrad ", "")
	do ..SaveParticipantCoupleOther("745", "Tallin", "Tallin", "241", "QWJlbCxNYWRpcywxOTk0LTAxLTAxO0dhbGtpbmEsQWxla3NhbmRyYSwxODQwLTEyLTMx", "55883", "Madis", "Abel", "0", "Aleksandra", "Galkina", " Tallin ", "")
	do ..SaveParticipantCoupleOther("747", "Tallinn", "Tallinn", "241", "VmVza3VzLFJvYmluLDE5OTctMDEtMDE7U290c3Vnb3ZhLEFuaXRhLDE4NDAtMTItMzE=", "56979", "Robin", "Veskus", "0", "Anita", "Sotsugova", " Korotin Eduard ", "")
	do ..SaveParticipantCoupleOther("748", "Tallinn", "Tallinn", "241", "VmVza3VzLFJvYmluLDE5OTctMDEtMDE7U290c3Vnb3ZhLEFuaXRhLDE4NDAtMTItMzE=", "56979", "Robin", "Veskus", "0", "Anita", "Sotsugova", " Korotin Eduard ", "")
	do ..SaveParticipantCoupleOther("749", "Tallinn", "Tallinn", "241", "VmVza3VzLFJvYmluLDE5OTctMDEtMDE7U290c3Vnb3ZhLEFuaXRhLDE4NDAtMTItMzE=", "56979", "Robin", "Veskus", "0", "Anita", "Sotsugova", " Korotin Eduard ", "")
	do ..SaveParticipantCoupleOther("750", "Tallinn", "Tallinn", "241", "RGF2eWRpayxBbmRyZXksMTk5Ny0wMS0wMTtLaXZpLEVsaXphYmV0aCwxODQwLTEyLTMx", "56979", "Andrey", "Davydik", "0", "Elizabeth", "Kivi", " Korotin Eduard ", "")
	do ..SaveParticipantCoupleOther("751", "Tallinn", "Tallinn", "241", "RGF2eWRpayxBbmRyZXksMTk5Ny0wMS0wMTtLaXZpLEVsaXphYmV0aCwxODQwLTEyLTMx", "56979", "Andrey", "Davydik", "0", "Elizabeth", "Kivi", " Korotin Eduard ", "")
	do ..SaveParticipantCoupleOther("752", "Tallinn", "Tallinn", "241", "RGF2eWRpayxBbmRyZXksMTk5Ny0wMS0wMTtLaXZpLEVsaXphYmV0aCwxODQwLTEyLTMx", "56979", "Andrey", "Davydik", "0", "Elizabeth", "Kivi", " Korotin Eduard ", "")
	do ..SaveParticipantCoupleOther("753", "Tallinn", "Tallinn", "241", "R29yb2RpbG92LEtvbnN0YW50aW4sMTk5MC0wMS0wMTtCZXJnbWFub3ZhLERvbWluaWthLDE4NDAtMTItMzE=", "54422", "Konstantin", "Gorodilov", "0", "Dominika", "Bergmanova", " Korotin Eduard ", "")
	do ..SaveParticipantCoupleOther("754", "Tallinn", "Tallinn", "241", "R29yb2RpbG92LEtvbnN0YW50aW4sMTk5MC0wMS0wMTtCZXJnbWFub3ZhLERvbWluaWthLDE4NDAtMTItMzE=", "54422", "Konstantin", "Gorodilov", "0", "Dominika", "Bergmanova", " Korotin Eduard ", "")
	do ..SaveParticipantCoupleOther("755", "Tallinn", "Tallinn", "241", "U29sdWphemlrb3YsTmlrb2xhaSwxOTk0LTAxLTAxO1NlbWpvbm92YSxFbGl6YXZldGEsMTg0MC0xMi0zMQ==", "55883", "Nikolai", "Solujazikov", "0", "Elizaveta", "Semjonova", " Korotin Eduard ", "")
	do ..SaveParticipantCoupleOther("756", "Tallinn", "Tallinn", "241", "U29sdWphemlrb3YsTmlrb2xhaSwxOTk0LTAxLTAxO1NlbWpvbm92YSxFbGl6YXZldGEsMTg0MC0xMi0zMQ==", "55883", "Nikolai", "Solujazikov", "0", "Elizaveta", "Semjonova", " Korotin Eduard ", "")
	do ..SaveParticipantCoupleOther("757", "Bishkek", "Bishkek", "241", "QmlieWFldixTdnlhdG9zbGF2LDE5OTAtMDEtMDE7S2FjaGFsa28sVmFsZXJpYSwxODQwLTEyLTMx", "54422", "Svyatoslav", "Bibyaev", "0", "Valeria", "Kachalko", " Bishkek ", "")
	do ..SaveParticipantCoupleOther("758", "Riga", "Riga", "241", "VHJlaWpzLEthcmxpcywxOTkwLTAxLTAxO0tyaXZvc2hlZXZhLEFuYXN0YXNpYSwxODQwLTEyLTMx", "54422", "Karlis", "Treijs", "0", "Anastasia", "Krivosheeva", " Riga ", "")
	do ..SaveParticipantCoupleOther("759", "Vilnus", "Vilnus", "241", "QmFydGt1cyxBdXJpbWFzLDE5OTAtMDEtMDE7S2xpbWFpdGUsQXVndXN0ZSwxODQwLTEyLTMx", "54422", "Aurimas", "Bartkus", "0", "Auguste", "Klimaite", " Vilnus ", "")
	do ..SaveParticipantCoupleOther("760", "Tokio", "Tokio", "241", "R3VzeXIsT2xla3NpaSwxOTkwLTAxLTAxO1Jpa2FrbyxPdGEsMTg0MC0xMi0zMQ==", "54422", "Oleksii", "Gusyr", "0", "Ota", "Rikako", " Tokio ", "")
	do ..SaveParticipantCoupleOther("761", "Tokio", "Tokio", "241", "R3VzeXIsT2xla3NpaSwxOTkwLTAxLTAxO1Jpa2FrbyxPdGEsMTg0MC0xMi0zMQ==", "54422", "Oleksii", "Gusyr", "0", "Ota", "Rikako", " Tokio ", "")
	do ..SaveParticipantCoupleOther("762", "Riga", "Riga", "241", "VHJlaWpzLEthcmxpcywxOTkwLTAxLTAxO0tyaXZvc2hlZXZhLEFuYXN0YXNpYSwxODQwLTEyLTMx", "54422", "Karlis", "Treijs", "0", "Anastasia", "Krivosheeva", " Riga ", "")
	do ..SaveParticipantCoupleOther("763", "Ростов-на-Дону", "МАЙКЛ", "176", "0JrQsNC30LDQutC+0LIs0JzRgdGC0LjRgdC70LDQsiwxOTk0LTAxLTAxO9Ca0LDQt9Cw0LrQvtCy0LAs0JDQu9C10L3QsCwxOTk2LTAxLTAx", "55883", "Мстислав", "Казаков", "56613", "Алена", "Казакова", " Асриян Михаил", " Асриян Ирина ")
	do ..SaveParticipantCoupleOther("767", "Москва", "Линия танца", "176", "0JHQvtGA0LjRgdC10L3QvtC6LNCk0LjQu9C40LSLASHQvywxOTk0LTAxLTAxO9Ci0YDQtdC90LfQtdC70LXQstCwLNCQ0L3QvdCwLDE5OTUtMDEtMDE=", "55883", "Филипп", "Борисенок", "56248", "Анна", "Трензелева", " Соломатина Ирина", " Соломатина Ирина ")
	do ..SaveParticipantCoupleOther("768", "Йошкар-Ола", "Молодость", "176", "0JHQtdCx0LXQvdC40L0s0JjQstCw0L0sMTk5MS0wMS0wMTvQmtGD0LTRgNGP0LLRhtC10LLQsCzQldC60LDRgtC10YDQuNC90LAsMTk5MC0wMS0wMQ==", "54787", "Иван", "Бебенин", "54422", "Екатерина", "Кудрявцева", " Подмарева Юлия", " Сильдуганов Максим ")
	do ..SaveParticipantCoupleOther("769", "Йошкар-Ола", "Молодость", "176", "0JHQtdCx0LXQvdC40L0s0JjQstCw0L0sMTk5MS0wMS0wMTvQmtGD0LTRgNGP0LLRhtC10LLQsCzQldC60LDRgtC10YDQuNC90LAsMTk5MC0wMS0wMQ==", "54787", "Иван", "Бебенин", "54422", "Екатерина", "Кудрявцева", " Подмарева Юлия", " Сильдуганов Максим ")
	do ..SaveParticipantCoupleOther("770", "Йошкар-Ола", "Молодость", "176", "0JHQtdCx0LXQvdC40L0s0JjQstCw0L0sMTk5MS0wMS0wMTvQmtGD0LTRgNGP0LLRhtC10LLQsCzQldC60LDRgtC10YDQuNC90LAsMTk5MC0wMS0wMQ==", "54787", "Иван", "Бебенин", "54422", "Екатерина", "Кудрявцева", " Подмарева Юлия", " Сильдуганов Максим ")
	do ..SaveParticipantCoupleOther("772", "Москва", "Респект", "176", "0JDQu9C40YTQsNC90L7QsizQkNGA0YLQtdC8LDE5OTgtMDEtMDE70JDRhdCw0LSLASHQutC40L3QsCzQldC60LDRgtC10YDQuNC90LAsMTk5OS0wMS0wMQ==", "57344", "Артем", "Алифанов", "57709", "Екатерина", "Ахапкина", " Ивашова Наталия", " Ивашова Наталия ")
	do ..SaveParticipantCoupleOther("773", "Москва", "Респект", "176", "0JDQu9C40YTQsNC90L7QsizQkNGA0YLQtdC8LDE5OTgtMDEtMDE70JDRhdCw0LSLASHQutC40L3QsCzQldC60LDRgtC10YDQuNC90LAsMTk5OS0wMS0wMQ==", "57344", "Артем", "Алифанов", "57709", "Екатерина", "Ахапкина", " Ивашова Наталия", " Ивашова Наталия ")
	do ..SaveParticipantCoupleOther("775", "Владивосток", "Максимум", "176", "0KjQutCw0YDQuNCy0YHQutC40Lks0JLQuNC60YLQvtGALDE5OTUtMDEtMDE70JvQvtCSLASH0LDRgtC40L3QsCzQlNCw0YDRjNGPLDE5OTUtMDEtMDE=", "56248", "Виктор", "Шкаривский", "56248", "Дарья", "Лопатина", " Никишов Алексей", " Никишов Алексей ")
	do ..SaveParticipantCoupleOther("776", "Кострома", "Арс", "176", "0KHRgtCw0L3QutC10LLQuNGHLNCU0LzQuNGC0YDQuNC5LDIwMDItMDEtMDE70KjRg9C80LjQu9C40L3QsCzQkNC90LDRgdGC0LDRgdC40Y8sMjAwMi0wMS0wMQ==", "58805", "Дмитрий", "Станкевич", "58805", "Анастасия", "Шумилина", " Базанова Елена", " Базанов Андрей ")
	do ..SaveParticipantCoupleOther("778", "Воронеж", "ГШСТ", "176", "0KDQsNGB0YHQutCw0LfQvtCyLNCf0LDQstC10LssMjAwMC0wMS0wMTvQodC10L3Rh9Cw0LrQvtCy0LAs0JSLASHQvtC70LjQvdCwLDIwMDAtMDEtMDE=", "58074", "Павел", "Рассказов", "58074", "Полина", "Сенчакова", " Догаев Михаил", " Подгорный Дмитрий ")
	do ..SaveParticipantCoupleOther("781", "Москва", "Арт-Данс", "176", "0JPRgNC10YHRgdC10LvRjCzQlNCw0L3QuNC40LssMTk5Ny0wMS0wMTvQkdGD0YLRg9GA0LvQuNC90LAs0JzQsNGA0LjQvdCwLDE5OTctMDEtMDE=", "56979", "Даниил", "Грессель", "56979", "Марина", "Бутурлина", " Лобов Артур", " Лобов Артур ")
	do ..SaveParticipantCoupleOther("782", "Москва", "Арт-Данс", "176", "0JPRgNC10YHRgdC10LvRjCzQlNCw0L3QuNC40LssMTk5Ny0wMS0wMTvQkdGD0YLRg9GA0LvQuNC90LAs0JzQsNGA0LjQvdCwLDE5OTctMDEtMDE=", "56979", "Даниил", "Грессель", "56979", "Марина", "Бутурлина", " Лобов Артур", " Лобов Артур ")
	do ..SaveParticipantCoupleOther("785", "Ростов-на-Дону", "МАЙКЛ", "176", "0JrQsNC30LDQutC+0LIs0JzRgdGC0LjRgdC70LDQsiwxOTk0LTAxLTAxO9Ca0LDQt9Cw0LrQvtCy0LAs0JDQu9C10L3QsCwxOTk2LTAxLTAx", "55883", "Мстислав", "Казаков", "56613", "Алена", "Казакова", " Асриян Михаил", " Асриян Ирина ")
	do ..SaveParticipantCoupleOther("786", "Ростов-на-Дону", "МАЙКЛ", "176", "0JrQsNC30LDQutC+0LIs0JzRgdGC0LjRgdC70LDQsiwxOTk0LTAxLTAxO9Ca0LDQt9Cw0LrQvtCy0LAs0JDQu9C10L3QsCwxOTk2LTAxLTAx", "55883", "Мстислав", "Казаков", "56613", "Алена", "Казакова", " Асриян Михаил", " Асриян Ирина ")
	do ..SaveParticipantCoupleOther("792", "Шахты", "Па+Па", "176", "0JSLASHQsNC90YfQtdC90LrQvizQodC10YDQs9C10LksMTk5Mi0wMS0wMTvQkNC90YLQuNCSLASH0L7QstCwLNCV0LrQsNGC0LXRgNC40L3QsCwxOTk3LTAxLTAx", "55152", "Сергей", "Панченко", "56979", "Екатерина", "Антипова", " Стрельников Аркадий", " Стрельников Аркадий ")
	do ..SaveParticipantCoupleOther("796", "Москва", "Академия", "176", "0JDQutGB0Y7RgtC40L0s0J3QuNC60LjRgtCwLDE5OTgtMDEtMDE70JbRg9C60L7QstCwLNCh0LLQtdGC0LvQsNC90LAsMjAwMC0wMS0wMQ==", "57344", "Никита", "Аксютин", "58074", "Светлана", "Жукова", " Дурдина Елена", " Дурдина Елена ")
	do ..SaveParticipantCoupleOther("798", "Москва", "Русский Клуб", "176", "0JrQvtGA0L7Qu9C10LIs0JDQu9C10LrRgdC10LksMTk5NS0wMS0wMTvQoNGL0LHQuNC90LAs0JXQutCw0YLQtdGA0LjQvdCwLDE5OTQtMDEtMDE=", "56248", "Алексей", "Королев", "55883", "Екатерина", "Рыбина", " Никовский Виктор", " Панин Олег ")
	do ..SaveParticipantCoupleOther("805", "Москва", "ДК МЭИ", "176", "0KjQuNC80LDQvdCw0LXQsizQodC10YDQs9C10LksMjAwNS0wMS0wMTvQl9Cw0LLQvtC00L7QstCwLNCf0L7Qu9C40L3QsCwyMDA1LTAxLTAx", "59901", "Сергей", "Шиманаев", "59901", "Полина", "Заводова", " Калиничева Евгения", " Калиничева Евгения ")
	do ..SaveParticipantCoupleOther("806", "Москва", "Новый век", "176", "0KjQtdCy0YbQvtCyLNCV0LPQvtGALDIwMDAtMDEtMDE70JSLASHQvtC30L7QstCwLNCQ0L3QvdCwLDIwMDAtMDEtMDE=", "58074", "Егор", "Шевцов", "58074", "Анна", "Позова", " Почаев Алексей", " Почаев Алексей ")
	do ..SaveParticipantCoupleOther("807", "Москва", "Новый век", "176", "0KjQtdCy0YbQvtCyLNCV0LPQvtGALDIwMDAtMDEtMDE70JSLASHQvtC30L7QstCwLNCQ0L3QvdCwLDIwMDAtMDEtMDE=", "58074", "Егор", "Шевцов", "58074", "Анна", "Позова", " Почаев Алексей", " Почаев Алексей ")
	do ..SaveParticipantCoupleOther("810", "Н.Новгород", "Динамо-НН", "176", "0J3QsNCz0L7RgNC90L7QsizQpdCw0YDQuNGC0L7QvSwxOTk4LTAxLTAxO9Ch0LjQt9C10LzQvtCy0LAs0JzQsNGA0LjRjywxOTk5LTAxLTAx", "57344", "Харитон", "Нагорнов", "57709", "Мария", "Сиземова", " Мелёхин Дмитрий", " Мелёхин Дмитрий ")
	do ..SaveParticipantCoupleOther("811", "Н.Новгород", "Динамо-НН", "176", "0J3QsNCz0L7RgNC90L7QsizQpdCw0YDQuNGC0L7QvSwxOTk4LTAxLTAxO9Ch0LjQt9C10LzQvtCy0LAs0JzQsNGA0LjRjywxOTk5LTAxLTAx", "57344", "Харитон", "Нагорнов", "57709", "Мария", "Сиземова", " Мелёхин Дмитрий", " Мелёхин Дмитрий ")
	do ..SaveParticipantCoupleOther("812", "Minsk", "Minsk", "20", "QmF5YmljaGV2LFJvYmVydCwxOTkwLTEyLTE4O0JlY2ttYW5uLEFsZWtzYW5kcmEsMTg0MC0xMi0zMQ==", "54773", "Robert", "Baybichev", "0", "Aleksandra", "Beckmann", " Андрей и Ольга Себанские ", "")
	do ..SaveParticipantCoupleOther("813", "Minsk", "Minsk", "20", "QmF5YmljaGV2LFJvYmVydCwxOTkwLTEyLTE4O0JlY2ttYW5uLEFsZWtzYW5kcmEsMTg0MC0xMi0zMQ==", "54773", "Robert", "Baybichev", "0", "Aleksandra", "Beckmann", " Андрей и Ольга Себанские ", "")
	do ..SaveParticipantCoupleOther("814", "Minsk", "Minsk", "20", "VXNtYW5vdixSb21hbiwxOTkwLTEyLTIyO1J5bWFyZXZhLFZhbGVyaWEsMTg0MC0xMi0zMQ==", "54777", "Roman", "Usmanov", "0", "Valeria", "Rymareva", " Андрей и Ольга Себанские ", "")
	do ..SaveParticipantCoupleOther("815", "Minsk", "Minsk", "20", "VXNtYW5vdixSb21hbiwxOTkwLTEyLTIyO1J5bWFyZXZhLFZhbGVyaWEsMTg0MC0xMi0zMQ==", "54777", "Roman", "Usmanov", "0", "Valeria", "Rymareva", " Андрей и Ольга Себанские ", "")
	do ..SaveParticipantCoupleOther("816", "Minsk", "Minsk", "20", "TGV2c2h1bm92LFZsYWRpc2xhdiwxOTkxLTEyLTIwO05pa2lmb3JvdmljaCxWaWt0b3JpeWEsMTg0MC0xMi0zMQ==", "55140", "Vladislav", "Levshunov", "0", "Viktoriya", "Nikiforovich", " Андрей и Ольга Себанские ", "")
	do ..SaveParticipantCoupleOther("817", "Москва", "Русский Клуб", "176", "0KHQvtC60L7Qu9C+0LIs0JrQvtC90YHRgtCw0L3RgtC40L0sMjAwMC0wMS0wMTvQldCy0LTQvtC60LjQvNC+0LLQsCzQlNCw0YDRjNGPLDIwMDAtMDEtMDE=", "58074", "Константин", "Соколов", "58074", "Дарья", "Евдокимова", " Никовский Виктор", " Никовский Виктор ")
	do ..SaveParticipantCoupleOther("818", "Москва", "Русский Клуб", "176", "0KHQvtC60L7Qu9C+0LIs0JrQvtC90YHRgtCw0L3RgtC40L0sMjAwMC0wMS0wMTvQldCy0LTQvtC60LjQvNC+0LLQsCzQlNCw0YDRjNGPLDIwMDAtMDEtMDE=", "58074", "Константин", "Соколов", "58074", "Дарья", "Евдокимова", " Никовский Виктор", " Никовский Виктор ")
	do ..SaveParticipantCoupleOther("819", "Москва", "Русский Клуб", "176", "0KHQvtC60L7Qu9C+0LIs0JrQvtC90YHRgtCw0L3RgtC40L0sMjAwMC0wMS0wMTvQldCy0LTQvtC60LjQvNC+0LLQsCzQlNCw0YDRjNGPLDIwMDAtMDEtMDE=", "58074", "Константин", "Соколов", "58074", "Дарья", "Евдокимова", " Никовский Виктор", " Никовский Виктор ")
	do ..SaveParticipantCoupleOther("824", "Москва", "Виктория", "176", "0JPQvtC70L7QstC60LjQvSzQmNCy0LDQvSwxOTk3LTAxLTAxO9Ch0LDQt9C+0L3QvtCy0LAs0JrRgdC10L3QuNGPLDE5OTgtMDEtMDE=", "56979", "Иван", "Головкин", "57344", "Ксения", "Сазонова", " Раздрогин Валерий", " Раздрогин Валерий ")
	do ..SaveParticipantCoupleOther("825", "Москва", "Виктория", "176", "0JPQvtC70L7QstC60LjQvSzQmNCy0LDQvSwxOTk3LTAxLTAxO9Ch0LDQt9C+0L3QvtCy0LAs0JrRgdC10L3QuNGPLDE5OTgtMDEtMDE=", "56979", "Иван", "Головкин", "57344", "Ксения", "Сазонова", " Раздрогин Валерий", " Раздрогин Валерий ")
	do ..SaveParticipantCoupleOther("826", "Москва", "Мастер-клуб", "176", "0JPQvtGA0LTQuNC10LLRgdC60LjQuSzQmNC70YzRjywyMDAxLTAxLTAxO9Ck0LXQtNC+0YLQvtCy0LAs0JLQu9Cw0LTQuNGB0LvQsNCy0LAsMjAwMS0wMS0wMQ==", "58440", "Илья", "Гордиевский", "58440", "Владислава", "Федотова", " Сладкова Инга", " Сладкова Инга ")
	do ..SaveParticipantCoupleOther("828", "Minsk", "Minsk", "20", "WXVkb3ZpbixJbHlhLDE5OTktMDEtMTY7R29yY2hha292YSxBbGlzYSwxODQwLTEyLTMx", "57724", "Ilya", "Yudovin", "0", "Alisa", "Gorchakova", " Сабанские Андрей и Ольга ", "")
	do ..SaveParticipantCoupleOther("831", "Волгоград", "ДЮСШ-Мечта", "176", "0KDQtdGI0LXRgtC90LjQutC+0LIs0JjQstCw0L0sMjAwNC0wMS0wMTvQpdC10YDQuNCw0L3QvtCy0LAs0JTQsNGA0YzRjywyMDA0LTAxLTAx", "59535", "Иван", "Решетников", "59535", "Дарья", "Херианова", " Кривошеев Владимир", " Мордвинцев Александр ")
	do ..SaveParticipantCoupleOther("832", "Москва", "Ренессанс", "176", "0KHRgtCw0YDQvtGB0YLQuNC9LNCf0LDQstC10LssMTk5OS0wMS0wMTvQktC+0YDQvtGI0LjQu9C+0LLQsCzQktCw0LvQtdGA0LjRjywyMDAxLTAxLTAx", "57709", "Павел", "Старостин", "58440", "Валерия", "Ворошилова", " Емельяненко Виктор", " Кузнецов Владимир ")
	do ..SaveParticipantCoupleOther("835", "Moldova", "Moldova", "241", "QmVyemFuLEFsZXhhbmRydSwxOTg5LTA1LTIwO0JhaWJhcmFjLFhlbmlhLDE4NDAtMTItMzE=", "54196", "Alexandru", "Berzan", "0", "Xenia", "Baibarac", " Moldova ", "")
	do ..SaveParticipantCoupleOther("836", "Moldova", "Moldova", "241", "QmVyemFuLEFsZXhhbmRydSwxOTg5LTA1LTIwO0JhaWJhcmFjLFhlbmlhLDE4NDAtMTItMzE=", "54196", "Alexandru", "Berzan", "0", "Xenia", "Baibarac", " Moldova ", "")
	do ..SaveParticipantCoupleOther("837", "Moldova", "Moldova", "241", "QmVyemFuLEFsZXhhbmRydSwxOTg5LTA1LTIwO0JhaWJhcmFjLFhlbmlhLDE4NDAtMTItMzE=", "54196", "Alexandru", "Berzan", "0", "Xenia", "Baibarac", " Moldova ", "")
	do ..SaveParticipantCoupleOther("841", "Москва", "КДЮСШ Юность Москвы-Спартак", "176", "0J3QuNCy0LjQvSzQlNC80LjRgtGA0LjQuSwyMDA2LTAxLTAxO9Cn0LXRgNC10LSLASHQsNC90L7QstCwLNCV0LvQuNC30LDQstC10YLQsCwyMDA2LTAxLTAx", "60266", "Дмитрий", "Нивин", "60266", "Елизавета", "Черепанова", " Гапич Елена", " Гапич Елена ")
	do ..SaveParticipantCoupleOther("842", "Москва", "КДЮСШ Юность Москвы-Спартак", "176", "0J3QtdCy0LjQtNC40LzRi9C5LNCh0LLRj9GC0L7RgdC70LDQsiwyMDA1LTAxLTAxO9CV0YDRiNC+0LLQsCzQodC+0YTRjNGPLDIwMDYtMDEtMDE=", "59901", "Святослав", "Невидимый", "60266", "Софья", "Ершова", " Гапич Елена", " Гапич Елена ")
	do ..SaveParticipantCoupleOther("843", "Москва", "КДЮСШ Юность Москвы-Спартак", "176", "0JvQtdCx0LXQtNC10LIs0JTQvNC40YLRgNC40LksMjAwNS0wMS0wMTvQk9Cw0LvQsNC90LjQvdCwLNCV0LLQtNC+0LrQuNGPLDIwMDUtMDEtMDE=", "59901", "Дмитрий", "Лебедев", "59901", "Евдокия", "Галанина", " Гапич Елена", " Гапич Елена ")
	do ..SaveParticipantCoupleOther("844", "Москва", "КДЮСШ Юность Москвы-Спартак", "176", "0KSLASHRidC10L3QutC+LNCc0LjRhdCw0LjQuywyMDAzLTAxLTAxO9CR0LDRgNGC0LXQvdC10LLQsCzQmNC70L7QvdCwLDIwMDMtMDEtMDE=", "59170", "Михаил", "Ященко", "59170", "Илона", "Бартенева", " Гапич Елена", " Гапич Елена ")
	do ..SaveParticipantCoupleOther("845", "Москва", "КДЮСШ Юность Москвы-Спартак", "176", "0KSLASHRidC10L3QutC+LNCc0LjRhdCw0LjQuywyMDAzLTAxLTAxO9CR0LDRgNGC0LXQvdC10LLQsCzQmNC70L7QvdCwLDIwMDMtMDEtMDE=", "59170", "Михаил", "Ященко", "59170", "Илона", "Бартенева", " Гапич Елена", " Гапич Елена ")
	do ..SaveParticipantCoupleOther("849", "Москва", "КДЮСШ Юность Москвы-Спартак", "176", "0JrQsNC70LjQvdC40L0s0JDQvdC00YDQtdC5LDIwMDEtMDEtMDE70KSLASHQvdCz0LjQsdCw0LXQstCwLNCY0YDQuNC90LAsMjAwMi0wMS0wMQ==", "58440", "Андрей", "Калинин", "58805", "Ирина", "Янгибаева", " Гапич Елена", " Гапич Елена ")
	do ..SaveParticipantCoupleOther("850", "Москва", "КДЮСШ Юность Москвы-Спартак", "176", "0JrQsNC70LjQvdC40L0s0JDQvdC00YDQtdC5LDIwMDEtMDEtMDE70KSLASHQvdCz0LjQsdCw0LXQstCwLNCY0YDQuNC90LAsMjAwMi0wMS0wMQ==", "58440", "Андрей", "Калинин", "58805", "Ирина", "Янгибаева", " Гапич Елена", " Гапич Елена ")
	do ..SaveParticipantCoupleOther("851", "Москва", "КДЮСШ Юность Москвы-Спартак", "176", "0JrQsNC70LjQvdC40L0s0JDQvdC00YDQtdC5LDIwMDEtMDEtMDE70KSLASHQvdCz0LjQsdCw0LXQstCwLNCY0YDQuNC90LAsMjAwMi0wMS0wMQ==", "58440", "Андрей", "Калинин", "58805", "Ирина", "Янгибаева", " Гапич Елена", " Гапич Елена ")
	do ..SaveParticipantCoupleOther("852", "Москва", "КДЮСШ Юность Москвы-Спартак", "176", "0KTQtdC00L7RgNC+0LIs0JvQtdCyLDIwMDMtMDEtMDE70KfQuNGC0LDQtdCy0LAs0JXQstCz0LXQvdC40Y8sMjAwMi0wMS0wMQ==", "59170", "Лев", "Федоров", "58805", "Евгения", "Читаева", " Гапич Елена", " Гапич Елена ")
	do ..SaveParticipantCoupleOther("853", "Москва", "КДЮСШ Юность Москвы-Спартак", "176", "0KTQtdC00L7RgNC+0LIs0JvQtdCyLDIwMDMtMDEtMDE70KfQuNGC0LDQtdCy0LAs0JXQstCz0LXQvdC40Y8sMjAwMi0wMS0wMQ==", "59170", "Лев", "Федоров", "58805", "Евгения", "Читаева", " Гапич Елена", " Гапич Елена ")
	do ..SaveParticipantCoupleOther("854", "Москва", "КДЮСШ Юность Москвы-Спартак", "176", "0KTQtdC00L7RgNC+0LIs0JvQtdCyLDIwMDMtMDEtMDE70KfQuNGC0LDQtdCy0LAs0JXQstCz0LXQvdC40Y8sMjAwMi0wMS0wMQ==", "59170", "Лев", "Федоров", "58805", "Евгения", "Читаева", " Гапич Елена", " Гапич Елена ")
	do ..SaveParticipantCoupleOther("855", "Москва", "КДЮСШ Юность Москвы-Спартак", "176", "0KHRg9GB0LvQvtCyLNCQ0LvQtdC60YHQsNC90LTRgCwyMDAyLTAxLTAxO9Cn0LjQvdCw0YDRj9C9LNCV0LvQuNC30LDQstC10YLQsCwyMDAxLTAxLTAx", "58805", "Александр", "Суслов", "58440", "Елизавета", "Чинарян", " Гапич Елена", " Гапич Елена ")
	do ..SaveParticipantCoupleOther("856", "Москва", "КДЮСШ Юность Москвы-Спартак", "176", "0KHRg9GB0LvQvtCyLNCQ0LvQtdC60YHQsNC90LTRgCwyMDAyLTAxLTAxO9Cn0LjQvdCw0YDRj9C9LNCV0LvQuNC30LDQstC10YLQsCwyMDAxLTAxLTAx", "58805", "Александр", "Суслов", "58440", "Елизавета", "Чинарян", " Гапич Елена", " Гапич Елена ")
	do ..SaveParticipantCoupleOther("857", "Москва", "КДЮСШ Юность Москвы-Спартак", "176", "0KHRg9GB0LvQvtCyLNCQ0LvQtdC60YHQsNC90LTRgCwyMDAyLTAxLTAxO9Cn0LjQvdCw0YDRj9C9LNCV0LvQuNC30LDQstC10YLQsCwyMDAxLTAxLTAx", "58805", "Александр", "Суслов", "58440", "Елизавета", "Чинарян", " Гапич Елена", " Гапич Елена ")
	do ..SaveParticipantCoupleOther("858", "Москва", "КДЮСШ Юность Москвы-Спартак", "176", "0KDRg9C30LDQvdC+0LIs0JzQsNGC0LLQtdC5LDIwMDEtMDEtMDE70JrQsNGA0LSLASHQvtCy0LAs0JDQvdC90LAsMjAwMi0wMS0wMQ==", "58440", "Матвей", "Рузанов", "58805", "Анна", "Карпова", " Гапич Елена", " Гапич Елена ")
	do ..SaveParticipantCoupleOther("859", "Москва", "КДЮСШ Юность Москвы-Спартак", "176", "0KDRg9C30LDQvdC+0LIs0JzQsNGC0LLQtdC5LDIwMDEtMDEtMDE70JrQsNGA0LSLASHQvtCy0LAs0JDQvdC90LAsMjAwMi0wMS0wMQ==", "58440", "Матвей", "Рузанов", "58805", "Анна", "Карпова", " Гапич Елена", " Гапич Елена ")
	do ..SaveParticipantCoupleOther("860", "Москва", "КДЮСШ Юность Москвы-Спартак", "176", "0JrRgNC40LLQvtGI0LXQtdCyLNCQ0LvQtdC60YHQtdC5LDIwMDItMDEtMDE70J3QsNCx0LjQtdCy0LAs0K3Qu9GM0LzQuNGA0LAsMjAwMy0wMS0wMQ==", "58805", "Алексей", "Кривошеев", "59170", "Эльмира", "Набиева", " Гапич Елена", " Гапич Андрей ")
	do ..SaveParticipantCoupleOther("868", "С.-Петербург", "Эсперанса", "176", "0JHQvtGA0L7QstC60L7QsizQkNGA0YLQtdC8LDE5OTgtMDEtMDE70JLQsNGB0LjQu9GM0YbQvtCy0LAs0JrQsNGA0LjQvdCwLDIwMDAtMDEtMDE=", "57344", "Артем", "Боровков", "58074", "Карина", "Васильцова", " Багаутдинов Радик", " Багаутдинов Радик ")
	do ..SaveParticipantCoupleOther("872", "Москва", "Динамо", "176", "0KXQsNCz0LPQuCzQkNC80LjRgCwyMDA0LTAxLTAxO9Ch0LDRgNCw0LSLASHRg9C70L7QstCwLNCh0LLQtdGC0LvQsNC90LAsMjAwNC0wMS0wMQ==", "59535", "Амир", "Хагги", "59535", "Светлана", "Сарапулова", " Колобова Елена", " Коротеев Вячеслав ")
	do ..SaveParticipantCoupleOther("873", "Москва", "Динамо", "176", "0KXQsNCz0LPQuCzQkNC80LjRgCwyMDA0LTAxLTAxO9Ch0LDRgNCw0LSLASHRg9C70L7QstCwLNCh0LLQtdGC0LvQsNC90LAsMjAwNC0wMS0wMQ==", "59535", "Амир", "Хагги", "59535", "Светлана", "Сарапулова", " Колобова Елена", " Коротеев Вячеслав ")
	do ..SaveParticipantCoupleOther("874", "Москва", "Динамо", "176", "0KXQsNCz0LPQuCzQkNC80LjRgCwyMDA0LTAxLTAxO9Ch0LDRgNCw0LSLASHRg9C70L7QstCwLNCh0LLQtdGC0LvQsNC90LAsMjAwNC0wMS0wMQ==", "59535", "Амир", "Хагги", "59535", "Светлана", "Сарапулова", " Колобова Елена", " Коротеев Вячеслав ")
	do ..SaveParticipantCoupleOther("875", "Москва", "Латинский квартал", "176", "0KHQu9C40LfQtdC90Yws0JLRj9GH0LXRgdC70LDQsiwyMDAyLTAxLTAxO9CQ0L3QtNGA0LXQtdCy0LAs0JDQu9C40L3QsCwyMDAyLTAxLTAx", "58805", "Вячеслав", "Слизень", "58805", "Алина", "Андреева", " Дуванов Сергей", " Дуванов Сергей ")
	do ..SaveParticipantCoupleOther("876", "Москва", "Латинский квартал", "176", "0KHQu9C40LfQtdC90Yws0JLRj9GH0LXRgdC70LDQsiwyMDAyLTAxLTAxO9CQ0L3QtNGA0LXQtdCy0LAs0JDQu9C40L3QsCwyMDAyLTAxLTAx", "58805", "Вячеслав", "Слизень", "58805", "Алина", "Андреева", " Дуванов Сергей", " Дуванов Сергей ")
	do ..SaveParticipantCoupleOther("877", "Москва", "Латинский квартал", "176", "0KHQu9C40LfQtdC90Yws0JLRj9GH0LXRgdC70LDQsiwyMDAyLTAxLTAxO9CQ0L3QtNGA0LXQtdCy0LAs0JDQu9C40L3QsCwyMDAyLTAxLTAx", "58805", "Вячеслав", "Слизень", "58805", "Алина", "Андреева", " Дуванов Сергей", " Дуванов Сергей ")
	do ..SaveParticipantCoupleOther("881", "Видное", "Максимум", "176", "0KjQuNGA0LXQvdC40L0s0JDQu9C10LrRgdCw0L3QtNGALDE5ODktMDEtMDE70KTQsNGF0YDRg9GC0LTQuNC90L7QstCwLNCQ0LvRjNGE0LjRjywxOTk0LTAxLTAx", "54057", "Александр", "Ширенин", "55883", "Альфия", "Фахрутдинова", " Гуськов Максим", " Гревцова Мария ")
	do ..SaveParticipantCoupleOther("884", "Рыбинск", "ОНиОНА", "176", "0JSLASHQtdGC0YDQvtCyLNCd0LjQutC40YLQsCwxOTk4LTAxLTAxO9Co0YPQsdC40L3QsCzQlNCw0YDRjNGPLDIwMDAtMDEtMDE=", "57344", "Никита", "Петров", "58074", "Дарья", "Шубина", " Бритов Евгений", " Петрова Алла ")
	do ..SaveParticipantCoupleOther("885", "С.-Петербург", "Вистерия", "176", "0KDQvtCx0YvRiNC10LIs0J3QuNC60LjRgtCwLDIwMDAtMDEtMDE70JTQtdGA0LHQuNC90LAs0JzQsNGA0LjQvdCwLDIwMDAtMDEtMDE=", "58074", "Никита", "Робышев", "58074", "Марина", "Дербина", " Соков Сергей", " Соков Сергей ")
	do ..SaveParticipantCoupleOther("886", "С.-Петербург", "Вистерия", "176", "0KDQvtCx0YvRiNC10LIs0J3QuNC60LjRgtCwLDIwMDAtMDEtMDE70JTQtdGA0LHQuNC90LAs0JzQsNGA0LjQvdCwLDIwMDAtMDEtMDE=", "58074", "Никита", "Робышев", "58074", "Марина", "Дербина", " Соков Сергей", " Соков Сергей ")
	do ..SaveParticipantCoupleOther("887", "С.-Петербург", "Вистерия", "176", "0KDQvtCx0YvRiNC10LIs0J3QuNC60LjRgtCwLDIwMDAtMDEtMDE70JTQtdGA0LHQuNC90LAs0JzQsNGA0LjQvdCwLDIwMDAtMDEtMDE=", "58074", "Никита", "Робышев", "58074", "Марина", "Дербина", " Соков Сергей", " Соков Сергей ")
	do ..SaveParticipantCoupleOther("889", "Москва", "Академия", "176", "0JPRg9C00LrQvtCyLNCT0LvQtdCxLDE5OTktMDEtMDE70JbQuNCz0YPQu9GM0YHQutCw0Y8s0JLQsNGA0LLQsNGA0LAsMjAwMC0wMS0wMQ==", "57709", "Глеб", "Гудков", "58074", "Варвара", "Жигульская", " Дурдина Елена", " Максимов Сергей ")
	do ..SaveParticipantCoupleOther("890", "Москва", "Мелодия", "176", "0JPQvtGA0LTQtdC10LIs0JjQu9GM0Y8sMjAwMS0wMS0wMTvQk9GD0LTQutC+0LLQsCzQldC70LXQvdCwLDIwMDEtMDEtMDE=", "58440", "Илья", "Гордеев", "58440", "Елена", "Гудкова", " Кузнецова Елена", " Кузнецова Елена ")
	do ..SaveParticipantCoupleOther("891", "Москва", "Мелодия", "176", "0JPQvtGA0LTQtdC10LIs0JjQu9GM0Y8sMjAwMS0wMS0wMTvQk9GD0LTQutC+0LLQsCzQldC70LXQvdCwLDIwMDEtMDEtMDE=", "58440", "Илья", "Гордеев", "58440", "Елена", "Гудкова", " Кузнецова Елена", " Кузнецова Елена ")
	do ..SaveParticipantCoupleOther("893", "Москва", "Алеко", "176", "0JrRg9C00YDRj9Cy0YbQtdCyLNCi0LjQvNC+0YTQtdC5LDE5OTItMDEtMDE70KHRgtCw0YHQtdC90LrQvtCy0LAs0JDQvdCw0YHRgtCw0YHQuNGPLDE5OTYtMDEtMDE=", "55152", "Тимофей", "Кудрявцев", "56613", "Анастасия", "Стасенкова", " Гулай Галина", " Тахаутдинов Руслан ")
	do ..SaveParticipantCoupleOther("895", "Майский (Белгородск.обл.)", "Форум", "176", "0JLQvtGA0L7QvdC+0LIs0JSLASHQsNCy0LXQuywyMDAzLTAxLTAxO9CV0YDQvNCw0LrQvtCy0LAs0JSLASHQvtC70LjQvdCwLDIwMDQtMDEtMDE=", "59170", "Павел", "Воронов", "59535", "Полина", "Ермакова", " Иевлева Елена", " Иевлева Елена ")
	do ..SaveParticipantCoupleOther("896", "Майский (Белгородск.обл.)", "Форум", "176", "0JLQvtGA0L7QvdC+0LIs0JSLASHQsNCy0LXQuywyMDAzLTAxLTAxO9CV0YDQvNCw0LrQvtCy0LAs0JSLASHQvtC70LjQvdCwLDIwMDQtMDEtMDE=", "59170", "Павел", "Воронов", "59535", "Полина", "Ермакова", " Иевлева Елена", " Иевлева Елена ")
	do ..SaveParticipantCoupleOther("900", "Москва", "Алеко", "176", "0KbQuNGG0LjQsNGI0LLQuNC70Lgs0JTQvNC40YLRgNC40LksMTk5NS0wMS0wMTvQkNC70LjQvNC+0LLQsCzQldC70LXQvdCwLDE5OTEtMDEtMDE=", "56248", "Дмитрий", "Цициашвили", "54787", "Елена", "Алимова", " Гулай Галина", " Гулай Галина ")
	do ..SaveParticipantCoupleOther("902", "Москва", "Dance Way", "176", "0KHQvtCx0L7Qu9C10LIs0JLQu9Cw0LTQuNGB0LvQsNCyLDE5OTYtMDEtMDE70J3QuNC60L7Qu9Cw0LXQstCwLNCS0LjQutGC0L7RgNC40Y8sMTk5NS0wMS0wMQ==", "56613", "Владислав", "Соболев", "56248", "Виктория", "Николаева", " Антонов Евгений", " Антонов Евгений ")
	do ..SaveParticipantCoupleOther("904", "Рязань", "Созвездие", "176", "0KXQvtC80YPRgtC+0LIs0JzQuNGF0LDQuNC7LDIwMDUtMDEtMDE70KfQtdCx0YPRgNC60L7QstCwLNCj0LvRjNGP0L3QsCwyMDA1LTAxLTAx", "59901", "Михаил", "Хомутов", "59901", "Ульяна", "Чебуркова", " Куляев Олег", " Куляева Инна ")
	do ..SaveParticipantCoupleOther("905", "Москва", "Максимум", "176", "0KLRg9C70YzRgdC60LjQuSzQmNCz0L7RgNGMLDE5ODUtMDEtMDE70JPRgNC10YXQvtCy0LAs0JvRjtCx0L7QstGMLDE5OTItMDEtMDE=", "52596", "Игорь", "Тульский", "55152", "Любовь", "Грехова", " Сергунин Дмитрий", " Сергунин Дмитрий ")
	do ..SaveParticipantCoupleOther("907", "Кострома", "Арс", "176", "0JDRgNGC0LDQvNC+0L3QvtCyLNCh0LXRgNCz0LXQuSwxOTk4LTAxLTAxO9Co0LDRhNC90LXRgCzQkNC90L3QsCwxOTk3LTAxLTAx", "57344", "Сергей", "Артамонов", "56979", "Анна", "Шафнер", " Базанова Елена", " Базанова Елена ")
	do ..SaveParticipantCoupleOther("908", "Кострома", "Арс", "176", "0JDRgNGC0LDQvNC+0L3QvtCyLNCh0LXRgNCz0LXQuSwxOTk4LTAxLTAxO9Co0LDRhNC90LXRgCzQkNC90L3QsCwxOTk3LTAxLTAx", "57344", "Сергей", "Артамонов", "56979", "Анна", "Шафнер", " Базанова Елена", " Базанова Елена ")
	do ..SaveParticipantCoupleOther("913", "Москва", "Лотос", "176", "0JHQvtC50LrQvizQlNC10L3QuNGBLDE5OTktMDEtMDE70JSLASHQvtCz0YDQtdCx0L3QsNGPLNCQ0L3QsNGB0YLQsNGB0LjRjywxOTk5LTAxLTAx", "57709", "Денис", "Бойко", "57709", "Анастасия", "Погребная", " Ванчугин Александр", " Ванчугин Александр ")
	do ..SaveParticipantCoupleOther("915", "Москва", "Танцевальные надежды", "176", "0JzQtdC70LjRhdC+0LIs0JzQsNC60YHQuNC8LDE5OTUtMDEtMDE70KjQsNGG0LrQsNGPLNCb0Y7QsdC+0LLRjCwxOTk0LTAxLTAx", "56248", "Максим", "Мелихов", "55883", "Любовь", "Шацкая", " Мухин Денис", " Чалбасова Татьяна ")
	do ..SaveParticipantCoupleOther("916", "Рязань", "Солнечные ритмы", "176", "0JfQsNC50YbQtdCyLNCa0LjRgNC40LvQuywxOTk4LTAxLTAxO9Ca0YPQt9C90LXRhtC+0LLQsCzQkNC70LXQutGB0LDQvdC00YDQsCwxOTk4LTAxLTAx", "57344", "Кирилл", "Зайцев", "57344", "Александра", "Кузнецова", " Моисеев Андрей", " Моисеев Андрей ")
	do ..SaveParticipantCoupleOther("918", "Москва", "Академия", "176", "0KTQtdC00YfQtdC90LrQvizQkNC90LTRgNC10LksMTk5OS0wMS0wMTvQlNGD0LHRh9Cw0Los0JTQsNGA0YzRjywyMDAwLTAxLTAx", "57709", "Андрей", "Федченко", "58074", "Дарья", "Дубчак", " Дурдина Елена", " Дурдина Елена ")
	do ..SaveParticipantCoupleOther("919", "Москва", "Эврика", "176", "0JzRg9GF0L7RgNGC0L7QsizQkNC70LXQutGB0LXQuSwxOTk3LTAxLTAxO9CT0YPRgdC80LDQvdC+0LLQsCzQnNCw0YDQuNGPLDE5OTktMDEtMDE=", "56979", "Алексей", "Мухортов", "57709", "Мария", "Гусманова", " Кузнецова Лариса", " Кузнецова Лариса ")
	do ..SaveParticipantCoupleOther("920", "Буденновск", "Колибри", "176", "0KHQuNCy0L7QutC+0L3RjCzQmNCz0L7RgNGMLDE5ODktMDEtMDE70JzQtdC00LLQuNC00Yws0K7Qu9C40Y8sMTk4OS0wMS0wMQ==", "54057", "Игорь", "Сивоконь", "54057", "Юлия", "Медвидь", " Медвидь Елена", " Медвидь Елена ")
	do ..SaveParticipantCoupleOther("1019", "Tirana", "Tirana", "241", "S2F0aWFqLElzbGFtIFByb2tvcGlzLDE5OTAtMDEtMDE7U3RlZmFuaWRvdSxBbGlvbmEsMTg0MC0xMi0zMQ==", "54422", "Islam Prokopis", "Katiaj", "0", "Aliona", "Stefanidou", " Tirana ", "")
	do ..SaveParticipantCoupleOther("1020", "Rome", "Rome", "241", "RC4gQW1vcmEsQWxsZXNzYW5kcm8sMTk5MC0wMi0wMztHb3JlbGlrLE1hcmlhLDE4NDAtMTItMzE=", "54455", "Allessandro", "D. Amora", "0", "Maria", "Gorelik", " Rome ", "")
	do ..SaveParticipantCoupleOther("1297", "Муром", "Аэлита", "241", "0JzRg9GA0YvQu9C10LIs0JLQu9Cw0LTQu9C10L0sMTk5OC0wOC0xNDvQntCy0YHRj9C90L3QuNC60L7QstCwLNCV0LrQsNGC0LXRgNC40L3QsCwyMDAwLTEyLTA1", "57569", "Владлен", "Мурылев", "58413", "Екатерина", "Овсянникова", "Крючков Виктор", "")
	do ..SaveParticipantCoupleOther("1298", "Муром", "Аэлита", "176", "0JzRg9GA0YvQu9C10LIs0JLQu9Cw0LTQu9C10L0sMTk5OC0wOC0xNDvQntCy0YHRj9C90L3QuNC60L7QstCwLNCV0LrQsNGC0LXRgNC40L3QsCwyMDAwLTEyLTA1", "57569", "Владлен", "Мурылев", "58413", "Екатерина", "Овсянникова", "Крючков Виктор", "")
	do ..SaveParticipantCoupleOther("1326", "Тверь", "Экспресс", "176", "0KHQvNC40YDQvdC+0LIs0JjQstCw0L0sMjAwNS0xMC0wNjvQodC80L7RgNC+0LTQuNC90LAs0JDQvdCw0YHRgtCw0YHQuNGPLDIwMDUtMDQtMTk=", "60179", "Иван", "Смирнов", "60009", "Анастасия", "Смородина", "Бисюк Марина", "Шмидт Ян")
	
	set ^Dance.Data.ParticipantD = 2000
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Recorder</Value>
</Value>
<Value name="3">
<Value>Competition</Value>
</Value>
<Value name="4">
<Value>IsActive</Value>
</Value>
<Value name="5">
<Value>PType</Value>
</Value>
<Value name="6">
<Value>Created</Value>
</Value>
*/
]]></Content>
</UDLText>

<Method name="SaveParticipant">
<Description>
SELECT 'do ..SaveParticipant("' || ID || '", "'|| Competition || '", "' || Created || '", "'|| IsActive || '", "'|| PType || '", "'|| Recorder || '")'</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ID,Competition,Created,IsActive,PType,Recorder</FormalSpec>
<Implementation><![CDATA[
	set className = "---"
	if (PType = "CoupleUDSR"){
		set className = "~Dance.Data.ParticipantCoupleUDSR~"
	}
	elseif(PType = "CoupleWDSF"){
		set className = "~Dance.Data.ParticipantCoupleWDSF~"
	}
	elseif(PType = "CoupleOther"){
		set className = "~Dance.Data.ParticipantCoupleOther~"
	}
	
	set ^Dance.Data.ParticipantD(ID) = $lb(className, Recorder, Competition, IsActive = $$$YES, PType, Created)
]]></Implementation>
</Method>

<Method name="SaveParticipantCoupleUDSR">
<Description>
select 'do ..SaveParticipantCoupleUDSR("' || ID || '", "' || Couple  || '")'</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ID,Couple</FormalSpec>
<Implementation><![CDATA[	set ^Dance.Data.ParticipantD(ID, "ParticipantCoupleUDSR") = $lb(Couple)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*

<Storage name="Default">
<Data name="ParticipantCoupleWDSFDefaultData">
<Subscript>"ParticipantCoupleWDSF"</Subscript>
<Value name="1">
<Value>Couple</Value>
</Value>
<Value name="2">
<Value>ManDOB</Value>
</Value>
<Value name="3">
<Value>WomanDOB</Value>
</Value>
<Value name="4">
<Value>City</Value>
</Value>
<Value name="5">
<Value>Club</Value>
</Value>
<Value name="6">
<Value>MainTrainer</Value>
</Value>
<Value name="7">
<Value>OtherTrainers</Value>
</Value>
</Data>
<DefaultData>ParticipantCoupleWDSFDefaultData</DefaultData>
<Type>%Library.CacheStorage</Type>
</Storage>
*/
]]></Content>
</UDLText>

<Method name="SaveParticipantCoupleWDSF">
<Description>
select 'do ..SaveParticipantCoupleWDSF("' || ID || '", "' || City || '", "' || Club || '", "' || Couple || '", "' || ManDOB || '", "' || WomanDOB || '", "' || IFNULL(MainTrainer, "", MainTrainer)  || '", "' || IFNULL(OtherTrainers, "", OtherTrainers)  || '")'</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ID,City,Club,Couple,ManDOB,WomanDOB,MainTrainer,OtherTrainers</FormalSpec>
<Implementation><![CDATA[	set ^Dance.Data.ParticipantD(ID, "ParticipantCoupleWDSF")	=	$lb(Couple, ManDOB, WomanDOB, City, Club, MainTrainer, OtherTrainers)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
select 
'do ..SaveParticipantCoupleOther("' || ID || '", "' || 
IFNULL(City, "", City) || '", "' || 
IFNULL(Club, "", Club)  || '", "' || 
Country  || '", "' ||  
CoupleKey  || '", "' || 
IFNULL(ManDOB, "", ManDOB)  || '", "' ||  
IFNULL(ManFirstName,  "", ManFirstName)  || '", "' || 
IFNULL(ManLastName,  "", ManLastName)  || '", "' || 
IFNULL(WomanDOB,  "", WomanDOB)  || '", "' || 
IFNULL(WomanFirstName,  "", WomanFirstName)  || '", "' || 
IFNULL(WomanLastName, "", WomanLastName)  || '", "' || 
IFNULL(MainTrainer, "", MainTrainer) || '", "' || 
IFNULL(OtherTrainers, "", OtherTrainers) || '")'
from Dance_Data.ParticipantCoupleOther

<Storage name="Default">
<Data name="ParticipantCoupleOtherDefaultData">
<Subscript>"ParticipantCoupleOther"</Subscript>
<Value name="1">
<Value>CoupleKey</Value>
</Value>
<Value name="2">
<Value>ManLastName</Value>
</Value>
<Value name="3">
<Value>ManFirstName</Value>
</Value>
<Value name="4">
<Value>ManDOB</Value>
</Value>
<Value name="5">
<Value>WomanLastName</Value>
</Value>
<Value name="6">
<Value>WomanFirstName</Value>
</Value>
<Value name="7">
<Value>WomanDOB</Value>
</Value>
<Value name="8">
<Value>Country</Value>
</Value>
<Value name="9">
<Value>City</Value>
</Value>
<Value name="10">
<Value>Club</Value>
</Value>
<Value name="11">
<Value>MainTrainer</Value>
</Value>
<Value name="12">
<Value>OtherTrainers</Value>
</Value>
</Data>
<DefaultData>ParticipantCoupleOtherDefaultData</DefaultData>
<Type>%Library.CacheStorage</Type>
</Storage>
*/
]]></Content>
</UDLText>

<Method name="SaveParticipantCoupleOther">
<ClassMethod>1</ClassMethod>
<FormalSpec>ID,City,Club,Country,CoupleKey,ManDOB,ManFirstName,ManLastName,WomanDOB,WomanFirstName,WomanLastName,MainTrainer,OtherTrainers</FormalSpec>
<Implementation><![CDATA[	set ^Dance.Data.ParticipantD(ID, "ParticipantCoupleOther")	= $lb(CoupleKey, ManLastName, ManFirstName, ManDOB, WomanLastName, WomanFirstName, WomanDOB, Country, City, Club, MainTrainer, OtherTrainers)
]]></Implementation>
</Method>

<Method name="Test">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set rec = ##class(Dance.Data.Recorder).%New()
	set rec.Name = "Test"
	set rec.LoginHash = "Test"
	set rec.Login = "Test"
	set rec.IsInUse = 1
	set rec.OtherInfo = "TEst"
	set rec.Password = "Test"
]]></Implementation>
</Method>

<Method name="TestRegistrationWDSF">
<Description>
do ##class(Dance.Utils.Test).TestRegistrationWDSF()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try{
		set data = ##class(%ZEN.proxyObject).%New()
		set data.competitions = ##class(%ListOfDataTypes).%New()
		do data.competitions.Insert(2)
		set data.couple = ##class(Dance.Data.CoupleWDSF).GetByNumbers(10073546,10073691,.st).ConvertToProxyObject()
		set data.couple.man.dob = "1995-01-01"
		set data.couple.woman.dob = "1996-03-05"
		set data.couple.otherInfo.city = "London"
		set data.couple.otherInfo.club = "Cha-cah club"
		set data.couple.otherInfo.mainTrainer = "Petrov Oleg"
		set data.couple.otherInfo.otherTrainers = "Volkov Pavel, Andreev Victor"
		
		w !, ##class(Dance.Web.JsonUser).RegistrationWDSF(data)
	}
	catch(ex){
		do $SYSTEM.OBJ.DisplayError(ex.AsStatus())
	}
		
	q $$$OK
]]></Implementation>
</Method>

<Method name="InitTest">
<Description>
do ##class(Dance.Utils.Test).InitTest()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	try{
	do ##class(Dance.Utils.Init.BaseInit).KillThemAll()
	
	do ##class(Dance.Utils.Init.LTextLanguage).Import()
	
	do ##class(Dance.Utils.Init.DancerClass).Import()
	do ##class(Dance.Utils.Init.Country).Import()
	do ##class(Dance.Utils.Init.CompetitionType).Import()
	do ##class(Dance.Utils.Init.TournamentStatus).Import()
	do ##class(Dance.Utils.Init.TournamentRank).Import()
	do ##class(Dance.Utils.Init.Discipline).Import()
	do ##class(Dance.Utils.Init.AgeCategory).Import()
	
	//=============== TOURNAMENT =============================================
	set trn = ##class(Dance.Data.Tournament).%New()
	set trn.Name = ##class(Dance.Data.Localization.LText).Create("Турнир 1")
    set trn.FullName = ##class(Dance.Data.Localization.LText).Create("Турнир 1 Москва СТСР")
    set trn.City = ##class(Dance.Data.Localization.LText).Create("Москва")
    set trn.OrganizerInfo = ##class(Dance.Data.Localization.LText).Create("СТСР")
      	
    set trn.IdInternal = 1000
    set trn.IdExternal = 10
    set trn.Hash = "H-1000-10"
      	
    set trn.OrganizerSite = "www.test.com"
    
   	set trn.Country = ##class(Dance.Data.Country).GetByName("Российская Федерация")
    set trn.TStatus = ##class(Dance.Data.TournamentStatus).%OpenId(1)
    set trn.TRank = ##class(Dance.Data.TournamentRank).%OpenId(1)
      	
    set trn.StartDate = $ZDATEH("2014-01-22", 15)
    set trn.EndDate = $ZDATEH("2014-01-24", 15)
         		
    $$$THROWONERROR(st, trn.%Save())
	
	w !,"Tournament created = "_(st = 1)
	
	
	//=============== COMPETITION =============================================
	set cmp = ##class(Dance.Data.Competition).%New()
    set cmp.Name = ##class(Dance.Data.Localization.LText).Create("Группа 1")
    set cmp.Tournament = trn
      	
    set cmp.Discipline = ##class(Dance.Data.Discipline).%OpenId(1)
    set cmp.AgeCategory = ##class(Dance.Data.AgeCategory).%OpenId(1)
    set cmp.Type = ##class(Dance.Data.CompetitionType).%OpenId(1)
      	
    set cmp.StartDate = $ZDATEH("2014-01-22", 15)
    set cmp.StartTime = ##class(%Library.Time).DisplayToLogical("20:00")
      	
    set cmp.Price = 123
    set cmp.Limit = 0
    set cmp.IsInternational = $$$YES
      
    set cmp.IdInternal = 2000
    set cmp.IdExternal = 20
      	
	do cmp.DancerClasses.SetAt(##class(Dance.Data.DancerClass).%OpenId(1), 1)
	do cmp.DancerClasses.SetAt(##class(Dance.Data.DancerClass).%OpenId(2), 2)
	  	
    $$$THROWONERROR(st, cmp.%Save())
    w !,"Competition created = "_(st = 1)
    
    //================================ PERSON ==================================
    w !,"Man created = "_(1 = ##class(Dance.Data.Person).UpdateFromString("122;Алексеевский Павел;Александрович;24.10.1983;.;  -   -;.;;;;Alexeevskiy Pavel;Вдохновение;С.-Петербург;;;;78;;121;;;0", "M"))
	w !,"Man created = "_(1 = ##class(Dance.Data.Person).UpdateFromString("156;Казмирчук Евгений;Петрович;22.05.1976;.;  -   -;.;;;;Kazmirchuk Evgeny;;Москва;;;;77;;272;;;0", "M"))
	w !,"Man created = "_(1 = ##class(Dance.Data.Person).UpdateFromString("163;Белозеров Сергей;Олегович;10.06.1979;.;  -   -;.;;;;Belozerov Sergey;;Москва;;;;77;;154;;;0", "M"))
	w !,"Man created = "_(1 = ##class(Dance.Data.Person).UpdateFromString("198;Эйдинов Павел;Александрович;01.09.1983;.;  -   -;.;;;;Eydinov Pavel;Динамо;Москва;;;;77;;197;;;0", "M"))
	w !,"Man created = "_(1 = ##class(Dance.Data.Person).UpdateFromString("236;Чешаев Дмитрий;Александрович;27.11.1988;.;  -   -;.;;;;Cheshaev Dmitriy;;Рязань;;;;62;;244;;;0", "M"))

	w !,"Woman created = "_(1 = ##class(Dance.Data.Person).UpdateFromString("106;Пашкова Елена;Александровна;18.01.1979;.;;.;;;;Pashkova Elena;;Москва;;;;77;;;;;0", "F"))
	w !,"Woman created = "_(1 = ##class(Dance.Data.Person).UpdateFromString("121;Жуплева Екатерина;Сергеевна;04.02.1985;.;;.;;;;Zhupleva Ekaterina;Вдохновение;С.-Петербург;;;;78;;;;31.12.2014;0", "F"))
	w !,"Woman created = "_(1 = ##class(Dance.Data.Person).UpdateFromString("154;Белозерова Екатерина;Владимировна;18.08.1982;.;;.;;;;Belozerova Ekaterina;;Москва;;;;77;;;;;0", "F"))
	w !,"Woman created = "_(1 = ##class(Dance.Data.Person).UpdateFromString("197;Ливатова Татьяна;Михайловна;14.07.1986;.;;.;;;;Livatova Tatiana;Динамо;Москва;;;;77;;;;;0", "F"))
	w !,"Woman created = "_(1 = ##class(Dance.Data.Person).UpdateFromString("244;Чешаева Юлия;Олеговна;15.07.1986;.;;.;;;;Cheshaeva Juliya;;Рязань;;;;62;;;;;0", "F"))
	
	w !,"Man created = "_(1 = ##class(Dance.Data.Person).UpdateFromString("247;Савицкий Сергей;Анатольевич;01.07.1985;.;  -   -;.;;;;Savitsky Sergey;;Москва;;;;77;;;;;0", "M"))
	w !,"Man created = "_(1 = ##class(Dance.Data.Person).UpdateFromString("249;Воропаев Илья;Александрович;21.04.1978;.;  -   -;.;;;;Voropaev Ilya;;Новосибирск;;;;54;;246;;;0", "M"))
	w !,"Woman created = "_(1 = ##class(Dance.Data.Person).UpdateFromString("268;Минаева Елена;Владимировна;15.01.1985;.;;.;;;;Minaeva Elena;;Орел;;;;57;;;;;0", "F"))
	w !,"Woman created = "_(1 = ##class(Dance.Data.Person).UpdateFromString("272;Ким Екатерина;Сергеевна;30.06.1988;.;;.;;_;;Kim Ekaterina;;Москва;;;;77;;;;;0", "F"))


	//================================ PARTICIPANTS ==================================
    
    set participant = ##class(Dance.Data.Participant).Create(cmp.%Id(), ##class(Dance.Data.Couple).Create(1,6,.st).%Id(), .st)
	w !,"Participant created = "_(st = 1)
	
	set participant = ##class(Dance.Data.Participant).Create(cmp.%Id(), ##class(Dance.Data.Couple).Create(2,7,.st).%Id(), .st)
	w !,"Participant created = "_(st = 1)
	
	set participant = ##class(Dance.Data.Participant).Create(cmp.%Id(), ##class(Dance.Data.Couple).Create(3,8,.st).%Id(), .st)
	w !,"Participant created = "_(st = 1)
	
	set participant = ##class(Dance.Data.Participant).Create(cmp.%Id(), ##class(Dance.Data.Couple).Create(4,9,.st).%Id(), .st)
	w !,"Participant created = "_(st = 1)
	
	set participant = ##class(Dance.Data.Participant).Create(cmp.%Id(), ##class(Dance.Data.Couple).Create(5,10,.st).%Id(), .st)
	w !,"Participant created = "_(st = 1)
	
	
	set participant = ##class(Dance.Data.Participant).Create(cmp.%Id(), ##class(Dance.Data.Couple).Create(11,11,.st).%Id(), .st)
	w !,"Participant created = "_(st = 1)
	
	set participant = ##class(Dance.Data.Participant).Create(cmp.%Id(), ##class(Dance.Data.Couple).Create(12,12,.st).%Id(), .st)
	w !,"Participant created = "_(st = 1)
	
	set participant = ##class(Dance.Data.Participant).Create(cmp.%Id(), ##class(Dance.Data.Couple).Create(13,13,.st).%Id(), .st)
	w !,"Participant created = "_(st = 1)
	
	set participant = ##class(Dance.Data.Participant).Create(cmp.%Id(), ##class(Dance.Data.Couple).Create(14,14,.st).%Id(), .st)
	w !,"Participant created = "_(st = 1)
	
	
	//================================ PARTICIPANTS TEMP ==================================
	set prtTemp = ##class(Dance.Data.ParticipantTemp).%New()
	set prtTemp.ManLastName = "Подолько"
	set prtTemp.ManFirstName = "Илья"
	set prtTemp.ManDOB = $ZDATEH("1990-01-22", 15)
	
	set prtTemp.WomanLastName = "Филипова"
	set prtTemp.WomanFirstName = "Мария"
	set prtTemp.WomanDOB = $ZDATEH("1993-04-25", 15)
	
	set prtTemp.Country = ##class(Dance.Data.Country).WDSFNameIdxOpen("Australia")
	set prtTemp.City = "Город Н"
	set prtTemp.Club = "Клуб К"
	set prtTemp.MainTrainer = "Визнюк Наталья"
	set prtTemp.OtherTrainers = "Архипова Мария, Арахисов Виктор"
	set prtTemp.Tournament = trn
	set prtTemp.Created = $ZD($ZTS,3)
	do prtTemp.Competitions.Insert(cmp)
	$$$THROWONERROR(st, prtTemp.%Save())
	//-----------
	
	set prtTemp = ##class(Dance.Data.ParticipantTemp).%New()
	set prtTemp.ManLastName = "Юдин"
	set prtTemp.ManFirstName = "Павел"
	set prtTemp.ManDOB = $ZDATEH("1990-01-22", 15)
	
	set prtTemp.WomanLastName = "Мостовая"
	set prtTemp.WomanFirstName = "Екатерина"
	set prtTemp.WomanDOB = $ZDATEH("1993-04-25", 15)
	
	set prtTemp.Country = ##class(Dance.Data.Country).WDSFNameIdxOpen("Austria")
	set prtTemp.City = "Город О"
	set prtTemp.Club = "Клуб Д"
	set prtTemp.MainTrainer = "Поаова Паша"
	set prtTemp.OtherTrainers = "Арахисов Виктор"
	set prtTemp.Tournament = trn
	set prtTemp.Created = $ZD($ZTS,3)
	do prtTemp.Competitions.Insert(cmp)
	$$$THROWONERROR(st, prtTemp.%Save())
	
	//-----------
	
	set prtTemp = ##class(Dance.Data.ParticipantTemp).%New()
	set prtTemp.WomanLastName = "Зубова"
	set prtTemp.WomanFirstName = "Юлия"
	set prtTemp.WomanDOB = $ZDATEH("1994-05-25", 15)
	
	set prtTemp.Country = ##class(Dance.Data.Country).WDSFNameIdxOpen("Russian Federation")
	set prtTemp.City = "Город 1"
	set prtTemp.Club = "Клуб 1"
	set prtTemp.MainTrainer = "Hоркоманов Виктор"
	set prtTemp.OtherTrainers = "Попова Мария"
	set prtTemp.Tournament = trn
	set prtTemp.Created = $ZD($ZTS,3)
	do prtTemp.Competitions.Insert(cmp)
	$$$THROWONERROR(st, prtTemp.%Save())

	//-----------

	set prtTemp = ##class(Dance.Data.ParticipantTemp).%New()
	set prtTemp.ManLastName = "Удалов"
	set prtTemp.ManFirstName = "Константин"
	set prtTemp.ManDOB = $ZDATEH("1990-01-22", 15)
	
	set prtTemp.Country = ##class(Dance.Data.Country).WDSFNameIdxOpen("Russian Federation")
	set prtTemp.City = "Город T"
	set prtTemp.Club = "Клуб T"
	set prtTemp.MainTrainer = "Hоркоманов Виктор"
	set prtTemp.OtherTrainers = "Попова Мария"
	set prtTemp.Tournament = trn
	set prtTemp.Created = $ZD($ZTS,3)
	do prtTemp.Competitions.Insert(cmp)
	$$$THROWONERROR(st, prtTemp.%Save())
	
	
	
	
	//================================ Tickets ==================================
	set ticket = ##class(Dance.Data.Import.Ticket).%New()
	set ticket.IdInternal = 1
	set ticket.Amount = 23432
	set ticket.PaymentCreated = $ZD($ZTS, 3)
	set ticket.City = "---"
	set ticket.Club = "----"
	set ticket.CodeOne = 234234
	set ticket.CodeTwo = 2343243
	set ticket.Description = "Билет UDSR участника"
	set ticket.FemaleDOBOrAge = "23"
	set ticket.FemaleFirstName = "Елена"
	set ticket.FemaleLastName = "Пашкова"
	set ticket.FemaleNumber = "106"
	set ticket.GroupIdInternal = 2000
	set ticket.MaleDOBOrAge = "33"
	set ticket.MaleFirstName = "Павел"
	set ticket.MaleLastName = "Алексеевский"
	set ticket.MaleNumber = "122"
	set ticket.OrderIdInternal = "X-02"
	set ticket.TournamentIdExternal = 10
	set ticket.Trainers = "-----"
	set ticket.TStatus = "pay"
	$$$THROWONERROR(st, ticket.%Save())
	
	set ticket = ##class(Dance.Data.Import.Ticket).%New()
	set ticket.IdInternal = 2
	set ticket.Amount = 23432
	set ticket.PaymentCreated = $ZD($ZTS, 3)
	set ticket.City = "-----"
	set ticket.Club = "-----"
	set ticket.CodeOne = 234234
	set ticket.CodeTwo = 2343243
	set ticket.Description = "Билет UDSR участника"
	set ticket.FemaleDOBOrAge = "22"
	set ticket.FemaleFirstName = "Екатерина"
	set ticket.FemaleLastName = "Жуплева"
	set ticket.FemaleNumber = "121"
	set ticket.GroupIdInternal = 2000
	set ticket.MaleDOBOrAge = "22"
	set ticket.MaleFirstName = "Евгений"
	set ticket.MaleLastName = "Казмирчук"
	set ticket.MaleNumber = "156"
	set ticket.OrderIdInternal = "X-02"
	set ticket.TournamentIdExternal = 10
	set ticket.Trainers = "----"
	set ticket.TStatus = "pay"
	$$$THROWONERROR(st, ticket.%Save())
	
	
	set ticket = ##class(Dance.Data.Import.Ticket).%New()
	set ticket.IdInternal = 3
	set ticket.Amount = 23432
	set ticket.PaymentCreated = $ZD($ZTS, 3)
	set ticket.City = "----"
	set ticket.Club = "----"
	set ticket.CodeOne = 234234
	set ticket.CodeTwo = 2343243
	set ticket.Description = "Билет UDSR участника"
	set ticket.FemaleDOBOrAge = "22"
	set ticket.FemaleFirstName = "Екатерина"
	set ticket.FemaleLastName = "Белозерова"
	set ticket.FemaleNumber = "154"
	set ticket.GroupIdInternal = 2000
	set ticket.MaleDOBOrAge = "21"
	set ticket.MaleFirstName = "Сергей"
	set ticket.MaleLastName = "Белозеров"
	set ticket.MaleNumber = "163"
	set ticket.OrderIdInternal = "X-02"
	set ticket.TournamentIdExternal = 10
	set ticket.Trainers = "-----"
	set ticket.TStatus = "pay"
	$$$THROWONERROR(st, ticket.%Save())
	
	
	set ticket = ##class(Dance.Data.Import.Ticket).%New()
	set ticket.IdInternal = 4
	set ticket.Amount = 23432
	set ticket.PaymentCreated = $ZD($ZTS, 3)
	set ticket.City = "----"
	set ticket.Club = "----"
	set ticket.CodeOne = 234234
	set ticket.CodeTwo = 2343243
	set ticket.Description = "Билет UDSR участника"
	set ticket.FemaleDOBOrAge = "21"
	set ticket.FemaleFirstName = "Татьяна"
	set ticket.FemaleLastName = "Ливатова"
	set ticket.FemaleNumber = "197"
	set ticket.GroupIdInternal = 2000
	set ticket.MaleDOBOrAge = "22"
	set ticket.MaleFirstName = "Павел"
	set ticket.MaleLastName = "Эйдинов"
	set ticket.MaleNumber = "198"
	set ticket.OrderIdInternal = "X-02"
	set ticket.TournamentIdExternal = 10
	set ticket.Trainers = "----"
	set ticket.TStatus = "pay"
	$$$THROWONERROR(st, ticket.%Save())
	
	
	set ticket = ##class(Dance.Data.Import.Ticket).%New()
	set ticket.IdInternal = 5
	set ticket.Amount = 23432
	set ticket.PaymentCreated = $ZD($ZTS, 3)
	set ticket.City = "----"
	set ticket.Club = "-----"
	set ticket.CodeOne = 234234
	set ticket.CodeTwo = 2343243
	set ticket.Description = "Билет UDSR участника"
	set ticket.FemaleDOBOrAge = "11"
	set ticket.FemaleFirstName = "Юлия"
	set ticket.FemaleLastName = "Чешаева"
	set ticket.FemaleNumber = "244"
	set ticket.GroupIdInternal = 2000
	set ticket.MaleDOBOrAge = "23"
	set ticket.MaleFirstName = "Дмитрий"
	set ticket.MaleLastName = "Чешаев"
	set ticket.MaleNumber = "236"
	set ticket.OrderIdInternal = "X-02"
	set ticket.TournamentIdExternal = 10
	set ticket.Trainers = "----"
	set ticket.TStatus = "pay"
	$$$THROWONERROR(st, ticket.%Save())
	
	
	set ticket = ##class(Dance.Data.Import.Ticket).%New()
	set ticket.IdInternal = 6
	set ticket.Amount = 23432
	set ticket.PaymentCreated = $ZD($ZTS, 3)
	set ticket.City = "----"
	set ticket.Club = "----"
	set ticket.CodeOne = 234234
	set ticket.CodeTwo = 2343243
	set ticket.Description = "Билет SOLO UDSR участника"
	set ticket.FemaleDOBOrAge = " "
	set ticket.FemaleFirstName = " "
	set ticket.FemaleLastName = " "
	set ticket.FemaleNumber = " "
	set ticket.GroupIdInternal = 2000
	set ticket.MaleDOBOrAge = "22"
	set ticket.MaleFirstName = "Сергей"
	set ticket.MaleLastName = "Савицкий"
	set ticket.MaleNumber = "247"
	set ticket.OrderIdInternal = "X-02"
	set ticket.TournamentIdExternal = 10
	set ticket.Trainers = "-----"
	set ticket.TStatus = "pay"
	$$$THROWONERROR(st, ticket.%Save())
	
	
	set ticket = ##class(Dance.Data.Import.Ticket).%New()
	set ticket.IdInternal = 7
	set ticket.Amount = 23432
	set ticket.PaymentCreated = $ZD($ZTS, 3)
	set ticket.City = ""
	set ticket.Club = ""
	set ticket.CodeOne = 234234
	set ticket.CodeTwo = 2343243
	set ticket.Description = "Билет SOLO UDSR участника"
	set ticket.FemaleDOBOrAge = " "
	set ticket.FemaleFirstName = " "
	set ticket.FemaleLastName = " "
	set ticket.FemaleNumber = " "
	set ticket.GroupIdInternal = 2000
	set ticket.MaleDOBOrAge = "22"
	set ticket.MaleFirstName = "Илья"
	set ticket.MaleLastName = "Воропаев"
	set ticket.MaleNumber = "249"
	set ticket.OrderIdInternal = "X-02"
	set ticket.TournamentIdExternal = 10
	set ticket.Trainers = ""
	set ticket.TStatus = "pay"
	$$$THROWONERROR(st, ticket.%Save())
	
	
	set ticket = ##class(Dance.Data.Import.Ticket).%New()
	set ticket.IdInternal = 8
	set ticket.Amount = 23432
	set ticket.PaymentCreated = $ZD($ZTS, 3)
	set ticket.City = "---"
	set ticket.Club = "---"
	set ticket.CodeOne = 234234
	set ticket.CodeTwo = 2343243
	set ticket.Description = "Билет SOLO UDSR участника"
	set ticket.FemaleDOBOrAge = " "
	set ticket.FemaleFirstName = " "
	set ticket.FemaleLastName = " "
	set ticket.FemaleNumber = " "
	set ticket.GroupIdInternal = 2000
	set ticket.MaleDOBOrAge = "23"
	set ticket.MaleFirstName = "Елена"
	set ticket.MaleLastName = "Минаева"
	set ticket.MaleNumber = "268"
	set ticket.OrderIdInternal = "X-02"
	set ticket.TournamentIdExternal = 10
	set ticket.Trainers = "----"
	set ticket.TStatus = "pay"
	$$$THROWONERROR(st, ticket.%Save())
	
	
	set ticket = ##class(Dance.Data.Import.Ticket).%New()
	set ticket.IdInternal = 9
	set ticket.Amount = 23432
	set ticket.PaymentCreated = $ZD($ZTS, 3)
	set ticket.City = "----"
	set ticket.Club = "----"
	set ticket.CodeOne = 234234
	set ticket.CodeTwo = 2343243
	set ticket.Description = "Билет SOLO UDSR участника"
	set ticket.FemaleDOBOrAge = " "
	set ticket.FemaleFirstName = " "
	set ticket.FemaleLastName = " "
	set ticket.FemaleNumber = " "
	set ticket.GroupIdInternal = 2000
	set ticket.MaleDOBOrAge = "22"
	set ticket.MaleFirstName = "Екатерина"
	set ticket.MaleLastName = "Ким"
	set ticket.MaleNumber = "272"
	set ticket.OrderIdInternal = "X-02"
	set ticket.TournamentIdExternal = 10
	set ticket.Trainers = "----"
	set ticket.TStatus = "pay"
	$$$THROWONERROR(st, ticket.%Save())
 
	set ticket = ##class(Dance.Data.Import.Ticket).%New()
	set ticket.IdInternal = 10
	set ticket.Amount = 23432
	set ticket.PaymentCreated = $ZD($ZTS, 3)
	set ticket.City = "Город T-Т"
	set ticket.Club = "Клуб Т-Т"
	set ticket.CodeOne = 234234
	set ticket.CodeTwo = 2343243
	set ticket.Description = "Билет соло муждународного участника"
	set ticket.FemaleDOBOrAge = " "
	set ticket.FemaleFirstName = " "
	set ticket.FemaleLastName = " "
	set ticket.FemaleNumber = " "
	set ticket.GroupIdInternal = 2000
	set ticket.MaleDOBOrAge = "1990-01-22"
	set ticket.MaleFirstName = "Константин"
	set ticket.MaleLastName = "Удалов"
	set ticket.MaleNumber = ""
	set ticket.OrderIdInternal = "X-01"
	set ticket.TournamentIdExternal = 10
	set ticket.Trainers = "Писюкин Артур"
	set ticket.TStatus = "pay"
	$$$THROWONERROR(st, ticket.%Save())
	
	//------
	
	set ticket = ##class(Dance.Data.Import.Ticket).%New()
	set ticket.IdInternal = 11
	set ticket.Amount = 23432
	set ticket.PaymentCreated = $ZD($ZTS, 3)
	set ticket.City = "Город T-Т"
	set ticket.Club = "Клуб Т-Т"
	set ticket.CodeOne = 234234
	set ticket.CodeTwo = 2343243
	set ticket.Description = "Билет соло муждународного участника"
	set ticket.FemaleDOBOrAge = " "
	set ticket.FemaleFirstName = " "
	set ticket.FemaleLastName = " "
	set ticket.FemaleNumber = " "
	set ticket.GroupIdInternal = 2000
	set ticket.MaleDOBOrAge = "1995-08-12"
	set ticket.MaleFirstName = "Виктор"
	set ticket.MaleLastName = "Арбузов"
	set ticket.MaleNumber = ""
	set ticket.OrderIdInternal = "X-01"
	set ticket.TournamentIdExternal = 10
	set ticket.Trainers = "Аладинов Виктор"
	set ticket.TStatus = "pay"
	$$$THROWONERROR(st, ticket.%Save())	
	
	
	set ticket = ##class(Dance.Data.Import.Ticket).%New()
	set ticket.IdInternal = 12
	set ticket.Amount = 23432
	set ticket.PaymentCreated = $ZD($ZTS, 3)
	set ticket.City = "Город G-R"
	set ticket.Club = "Клуб G-R"
	set ticket.CodeOne = 234234
	set ticket.CodeTwo = 2343243
	set ticket.Description = "Билет пара муждународного участника"
	set ticket.FemaleDOBOrAge = "1990-01-09"
	set ticket.FemaleFirstName = "Мария"
	set ticket.FemaleLastName = "Попова"
	set ticket.FemaleNumber = " "
	set ticket.GroupIdInternal = 2000
	set ticket.MaleDOBOrAge = "1993-04-12"
	set ticket.MaleFirstName = "Алексей"
	set ticket.MaleLastName = "Попов"
	set ticket.MaleNumber = ""
	set ticket.OrderIdInternal = "X-0343"
	set ticket.TournamentIdExternal = 10
	set ticket.Trainers = "Кермиков Виктор"
	set ticket.TStatus = "pay"
	$$$THROWONERROR(st, ticket.%Save())	
	
	
	set ticket = ##class(Dance.Data.Import.Ticket).%New()
	set ticket.IdInternal = 13
	set ticket.Amount = 23432
	set ticket.PaymentCreated = $ZD($ZTS, 3)
	set ticket.City = "Город Н-R"
	set ticket.Club = "Клуб Л-R"
	set ticket.CodeOne = 234234
	set ticket.CodeTwo = 2343243
	set ticket.Description = "Билет пара муждународного участника"
	set ticket.FemaleDOBOrAge = "1999-11-11"
	set ticket.FemaleFirstName = "Екатерина"
	set ticket.FemaleLastName = "Мостовая"
	set ticket.FemaleNumber = " "
	set ticket.GroupIdInternal = 2000
	set ticket.MaleDOBOrAge = "2000-01-01"
	set ticket.MaleFirstName = "Павел"
	set ticket.MaleLastName = "Юдин"
	set ticket.MaleNumber = ""
	set ticket.OrderIdInternal = "X-0343"
	set ticket.TournamentIdExternal = 10
	set ticket.Trainers = "Кермиков Виктор"
	set ticket.TStatus = "pay"
	$$$THROWONERROR(st, ticket.%Save())	


	set ticket = ##class(Dance.Data.Import.Ticket).%New()
	set ticket.IdInternal = 14
	set ticket.Amount = 23432
	set ticket.PaymentCreated = $ZD($ZTS, 3)
	set ticket.City = "Город АН-R"
	set ticket.Club = "Клуб ККЛ-R"
	set ticket.CodeOne = 234234
	set ticket.CodeTwo = 2343243
	set ticket.Description = "Билет соло муждународного участника"
	set ticket.FemaleDOBOrAge = "1999-11-11"
	set ticket.FemaleFirstName = "Юлия"
	set ticket.FemaleLastName = "Зубова"
	set ticket.FemaleNumber = " "
	set ticket.GroupIdInternal = 2000
	set ticket.MaleDOBOrAge = " "
	set ticket.MaleFirstName = " "
	set ticket.MaleLastName = " "
	set ticket.MaleNumber = ""
	set ticket.OrderIdInternal = "X-0343"
	set ticket.TournamentIdExternal = 10
	set ticket.Trainers = "Прокопсук Виктор"
	set ticket.TStatus = "pay"
	$$$THROWONERROR(st, ticket.%Save())		
	
	}catch(ex){
		w !,ex.AsStatus()
	}
]]></Implementation>
</Method>

<Method name="TestPerformance">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w !,"Start time:"_$H
	set whereCondition = "IsActive = 1 AND Tournament = '5'"
    
    set params = ##class(%ZEN.proxyObject).%New()
    set params.first = 1
    set params.last = 500
    set params.searchText = ""
    set params.sqlName = "StartDate"

    set result = ##class(Dance.Web.JsonBase).GetProxyObjectsForGrid("SELECT ID FROM Dance_Data.Competition", "Dance.Data.Competition", params, whereCondition)
	w !,"result.children.itemsTotal=",result.children.itemsTotal
	w !,"End time:"_$H
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Wdsf.API">
<Abstract>1</Abstract>
<TimeCreated>63287,4352.913679</TimeCreated>

<Method name="Call">
<Description>
do ##class(Dance.Wdsf.API).Call("GET", "/competition/46164?format=json", .resp)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pMethod:%String,pUrl:%String,&sc:%Status=$$$OK]]></FormalSpec>
<Private>1</Private>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK
	set pResponse = ##class(%ZEN.proxyObject).%New()
	
 	try 
 	{
  		set req = ##class(%Net.HttpRequest).%New()
  		set req.SSLConfiguration = $g(^Settings("Dance","Wdsf", "SslConfig"))
  		set req.Server = "services.worlddancesport.org"
  		set req.Https = 1
  		set req.Port = 443
  		set req.ProxyHTTPS = 1
  		set req.ProxyServer = $g(^Settings("Dance","Wdsf", "ProxyServer"))
  		set req.ProxyPort = $g(^Settings("Dance","Wdsf", "ProxyPort"))
  		set req.ProxyTunnel = $g(^Settings("Dance","Wdsf", "ProxyTunnel"))
  		set req.Timeout = 10
  		
  		set req.Authorization = "Basic "_$system.Encryption.Base64Encode($g(^Settings("Dance","Wdsf", "Login"))_":"_$g(^Settings("Dance","Wdsf", "Password")))
  		set pUrl = "/api/1"_pUrl
	 	
  		$$$TOE(sc, req.Send($zconvert(pMethod,"u"), pUrl))
 		set json = req.HttpResponse.Data.Read()
  	
  		$$$TOE(sc,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(json,,.pResponse))
 	}
 	catch ex
 	{
  		set sc = ex.AsStatus()
 	}
 	
 	quit pResponse
]]></Implementation>
</Method>

<Method name="GetCompetitions">
<Description>
Get all competitions, use query parameters
from [DateTime] : list competitions since and including this date (YYYY/MM/DD)
to [DateTime] : list competitions after and including this date (YYYY/MM/DD)
modifiedsince [Date] : list competitions that have been modified since this date (YYYY/MM/DDThh:mm:ss)
division [string] : General/Professional
status: The status of the competition. Valid values are:PreRegistration, Registering, RegistrationClosed, Processing, Closed, Canceled
location: The city name where the competition takes/took place.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[*pResponse:%ZEN.proxyObject,from:%String="",to:%String="",modifiedsince:%String="",division:%String="",status:%String="",location:%String="",&sc:%Status=$$$OK]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set url = "/competition?format=json"
	
	if (from '= "") set url = url_"&from="_from
	if (to '= "") set url = url_"&to="_to
	if (modifiedsince '= "") set url = url_"&modifiedsince="_modifiedsince
	if (division '= "") set url = url_"&division="_division
	if (status '= "") set url = url_"&status="_status
	if (location '= "") set url = url_"&location="_location
	

	quit ..Call("GET", url, sc)
]]></Implementation>
</Method>

<Method name="GetCompetitionById">
<Description>
Get one competition by id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[id:%String,&sc:%Status=$$$OK]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set url = "/competition/"_id_"?format=json"
	
	quit ..Call("GET", url, sc)
]]></Implementation>
</Method>

<Method name="GetTournamentCompetitionsByGroupId">
<Description>
Get competitions in group|tournament</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[id:%String,&sc:%Status=$$$OK]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set url = "/competition?format=json&groupId="_id
	
	quit ..Call("GET", url, sc)
]]></Implementation>
</Method>

<Method name="GetPerson">
<Description>
Get person by id (MIN)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[id:%String,&sc:%Status=$$$OK]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set url = "/person/"_id_"?format=json"
	
	quit ..Call("GET", url, sc)
]]></Implementation>
</Method>

<Method name="GetCouples">
<Description>
Get couples, use query parameters
name [string] : list all couples where any member's name starts with this filter's value. Separate name und surname with a comma(,). The order is not relevant.
min [int] : list couples where any member's MIN is the filter's value(1xxxxxxx can be omitted)
ageGroup [string] : list couples of an age group (Adult, Senior I, Senior II, Youth, ...)
division [string] : General/Professional</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[min:%String="",name:%String="",ageGroup:%String="",division:%String="",&sc:%Status=$$$OK]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set url = "/couple?format=json"
	
	if (name '= "") set url = url_"&name="_name
	if (min '= "") set url = url_"&min="_min
	if (ageGroup '= "") set url = url_"&ageGroup="_ageGroup
	if (division '= "") set url = url_"&division="_division
	
	quit ..Call("GET", url, sc)
]]></Implementation>
</Method>

<Method name="GetCouple">
<Description>
Get couple by id, example id = rls-1802</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[id:%String,&sc:%Status=$$$OK]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set url = "/couple/"_id_"?format=json"
	
	quit ..Call("GET", url, sc)
]]></Implementation>
</Method>

<Method name="GetAgeGroups">
<Description>
Get all age groups</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&sc:%Status=$$$OK]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set url = "/age?format=json"
	
	quit ..Call("GET", url, sc)
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Wdsf.ControllerAPI">
<Abstract>1</Abstract>
<TimeCreated>63425,77020.931316</TimeCreated>

<Method name="Call">
<Description>
do ##class(Dance.Wdsf.ControllerAPI).Call("GET", "/couple", .sc)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pMethod:%String,pUrl:%String,data:%ZEN.proxyObject="",&st:%Status=$$$OK,recorder:Dance.Data.Recorder=""]]></FormalSpec>
<Private>1</Private>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	set pResponse = ##class(%ZEN.proxyObject).%New()
	
 	try 
 	{
  		set req = ##class(%Net.HttpRequest).%New()
  		set req.Server = $G(^Settings("Dance","WdsfController", "Server"))
  		set req.Port = $G(^Settings("Dance","WdsfController", "Port"), 80)
  		do req.SetHeader("Accept-Language", ##class(%MessageDictionary).GetSessionLanguage())
  		
  		if '$ISOBJECT(recorder){
  			set recorder = ##class(Dance.Data.Recorder).GetSystemRecorder()
  		}
  		
  		set req.Authorization = "Basic "_$system.Encryption.Base64Encode(recorder.Login_":"_recorder.Password)
  		
  		if $ISOBJECT(data) {
   			set req.ContentType="application/json"
   			set tIO = $IO
   			set tMnemSpace = ##class(%Library.Device).GetMnemonicRoutine()
   			try{
	  			$$$TOE(sc,##class(%ZEN.Auxiliary.jsonProvider).%WriteJSONStreamFromObject(req.EntityBody, data))
	  			use tIO::("^"_tMnemSpace)
   			}
   			catch ex{
	  			use tIO::("^"_tMnemSpace)
	  			throw ex
   			}
  		}

  		set pUrl = $G(^Settings("Dance","WdsfController", "API"))_pUrl
  		//w !,pUrl,!
  		$$$TOE(st, req.Send($zconvert(pMethod, "U"), pUrl))
		
		set json = req.HttpResponse.Data.Read(1000000000)
 		set ^temp("json") = json
 		
 		$$$TOE(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(json,,.pResponse))
 		
 		if (req.HttpResponse.StatusCode '= 200){
 			$$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("error_BadResponseStatus", " Code="_req.HttpResponse.StatusCode))
 		}
 	}
 	catch (ex) {
  		set st = ex.AsStatus()
 	}

 	quit pResponse
]]></Implementation>
</Method>

<Method name="Registration">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%ZEN.proxyObject,recorder:Dance.Data.Recorder,&st:%Status]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[	quit ..Call("POST", "/registration", data, .st, recorder)
]]></Implementation>
</Method>

<Method name="Deregistration">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[competitionId:%String,manNumber:%String,womanNumber:%String,&st:%Status]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set data = ##class(%ZEN.proxyObject).%New()
	set data.competitionId = competitionId
	set data.manNumber = manNumber
	set data.womanNumber = womanNumber
	
	quit ..Call("POST", "/deregistration", data, .st)
]]></Implementation>
</Method>

<Method name="GetCouples">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[min:%String="",&st:%Status]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set filter = ""
	if (min){
		set filter = "?min="_min
	}
	
	quit ..Call("GET", "/couple"_filter,, .st)
]]></Implementation>
</Method>

<Method name="GetCoupleByName">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[manFullName:%String,womanFullName:%String,&st:%Status]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set filter = "?manFullName="_manFullName_"&womanFullName="_womanFullName
	
	quit ..Call("GET", "/couple"_filter,, .st)
]]></Implementation>
</Method>

<Method name="GetCoupleByNumbers">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[manNumber:%String,womanNumber:%String,&st:%Status]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[	quit ..Call("GET", "/couple?manNumber="_manNumber_"&womanNumber="_womanNumber,, .st)
]]></Implementation>
</Method>

<Method name="GetPerson">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[id:%String,&st:%Status]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[	quit ..Call("GET", "/person/"_id,, .st)
]]></Implementation>
</Method>

<Method name="GetPersonsByFullName">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[lastName:%String,firstName:%String,&st:%Status]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[	quit ..Call("GET", "/person?name="_lastName_","_firstName,, .st)
]]></Implementation>
</Method>

<Method name="GetCompetitions">
<Description>
country(any word), tournamentId, status, from(YYYY-MM-DD), to(YYYY-MM-DD), modifiedsince(YYYY-MM-DDThh:mm:ss)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[from:%String="",to:%String="",modifiedsince:%TimeStamp="",&st:%Status]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set filter = "?v=1"
	
	if (from '= "") set filter = filter_"&from="_from
	if (to '= "") set filter = filter_"&to="_to 
	if (modifiedsince '= "") set filter = filter_"&modifiedsince="_$REPLACE(modifiedsince, " ", "T")
	
	quit ..Call("GET", "/competition"_filter,, .st)
]]></Implementation>
</Method>

<Method name="GetAgeGroups">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&st:%Status]]></FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[	quit ..Call("GET", "/ageGroup",, .st)
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Web.BrokerAdmin">
<Description>
Protected REST URLs</Description>
<Super>Dance.Web.BrokerBase</Super>
<TimeCreated>63289,65480.266604</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>

<!-- ========================================================================================================= -->
<!-- Tournament                                                                                     Tournament -->
<!-- ========================================================================================================= -->

<!-- SAVE Tournament -->
<Route Method="POST"   Url="/tournament"     Call="Dance.Web.JsonAdmin:SaveTournament"/>

<!-- DELETE BY ID (Hide from table), Tournament -->
<Route Method="DELETE" Url="/tournament/:id"   Call="Dance.Web.JsonAdmin:DeactivateTournament"/>


<!-- ========================================================================================================= -->
<!-- Competition                                                                                   Competition -->
<!-- ========================================================================================================= -->

<!-- SAVE Competition -->
<Route Method="POST"   Url="/tournament/:id/competition"     Call="Dance.Web.JsonAdmin:SaveCompetition"/>

<!-- SAVE ALL Competitions -->
<Route Method="POST"   Url="/tournament/:id/competition/all"  Call="Dance.Web.JsonAdmin:SaveAllCompetitions"/>

<!-- DELETE BY ID (Hide from table), Competition -->
<Route Method="DELETE" Url="/tournament/competition/:id" Call="Dance.Web.JsonAdmin:DeactivateCompetition"/>

<!-- -->
<Route Method="GET" Url="/tournament/:id/competition/importlink" Call="Dance.Web.JsonAdmin:GetImportLinkForTournamentCompetitions"/>


<!-- ========================================================================================================= -->
<!-- Participant                                                                                   Participant -->
<!-- ========================================================================================================= -->

<!-- DELETE BY ID (Hide from table), Participant -->
<Route Method="DELETE" Url="/participant/:id" Call="Dance.Web.JsonAdmin:DeactivateParticipant"/>



<!-- ========================================================================================================= -->
<!-- Import                                                                                             Import -->
<!-- ========================================================================================================= -->

<!-- GET BY ID, Tournament -->
<Route Method="GET" Url="/tournament/:id"   Call="Dance.Web.JsonUser:GetTournamentById"/>

<!-- GET ALL [GRID], Tournament Import -->
<Route Method="POST" Url="/import/tournament/grid" Call="Dance.Web.JsonAdmin:GetImportedTournamentsForGrid"/>

<!-- GET ALL [GRID], Competition Import -->
<Route Method="POST" Url="/import/competition/grid" Call="Dance.Web.JsonAdmin:GetImportedCompetitionsForGrid"/>


<!-- Check access, authorization call, if needed -->
<Route Method="GET" Url="/checkAdmin/:isLogin" Call="Dance.Web.JsonAdmin:CheckAdmin"/>

<Route Method="GET" Url="/recorder/tournament/:id" Call="Dance.Web.JsonAdmin:GetRecordersHashesForTournament"/>


<!-- Report file - all tournament participants -->
<Route Method="GET" Url="/report/:lang/tournament/:trnId/participant" Call="Dance.Web.ReportTournamentParticipants:GetFile"/>

<!-- Report file - all tournament payers -->
<Route Method="GET" Url="/report/:lang/tournament/:trnId/payer" Call="Dance.Web.ReportTournamentPayers:GetFile"/>

<!-- All currencies -->
<Route Method="GET" Url="/currency" Call="Dance.Web.JsonAdmin:GetCurrencies"/>

<!-- All payment systems -->
<Route Method="GET" Url="/paymentsystem" Call="Dance.Web.JsonAdmin:GetPaymentSystems"/>
</Routes>
]]></Data>
</XData>
</Class>


<Class name="Dance.Web.BrokerBase">
<Super>%CSP.REST</Super>
<TimeCreated>63289,63449.225817</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Parameter UseSession As Integer = 1;

]]></Content>
</UDLText>

<Method name="DispatchRequest">
<Description>
Dispatch a REST request according to URL and Method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUrl:%String,pMethod:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set lang = $CASE(%request.CgiEnvs("HTTP_ACCEPT_LANGUAGE"), 
    "en":"en", 
    "de":"de",
    "it":"it", 
    :"ru")
    
    do ##class(%MessageDictionary).SetSessionLanguage(lang)
    set %session.Language = lang
    
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tMatcher As %Regex.Matcher
    
    #dim tArgs,tClass,tMatchUrl,tMapEntry,tRegEx,tTarget,tAccess As %String
    #dim tI,tIndex As %Integer
    #dim tResourceMatched As %Boolean
    #dim tMethodMatched As %Boolean
    
    Try {
        #; Check that the effective user ( could be unknown user ) can access this resource
        Set tAccess=$SYSTEM.Security.Check($Piece($zu(90,21,$namespace),"^",4))
        If tAccess'["READ,WRITE"
        {
            #; Don't want the session token
            Set %response.OutputSessionToken=0
            
            #; Set the Http Status
            Set %response.Status="401 Unauthorized"
        
            #; Write out the header
            Do %response.WriteHTTPHeader()
            
            #; Done
            Quit
        }
        
        Set (tResourceMatched,tMethodMatched)=0
        
        #; Walk the dispatch map in collation order of defintion
        For tIndex=1:1 {
            
            #; Get the next map entry
            Set tMapEntry=..DispatchMap(tIndex) If tMapEntry="" Quit
             
            #; Pick out the RegEx
            Set tRegEx=$List(tMapEntry,1)
            
            #; Create a matcher
            Set tMatcher=##class(%Regex.Matcher).%New(tRegEx)
        
            #; Extract the match url from the application name
            Set tMatchUrl="/"_$Extract(pUrl,$Length(%request.Application)+1,*)
            
            #; Test each regular expression in turn, extracting the arguments,
            #; dispatching to the named method  
            If tMatcher.Match(tMatchUrl) {
                
                #; We have matched the resource
                Set tResourceMatched=1
                
                #; Now check method name
                If pMethod'=$List(tMapEntry,2) Continue
                
                Set tTarget=$List(tMapEntry,3)
                
                #; We have matched a method
                Set tMethodMatched=1
                
                #; Got a match, marshall the arguments
                If tMatcher.GroupCount {
                    For tI=1:1:tMatcher.GroupCount Set tArgs(tI)=tMatcher.Group(tI)
                    Set tArgs=tI
                } else {
                    Set tArgs=0
                }
                
                #; Check for optional ClassName prefix
                Set tClass=$classname()
                If tTarget[":" Set tClass=$Piece(tTarget,":"),tTarget=$Piece(tTarget,":",2)
                
                #; Dispatch
                Set tSC=$zobjclassmethod(tClass,tTarget,tArgs...)
                If $$$ISERR(tSC) Do ..Http500(##class(%Exception.StatusException).CreateFromStatus(tSC))
                
                #; Don't want multiple matches
                Quit
            }
        }
        
        #; Didn't have a match for the resource, report not found
        If tResourceMatched=0 Set tSC=..Http404() Quit
        
        #; Had a match for resource but method not matched
        If tMethodMatched=0 Set tSC=..Http405() Quit
            
    } Catch (e) {
        
        #; Issue a '500'
        Do ..Http500(e)
    }
    
    If ..#UseSession=0 Set %session.EndSession=1
  
    Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Web.BrokerUser">
<Description>
Public REST URLs</Description>
<Super>Dance.Web.BrokerBase</Super>
<TimeCreated>63289,63491.819669</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>

<!-- ========================================================================================================= -->
<!-- Registration                                                                                 Registration -->
<!-- ========================================================================================================= -->
<Route Method="POST" Url="/registration/udsr" Call="Dance.Web.JsonUser:RegistrationUDSR"/>
<Route Method="POST" Url="/registration/wdsf" Call="Dance.Web.JsonUser:RegistrationWDSF"/>
<Route Method="POST" Url="/registration/other" Call="Dance.Web.JsonUser:RegistrationOTHER"/>



<!-- ========================================================================================================= -->
<!-- Tournament                                                                                     Tournament -->
<!-- ========================================================================================================= -->

<!-- GET BY ID, Tournament -->
<Route Method="GET" Url="/tournament/:id"   Call="Dance.Web.JsonUser:GetTournamentById"/>

<!-- GET YEARS, Tournament -->
<Route Method="GET" Url="/tournamentyears"   Call="Dance.Web.JsonUser:GetTournamentYears"/>

<!-- GET ALL [GRID], Tournament -->
<Route Method="POST" Url="/tournament/grid" Call="Dance.Web.JsonUser:GetTournamentsForGrid"/>

<!-- GET ALL, Tournament status -->
<Route Method="GET" Url="/tournamentStatus" Call="Dance.Web.JsonUser:GetTournamentStatuses"/>

<!-- GET ALL, Tournament rank -->
<Route Method="GET" Url="/tournamentRank" Call="Dance.Web.JsonUser:GetTournamentRanks"/>

<!-- GET BY YEAR, Tournament [Short Info]-->
<Route Method="GET" Url="/tournament/year/:year" Call="Dance.Web.JsonUser:GetTournamentsByYear"/>

<!-- ========================================================================================================= -->
<!-- Competition                                                                                   Competition -->
<!-- ========================================================================================================= -->


<!-- GET BY ID, Competition -->
<Route Method="GET"   Url="/tournament/competition/:id"      Call="Dance.Web.JsonUser:GetCompetitionById"/>

<!-- GET ALL,[GRID AVIALABLE FOR COUPLE] Available Competitions in Tournament -->
<Route Method="POST"  Url="/tournament/competition/grid/couple" Call="Dance.Web.JsonUser:GetAvailableCompetitionsForGrid"/>

<!-- GET Dates, All possible dates in Tournament -->
<Route Method="GET"  Url="/tournament/:id/competition/date" Call="Dance.Web.JsonUser:GetTournamentDates"/>

<!-- GET ALL,[GRID] Competitions in Tournament -->
<Route Method="POST"  Url="/tournament/competition/grid" Call="Dance.Web.JsonUser:GetTournamentCompetitionsForGrid"/>

<!-- GET Types, All competition types -->
<Route Method="GET"  Url="/competition/type" Call="Dance.Web.JsonUser:GetCompetitionTypes"/>


<!-- GET WDSF competitions by filter -->
<Route Method="GET" Url="/competitionwdsf/country/:countryId/date/:date" Call="Dance.Web.JsonUser:GetAvailableCompetitionsWDSFByFilter"/>


<!-- ========================================================================================================= -->
<!-- Participant                                                                                   Participant -->
<!-- ========================================================================================================= -->

<Route Method="POST" Url="/competition/participant/grid" Call="Dance.Web.JsonUser:GetCompetitionParticipantsForGrid"/>

<Route Method="POST" Url="/tournament/participant/grid" Call="Dance.Web.JsonUser:GetTournamentParticipantsForGrid"/>

<Route Method="GET" Url="/dancer/participant" Call="Dance.Web.JsonUser:GetAllDancerParticipants"/>

<Route Method="POST" Url="/participant/grid" Call="Dance.Web.JsonUser:GetAllParticipantsForGrid"/>


<!-- ========================================================================================================= -->
<!-- Couple                                                                                             Couple -->
<!-- ========================================================================================================= -->


<Route Method="GET" Url="/couple/:id" Call="Dance.Web.JsonUser:GetCoupleById"/>

<Route Method="GET" Url="/couple/udsr/man/:manNumber/woman/:womanNumber" Call="Dance.Web.JsonUser:GetCoupleUDSRByNumbers"/>

<Route Method="GET" Url="/couple/wdsf/man/:manNumber/woman/:womanNumber" Call="Dance.Web.JsonUser:GetCoupleWDSFByNumbers"/>

<Route Method="POST" Url="/couple/registration/existing" Call="Dance.Web.JsonCouple:RegistrationExistingCouple"/>

<Route Method="POST" Url="/couple/registration/new" Call="Dance.Web.JsonCouple:RegistrationNewCouple"/>

<!-- ========================================================================================================= -->
<!-- Person                                                                                             Person -->
<!-- ========================================================================================================= -->

<Route Method="GET" Url="/person/udsr/:number" Call="Dance.Web.JsonUser:GetPersonByUDSRNumber"/>
<Route Method="GET" Url="/person/wdsf/:number" Call="Dance.Web.JsonUser:GetPersonByWDSFNumber"/>


<!-- ========================================================================================================= -->
<!-- Other                                                                                               Other -->
<!-- ========================================================================================================= -->

<!-- GET ALL, Language -->
<Route Method="GET" Url="/language" Call="Dance.Web.JsonUser:GetLanguages"/>

<!-- GET ALL, Country -->
<Route Method="GET" Url="/country"  Call="Dance.Web.JsonUser:GetCountries"/>

<!-- GET ALL, Discipline -->
<Route Method="GET" Url="/discipline" Call="Dance.Web.JsonUser:GetDisciplines"/>

<!-- GET ALL, Dancer class -->
<Route Method="GET" Url="/dancerClass" Call="Dance.Web.JsonUser:GetDancerClasses"/>
    
<!-- GET ALL, Age category -->
<Route Method="GET" Url="/ageCategory" Call="Dance.Web.JsonUser:GetAgeCategories"/>

<Route Method="POST" Url="/feedback" Call="Dance.Web.JsonUser:CreateFeedBack"/>


<Route Method="GET" Url="/person/stats" Call="Dance.Web.JsonUser:GetPersonStatistics"/>
    
    
<!-- Count of participant competitions -->
<Route Method="GET" Url="/count/participant/competition" Call="Dance.Web.JsonUser:GetCountParticipantCompetitions"/>
    
    
<!-- Report. All participants -->   
<Route Method="GET" Url="/report/:lang/tournament/:trnId/code/:code/participant" Call="Dance.Web.ReportTournamentParticipants:GetFileByAccessCode"/>

<!-- Report. All participants -->
<Route Method="GET" Url="/report/:lang/tournament/:trnId/code/:code/payer" Call="Dance.Web.ReportTournamentPayers:GetFileByAccessCode"/>    

<!-- Get all competition regions -->
<Route Method="GET" Url="/competition/region" Call="Dance.Web.JsonUser:GetCompetitionRegions"/>    

</Routes>
]]></Data>
</XData>
</Class>


<Class name="Dance.Web.Event">
<Super>%CSP.SessionEvents</Super>
<TimeCreated>63505,39307.789194</TimeCreated>

<Method name="OnStartSession">
<Description><![CDATA[
Called when a new session is created and its values are initialised.
<p>This is called before the license for this session is allocated, and if
you wish to abort this session and return the standard out of licenses error
page then:
<example>
Set %session.EndSession=1
</example>]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	try { s x=$system.License.PublicWebAppUser() } catch { /* log error */ }
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Web.ImportPerson">
<Super>%CSP.Page</Super>
<TimeCreated>63331,43978.703959</TimeCreated>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<<html><head></head><body style='font-family: Helvetica,Arial,sans-serif; font-size: 14px; line-height: 20px; color: #333; margin: 0;'>>
	
	set result = ##class(%ZEN.proxyObject).%New()
	set result.success = 0
	set result.errorMessages = ##class(%ListOfObjects).%New()
	set line = ""
	try{
		set fileName = %request.MimeData("FileStream", 1).FileName
		set stream = %request.MimeData("FileStream", 1)
	
		set gender = "Male"
		
		if ($FIND(fileName, "female") '= 0) || ($FIND(fileName, "girl") '= 0) || ($FIND(fileName, "woman") '= 0){
			set gender = "Female"
		}
		
		set newStream = ##class(%CSP.CharacterStream).%New()
		
		while 'stream.AtEnd {
			set line = $REPLACE(stream.ReadLine(), $C(10), $C(13)_$C(10))
			set line = $ZCVT(line, "I", "CP1251")
			do newStream.Write(line)
		}
		kill stream
		
		while 'newStream.AtEnd {
			set line = newStream.ReadLine()
			
			if ($FIND(line,";") = 0) continue
			
			set st = ##class(Dance.Data.PersonUDSR).UpdateFromString(line, gender)
			if $$$ISOK(st){
				set result.success = result.success + 1
			}
			else{
				set error = ##class(%ZEN.proxyObject).%New()
				set error.status = $system.Status.GetErrorText(st)
				set error.line = line
				do result.errorMessages.Insert(error)
			}
		}
		
		w "<p style='margin: 0 0 10px 0;'><strong>Результат импорта данных</strong></p>"
		w "<p style='margin: 0 0 10px 0;'>Всего записей в файле: "_(result.success + result.errorMessages.Count())_"</p>"
		w "<p style='margin: 0 0 10px 0;'>Ипортировано: "_(result.success)_"</p>"
		w "<p style='margin: 0 0 10px 0;'>Не импортировано: "_(result.errorMessages.Count())_"</p>"
		
		if (result.errorMessages.Count() '= 0){
			w "<br><br>Список ошибочных записей: "
			for i=1:1:result.errorMessages.Count(){
				w "<br>"_i_". "_result.errorMessages.GetAt(i).line
				w "<br>"_result.errorMessages.GetAt(i).status
				w "<br>"
			}
		}
		
		set ^Settings("Dance","UDSRPersonsLastUpdated") = $ZDT($ZTS, 3)
	}catch(ex){
		set st = ex.AsStatus()	
	}
	
	if $$$ISERR(st){
		w line_"<br>"
		w $SYSTEM.Status.GetErrorText(st)
	}
	
	&html<</body></html>>
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Web.JsonAdmin">
<Super>Dance.Web.JsonBase</Super>
<TimeCreated>63437,5355.000325</TimeCreated>

<Method name="SaveTournament">
<Description>
====================================================================================================================
Tournament                                                                                                Tournament
====================================================================================================================

Create or Update object</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        $$$THROWONERROR(st, ##class(Dance.Data.Tournament).CheckUpdatePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.data, 1))
        
        do ##class(Dance.Data.Tournament).Save(data, .st)
        if $$$ISERR(st) $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("error_TournamentSave"," | "_st))
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
            
    quit st
]]></Implementation>
</Method>

<Method name="DeactivateTournament">
<Description>
Change IsActive property to 0. (hide item from table)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        $$$THROWONERROR(st, ##class(Dance.Data.Tournament).CheckUpdatePrivilege())
        
        set st = ##class(Dance.Data.Tournament).Deactivate(id)
        if $$$ISERR(st) $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("error_TournamentDeactivate"," | "_st))
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
            
    quit st
]]></Implementation>
</Method>

<Method name="SaveCompetition">
<Description>
====================================================================================================================
Competition                                                                                              Competition
====================================================================================================================

Create or Update object</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        $$$THROWONERROR(st, ##class(Dance.Data.Tournament).CheckUpdatePrivilege())
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.data, 1))
        
        set data.tournamentId = tournamentId
        do ##class(Dance.Data.Competition).Save(data,.st)
        if $$$ERROR(st) do ##class(Dance.Utils.Msg).GetErrorStatus("error_CompetitionSave"," | "_st)
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
            
    quit st
]]></Implementation>
</Method>

<Method name="SaveAllCompetitions">
<Description>
Create or Update object</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{    
        $$$THROWONERROR(st, ##class(Dance.Data.Tournament).CheckUpdatePrivilege())
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.data, 1))
        
        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.info = ##class(%ZEN.proxyObject).%New()
        set proxy.info.success = 0
        set proxy.info.errors = 0
        set proxy.info.errorMessages = ##class(%ListOfDataTypes).%New()
        
        for i=1:1:data.Count(){
            TSTART
            set item = data.GetAt(i)    
            set item.tournamentId = tournamentId
            do ##class(Dance.Data.Competition).Save(item,.st)
            if $$$ISERR(st) {
                TROLLBACK
                set st = ##class(Dance.Utils.Msg).GetErrorStatus("error_CompetitionSave"," | "_st)
                set proxy.info.errors = proxy.info.errors + 1
                do proxy.info.errorMessages.Insert(st)
            }
            else{
                TCOMMIT
                set proxy.info.success = proxy.info.success + 1
            }
        }
        
        do proxy.%ToJSON()
    }
    catch ex {
        if ($TLEVEL '= 0) TROLLBACK
        set st = ex.AsStatus()
    }
    
    if $$$ISOK(st){
        do ##class(Dance.Data.Tournament).UpdateAllTournaments()
    }  
         
    quit st
]]></Implementation>
</Method>

<Method name="DeactivateCompetition">
<Description>
Change IsActive property to 0. (hide item from table)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        $$$THROWONERROR(st, ##class(Dance.Data.Tournament).CheckUpdatePrivilege())
        
        set st = ##class(Dance.Data.Competition).Deactivate(id)
        if $$$ISERR(st) $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("error_CompetitionDeactivate"," | "_st))
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
            
    quit st
]]></Implementation>
</Method>

<Method name="DeactivateParticipant">
<Description>
====================================================================================================================
Participant                                                                                              Participant
====================================================================================================================

Change IsActive property to 0. (hide item from table)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        $$$THROWONERROR(st, ##class(Dance.Data.Tournament).CheckUpdatePrivilege())
        
        set st = ##class(Dance.Data.Participant).Deactivate(id)
        if $$$ISERR(st) $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("error_ParticipantDeactivate"," | "_st))
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
            
    quit st
]]></Implementation>
</Method>

<Method name="GetImportedTournamentsForGrid">
<Description>
====================================================================================================================
Import                                                                                                        Import
====================================================================================================================

 </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        
        $$$THROWONERROR(st, ##class(Dance.Data.Tournament).CheckUpdatePrivilege())
    
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
        
        if (params.other.isFirstLoad = $$$YES){
            $$$THROWONERROR(st, ##class(Dance.Data.Import.ImportDanceplat).Import("Dance.Data.Import.TournamentDanceplat", $G(^Settings("Dance", "ImportDanceplat", "TournamentsPage"))))
        }
            
        set whereCondition = ""
        
        do ..GetProxyObjectsForGrid("SELECT ID FROM Dance_Data_Import.TournamentDanceplat", "Dance.Data.Import.TournamentDanceplat", params,"", whereCondition).%ToJSON()
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="GetImportedCompetitionsForGrid">
<Description>
Write objects to device, page by page for grid. </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        
        $$$THROWONERROR(st, ##class(Dance.Data.Tournament).CheckUpdatePrivilege())
    
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
        
        set tournament = ##class(Dance.Data.Tournament).%OpenId(params.other.tournamentId)
        
        if (params.other.isFirstLoad = $$$YES){
            set page = $G(^Settings("Dance", "ImportDanceplat", "CompetitionsPage"))_"?trn="_tournament.IdInternal_"&hash="_tournament.Hash_"&all=1"
            $$$THROWONERROR(st, ##class(Dance.Data.Import.ImportDanceplat).Import("Dance.Data.Import.CompetitionDanceplat", page))
        }
            
        set whereCondition = "TournamentIdExternal = "_tournament.IdExternal
        
        do ..GetProxyObjectsForGrid("SELECT ID FROM Dance_Data_Import.CompetitionDanceplat", "Dance.Data.Import.CompetitionDanceplat", params, "", whereCondition).%ToJSON()
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="GetImportLinkForTournamentCompetitions">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set tournament = ##class(Dance.Data.Tournament).%OpenId(trnId)
    
    set proxy = ##class(%ZEN.proxyObject).%New()
    
    if $$$ISOK(##class(Dance.Data.Tournament).CheckUpdatePrivilege()){  
        set proxy.link = $G(^Settings("Dance", "ImportDanceplat", "Server"))_"/"_$G(^Settings("Dance", "ImportDanceplat", "CompetitionsPage"))_"?trn="_tournament.IdInternal_"&hash="_tournament.Hash_"&all=1"
    }
    
    do proxy.%ToJSON()
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetRecordersHashesForTournament">
<Description>
Get recorders</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set trn = ##class(Dance.Data.Tournament).%OpenId(trnId)
    
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.recorders = ##class(%ListOfObjects).%New()
    
    &sql(DECLARE CRRec CURSOR FOR 
            SELECT ID
            FROM Dance_Data.Recorder
            ORDER BY Name)  
        
    &sql(OPEN CRRec)
    for  
    {   
        &sql(FETCH CRRec INTO :id) 
        quit:(SQLCODE '= 0)
        
        set recObj = ##class(Dance.Data.Recorder).%OpenId(id)
        
        set rec = ##class(%ZEN.proxyObject).%New()  
        set rec.name = recObj.Name
        set rec.hash = ##class(Dance.Data.Recorder).GetAccessHashForTournament(trn, recObj)
        
        do proxy.recorders.Insert(rec)  
    }
    
    &sql(CLOSE CRRec)
    
    do proxy.%ToJSON()
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="CheckAdmin">
<Description>
Check access, authorization call, if needed</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>isLogin:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    if (isLogin = 1){
        if (##class(Dance.Data.Tournament).CheckDeletePrivilege() = $$$OK){
            w "{""privileges"":""all""}"
        }
        else{
            w "{""privileges"":""read""}"
        }
        q $$$OK
    }

    #; Don't want the session token
    Set %response.OutputSessionToken=0
            
    #; Set the Http Status
    Set %response.Status="401 Unauthorized"
        
    #; Write out the header
    Do %response.WriteHTTPHeader()
            
    Set %session.EndSession=1

    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetCurrencies">
<Description>
All currencies
Method="GET" Url="/currency"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..WriteJsonFromSql("SELECT ID As id, Name->Value As name, Code as code FROM Dance_Data.Currency")
]]></Implementation>
</Method>

<Method name="GetPaymentSystems">
<Description>
All payment systems
Method="GET" Url="/paymentsystem"</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..WriteJsonFromSql("SELECT ID As id, Name As name, Code as code, UDSRUrl as udsrUrl, WDSFUrl As wdsfUrl FROM Dance_Data.PaymentSystem")
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Web.JsonBase">
<Abstract>1</Abstract>
<TimeCreated>63289,63229.669243</TimeCreated>

<Method name="GetProxyObject">
<Description>
Get proxyObject by id and class</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String,id:%String,params:%ZEN.proxyObject</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    
    try{
        set object = $CLASSMETHOD(className, "%OpenId", id)
        set proxy = object.ConvertToProxyObject(params)
    }
    catch (ex){
        set proxy.error = $SYSTEM.Status.GetErrorText(ex.AsStatus())
    }
    
    quit proxy
]]></Implementation>
</Method>

<Method name="WriteJsonFromSql">
<Description>
Transform sql to json</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>sql:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
    
    try{
        do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql)
    }
    catch ex{
        set status = ex.AsStatus()
    }
    
    quit status
]]></Implementation>
</Method>

<Method name="GetProxyObjectsForGrid">
<Description>
Paged output of table, for any class with parameters, sorting and searching</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>sql:%String,className:%String,params:%RegisteredObject,convertParams:%ZEN.proxyObject,whereRequired:%String="",groupCondition:%String=""</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
    set proxyResult = ##class(%ZEN.proxyObject).%New()
    
    try{
        // Определяем что находится в WHERE.
        if (whereRequired = "") && (params.searchText '= ""){
            // Одно условие - поиск
            //set sql = sql_" WHERE "_..ParseParameter(params.searchSqlName)_" LIKE '%"_..ParseParameter(params.searchText)_"%'"
            set sql = sql_" WHERE "_..GetSearchCondition(params.searchSqlName, ..ParseParameter(params.searchText))
        }
        elseif (whereRequired '= "") && (params.searchText = ""){
            // Одно условие - заданное, например - выборка по статусу
            set sql = sql_" WHERE "_whereRequired
        }
        elseif (whereRequired '= "") && (params.searchText '= ""){
            // Два(+) условия = поиск и дополнительные
            //set sql = sql_" WHERE "_whereRequired_" AND "_..ParseParameter(params.searchSqlName)_" LIKE '%"_..ParseParameter(params.searchText)_"%'"
            set sql = sql_" WHERE "_whereRequired_" AND "_..GetSearchCondition(params.searchSqlName, ..ParseParameter(params.searchText))
        }
        
        // Сортировка
        set isDown = "ASC"
        if (params.isDown '= 1) set isDown = "DESC"
        
        set sql = sql_" "_groupCondition_" ORDER BY "_..ParseParameter(params.sqlName)_" "_isDown
        
            
        set statement = ##class(%SQL.Statement).%New()  
        $$$THROWONERROR(status, statement.%Prepare(sql))        
        set rs = statement.%Execute()

        set proxyItems = ##class(%ListOfObjects).%New()         
        set ^temp = sql
        // Все элементы, попавшие в заданный диапазон конвертируются в proxy и помещаются в результирующий список
        while (rs.%Next() '= 0){
            if (rs.%ROWCOUNT >= params.first) && (rs.%ROWCOUNT <= params.last){
                do proxyItems.Insert(..GetProxyObject(className, rs.%GetData(1), convertParams))
            }
        }
        // Общее число элементов с заданными параметрами в WHERE
        set itemsTotal = rs.%ROWCOUNT
        
        do rs.%Close()                      
        do statement.%Close()
        
        set proxyResult = ##class(%ZEN.proxyObject).%New()
        set proxyResult.children = ##class(%ZEN.proxyObject).%New()
        set proxyResult.children.items = proxyItems
        set proxyResult.children.itemsTotal = itemsTotal
    }
    catch ex {
        set proxyResult.status = $SYSTEM.Status.GetErrorText(ex.AsStatus()) 
    }
    
    quit proxyResult
]]></Implementation>
</Method>

<Method name="ParseParameter">
<Description>
Delete "garbage" from input parameters</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>parameter:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set parameter = $ZCONVERT(parameter, "U")
    
    quit $REPLACE(
         $REPLACE(
         $REPLACE(
         $REPLACE(
         $REPLACE(
         $REPLACE(parameter, "SELECT",""), "DELETE", ""), "UNION", ""), "FROM",""), "INSERT", ""), "'", "")
]]></Implementation>
</Method>

<Method name="GetSearchCondition">
<ClassMethod>1</ClassMethod>
<FormalSpec>fields:%String,word:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set result = ""
    set listOfFields = $LISTFROMSTRING(fields, ",")
    
    for i=1:1:$LL(listOfFields){
        set result = result_$LIST(listOfFields, i)_" LIKE '%"_word_"%' OR "
    }
    
    quit "("_$E(result, 1, *-4)_")"
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Web.JsonUser">
<Super>Dance.Web.JsonBase</Super>
<TimeCreated>63436,73778.660914</TimeCreated>

<Method name="RegistrationUDSR">
<Description>

====================================================================================================================
Registration                                                                                            Registration
====================================================================================================================

Registration UDSR participants in the tournament</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>data=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set isHTTP = data = ""
    set st = $$$OK
    
    set currentTournamentId = ""
    
    set regResults = ##class(%ListOfObjects).%New()
    set proxy = ##class(%ZEN.proxyObject).%New()
    
    try{
        if (isHTTP){
            set content = $ZCVT(%request.Content.Read(10000000), "I", "UTF8")
            $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(content,,.data, 1))
            
            do ##class(Dance.Utils.Journal).Create("Log", "JsonUser.RegistrationUDSR", content)
        }
        
        TSTART
        
        
        set prt = ##class(%ZEN.proxyObject).%New()
        set prtClass = ""
        
        set dancers = ##class(%ListOfObjects).%New()
         
        if $ISOBJECT(data.couple){
            set prt = data.couple
            set prtClass = "Dance.Data.ParticipantCoupleUDSR"
            do dancers.Insert(data.couple.man)
            do dancers.Insert(data.couple.woman)
        }
        elseif $ISOBJECT(data.athlete){
            set prt = data.athlete
            set prtClass = "Dance.Data.ParticipantSingleUDSR"
            do dancers.Insert(data.athlete)
        }
            
        for i=1:1:data.competitions.Count(){
            set competition = ##class(Dance.Data.Competition).%OpenId(data.competitions.GetAt(i))
            
            set regResult = ##class(%ZEN.proxyObject).%New()
            set regResult.competition = competition.ConvertToProxyObject(##class(%ZEN.proxyObject).%New())
            set regResult.otherInfo = ##class(%ZEN.proxyObject).%New()
            
            set currentTournamentId = competition.Tournament.%Id()   
            if (competition.Tournament.TStatus.Code '= "Registration") {
                set regResult.status = 0
                set regResult.message = ##class(Dance.Utils.Msg).GetMsg("error_RegistrationClosed")
                do regResults.Insert(regResult)
                continue
            }
            
            
            // Find recorder by access hash
            #dim recorder As Dance.Data.Recorder = ##class(Dance.Data.Recorder).GetByAccessHashForTournament(competition.Tournament, data.recorderHash) 
            if '$ISOBJECT(recorder) {
                set regResult.status = 0
                set regResult.message = ##class(Dance.Utils.Msg).GetMsg("error_Recorder_AccessDenied")
                do regResults.Insert(regResult)
                continue
            }
        
            set isCmpConflict = $$$NO
            for d=1:1:dancers.Count(){
                set cmpListConflict = ##class(Dance.Data.Person).GetConflictCompetitions(dancers.GetAt(d).id, competition.%Id(), .st)
                if (cmpListConflict.Count() > 0){
                    set regResult.status = 0
                    set regResult.message = ##class(Dance.Utils.Msg).GetMsg("error_ConflictCompetitionIsFound")
                    set regResult.otherInfo.conflictCompetitions = cmpListConflict
                    set regResult.otherInfo.athlete = ##class(Dance.Data.Person).%OpenId(dancers.GetAt(d).id).ConvertToProxyObject()
                    set isCmpConflict = $$$YES
                }
            }
            
            if (isCmpConflict = $$$NO) {            
                set participant = $CLASSMETHOD(prtClass, "Create", recorder, competition, prt, .st)
                
                if $$$ISERR(st) {
                    set regResult.status = 0
                    set regResult.message = ##class(Dance.Utils.Msg).GetMsg("error_ParticipantNotCreated")_" "_$SYSTEM.Status.GetErrorText(st)
                }
                else{
                    set regResult.status = $$$OK
                }
            }
            
            do regResults.Insert(regResult)
        }
    
        TCOMMIT
        
        set proxy.results = regResults
    }
    catch ex {
        TROLLBACK 
        
        if (isHTTP){
            set %response.Status = 400
        }
        
        set proxy.status = 0
        set proxy.message = ##class(Dance.Utils.Msg).GetMsg("error_FatalError")_" "_$SYSTEM.Status.GetErrorText(ex.AsStatus())      
    }
    
    if (proxy.status '= 0){
        do ##class(Dance.Data.Tournament).UpdateTournament(currentTournamentId)
    }
    
    quit proxy.%ToJSON()
]]></Implementation>
</Method>

<Method name="RegistrationWDSF">
<Description>
Registration WDSF participants in the tournament</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>data=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set isHTTP = data = ""
    
    set st = $$$OK
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.status = $$$OK
    
    
    set currentTournamentId = ""
    set regResults = ##class(%ListOfObjects).%New()
    
    try{
        if (isHTTP) {
            set content = $ZCVT(%request.Content.Read(10000000), "I", "UTF8")        
            $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(content,,.data, 1))
            
            do ##class(Dance.Utils.Journal).Create("Log", "JsonUser.RegistrationWDSF", content)
        }

        TSTART

        set prt = ##class(%ZEN.proxyObject).%New()
        
        // Data for sending to controller
        set wcPostData = ##class(%ZEN.proxyObject).%New()
        set wcPostData.competitions = ##class(%ListOfDataTypes).%New()
        
        set prt = ##class(%ZEN.proxyObject).%New()
        set prtClass = ""
        
        if $ISOBJECT(data.couple){
            set prtClass = "Dance.Data.ParticipantCoupleWDSF"
            set prt = data.couple
            set couplerWDSF = ##class(Dance.Data.CoupleWDSF).GetByNumbers(prt.man.number, prt.woman.number)
            if (couplerWDSF.CStatus '= "Active"){
                $$$ThrowStatus($SYSTEM.Status.Error(5001, "WDSF Couple status is "_couplerWDSF.CStatus_"!"))
            }
            
            set wcPostData.manNumber = prt.man.number
            set wcPostData.womanNumber = prt.woman.number
        }
        elseif $ISOBJECT(data.athlete){
            set prtClass = "Dance.Data.ParticipantSingleWDSF"
            set prt = data.athlete
            // It does not matter what gender. Controller will understand.
            set wcPostData.manNumber = prt.number
        }
        
        set convertParams = ##class(%ZEN.proxyObject).%New()
        set convertParams.loadWDSF = $$$YES
        
        // Registration in our system
        for i=1:1:data.competitions.Count(){
            set competition = ##class(Dance.Data.Competition).%OpenId(data.competitions.GetAt(i))
        
            set regResult = ##class(%ZEN.proxyObject).%New()
            set regResult.competition = competition.ConvertToProxyObject(convertParams)
            
            set currentTournamentId = competition.Tournament.%Id()   
            if (competition.Tournament.TStatus.Code '= "Registration"){
                set regResult.status = 0 
                set regResult.message = ##class(Dance.Utils.Msg).GetMsg("error_RegistrationClosed")
                do regResults.Insert(regResult)
                continue
            }
    
            // Find recorder by access hash
            #dim recorder As Dance.Data.Recorder = ##class(Dance.Data.Recorder).GetByAccessHashForTournament(competition.Tournament, data.recorderHash) 
            if '$ISOBJECT(recorder) {
                set regResult.status = 0
                set regResult.message = ##class(Dance.Utils.Msg).GetMsg("error_Recorder_AccessDenied")
                do regResults.Insert(regResult)
                continue
            }
                    
            #dim participant As Dance.Data.Participant = $CLASSMETHOD(prtClass, "Create", recorder, competition, prt, .st)
                
            if $$$ISERR(st){
                set regResult.status = 0
                set regResult.message = ##class(Dance.Utils.Msg).GetMsg("error_ParticipantNotCreated")_" "_$SYSTEM.Status.GetErrorText(st)
            }
            else{
                set regResult.status = $$$OK
                set regResult.participantId = participant.%Id()
                
                if $ISOBJECT(competition.WDSF){
                    do wcPostData.competitions.Insert(competition.WDSF.%Id())
                }
            }
            
            do regResults.Insert(regResult)
        }
        
        // Not removed! This is string fix a bug! Bug - empty response.
        w ""
        
        // Registration in the wdsf controller
        if (wcPostData.competitions.Count() > 0){
            set wcResponseData = ##class(Dance.Wdsf.ControllerAPI).Registration(wcPostData, recorder, .st)
            
            if $$$ISERR(st){
                if ($ISOBJECT(wcResponseData) && (wcResponseData.status '= $$$OK)) || '$ISOBJECT(wcResponseData){
                    set proxy.errorDetails = wcResponseData
                    $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("error_ConnectionWDSFControllerFailed", "| "_$SYSTEM.Status.GetErrorText(st)))
                }
            }  
            
            for i=1:1:wcResponseData.results.Count(){
                set wcRequest = wcResponseData.results.GetAt(i).request
                set wcResponse = wcResponseData.results.GetAt(i).response
                
                set regResult = ##class(%ZEN.proxyObject).%New()
                for r=1:1:regResults.Count(){
                    if (regResults.GetAt(r).competition.wdsf.id = wcRequest.competitionId){
                        set regResult = regResults.GetAt(r)
                        quit
                    }
                }
                
                set regResult.otherInfo = wcResponse
                if (wcResponse.code < 2000){
                    set regResult.status = $$$OK
                }
                else{
                    set st = ##class(Dance.Data.Participant).%DeleteId(regResult.participantId)
                    if $$$ISERR(st){
                        do ##class(Dance.Data.Participant).Deactivate(regResult.participantId)
                    }
                    
                    set regResult.participantId = ""
                    set regResult.status = 0
                    set regResult.message = ##class(Dance.Utils.Msg).GetMsg("error_RegistrationInWDSFController")
                }       
            }
        }
     
        TCOMMIT
        
        set proxy.results = regResults
    }
    catch ex {
        TROLLBACK 
        set proxy.status = 0
        set proxy.message = ##class(Dance.Utils.Msg).GetMsg("error_FatalError")_" "_$SYSTEM.Status.GetErrorText(ex.AsStatus())      
    }
    
    if (proxy.status '= 0){
        do ##class(Dance.Data.Tournament).UpdateTournament(currentTournamentId)
    }
    
    quit proxy.%ToJSON()
]]></Implementation>
</Method>

<Method name="RegistrationOTHER">
<Description>
Registration OTHER participants in the tournament</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    set regResults = ##class(%ListOfObjects).%New()
    set proxy = ##class(%ZEN.proxyObject).%New()
    
    set currentTournamentId = ""   
    
    try{
        set content = $ZCVT(%request.Content.Read(10000000), "I", "UTF8")
        do ##class(Dance.Utils.Journal).Create("Log", "JsonUser.RegistrationOTHER", content)
        
        TSTART

        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(content,,.data, 1))

        set prt = ##class(%ZEN.proxyObject).%New()
        set prtClass = ""
        
        if $ISOBJECT(data.couple){
            set prt = data.couple
            set prtClass = "Dance.Data.ParticipantCoupleOther"
        }
        elseif $ISOBJECT(data.athlete){
            set prt = data.athlete
            set prtClass = "Dance.Data.ParticipantSingleOther"
        }
            
        set convertParams = ##class(%ZEN.proxyObject).%New()    
        for i=1:1:data.competitions.Count(){
            set competition = ##class(Dance.Data.Competition).%OpenId(data.competitions.GetAt(i))
            
            set regResult = ##class(%ZEN.proxyObject).%New()
            set regResult.competition = competition.ConvertToProxyObject(convertParams)
            set regResult.participant = ##class(%ZEN.proxyObject).%New()
            set regResult.otherInfo = ##class(%ZEN.proxyObject).%New()
            
            set currentTournamentId = competition.Tournament.%Id()       
            if (competition.Tournament.TStatus.Code '= "Registration") {
                set regResult.status = 0
                set regResult.message = ##class(Dance.Utils.Msg).GetMsg("error_RegistrationClosed")
                do regResults.Insert(regResult)
                continue
            }
            
            // Find recorder by access hash
            #dim recorder As Dance.Data.Recorder = ##class(Dance.Data.Recorder).GetByAccessHashForTournament(competition.Tournament, data.recorderHash) 
            if '$ISOBJECT(recorder) {
                set regResult.status = 0
                set regResult.message = ##class(Dance.Utils.Msg).GetMsg("error_Recorder_AccessDenied")
                do regResults.Insert(regResult)
                continue
            }
                
            set participant = $CLASSMETHOD(prtClass, "Create", recorder, competition, prt, .st)
            if $$$ISERR(st) {
                set regResult.status = 0
                set regResult.message = ##class(Dance.Utils.Msg).GetMsg("error_ParticipantNotCreated")_" "_$SYSTEM.Status.GetErrorText(st)
            }
            else{
                set regResult.status = $$$OK
            }
            
            do regResults.Insert(regResult)
        }
          
        TCOMMIT
        
        set proxy.results = regResults
    }
    catch ex {
        TROLLBACK 
        set %response.Status = 400
        set proxy.status = 0
        set proxy.message = ##class(Dance.Utils.Msg).GetMsg("error_FatalError")_" "_$SYSTEM.Status.GetErrorText(ex.AsStatus())      
    }
    
    if (proxy.status '= 0){
        do ##class(Dance.Data.Tournament).UpdateTournament(currentTournamentId)
    }
    
    quit proxy.%ToJSON()
]]></Implementation>
</Method>

<Method name="GetTournamentById">
<Description>

====================================================================================================================
Tournament                                                                                                Tournament
====================================================================================================================

Get one tournament by Id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set convertParams = ##class(%ZEN.proxyObject).%New()
    set convertParams.loadName = $GET(%request.Data("loadName", 1), $$$NO) = $$$YES
    set convertParams.loadFullName = $GET(%request.Data("loadFullName", 1), $$$NO) = $$$YES
    set convertParams.loadStatus = $GET(%request.Data("loadStatus", 1), $$$NO) = $$$YES
    set convertParams.loadRank = $GET(%request.Data("loadRank", 1), $$$NO) = $$$YES
    set convertParams.loadLocation = $GET(%request.Data("loadLocation", 1), $$$NO) = $$$YES
    set convertParams.loadUrls = $GET(%request.Data("loadUrls", 1), $$$NO) = $$$YES
    set convertParams.loadOrganizer = $GET(%request.Data("loadOrganizer", 1), $$$NO) = $$$YES
    set convertParams.loadCompetitionsCount = $GET(%request.Data("loadCompetitionsCount", 1), $$$NO) = $$$YES
    set convertParams.loadParticipantsCount = $GET(%request.Data("loadParticipantsCount", 1), $$$NO) = $$$YES
    set convertParams.loadParticipantsUniqueCount = $GET(%request.Data("loadParticipantsUniqueCount", 1), $$$NO) = $$$YES
    set convertParams.loadPaymentsCount = $GET(%request.Data("loadPaymentsCount", 1), $$$NO) = $$$YES
    
    quit ..GetProxyObject("Dance.Data.Tournament", id, convertParams).%ToJSON()
]]></Implementation>
</Method>

<Method name="GetTournamentsByYear">
<Description>
Get tournament by year for combobox</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>year:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.children = ##class(%ListOfObjects).%New()
    
    &sql(DECLARE CursTrnYear CURSOR FOR 
         SELECT %NOLOCK ID, Name->Value, Country->Name->Value, City->Value
         FROM Dance_Data.Tournament
         WHERE IsActive = 1 AND DATEPART('year', StartDate) = :year 
         ORDER BY StartDate DESC)   
        
    &sql(OPEN CursTrnYear)
    for  
    {   
        &sql(FETCH CursTrnYear INTO :id, :name, :country, :city) 
        quit:(SQLCODE '= 0)
        
        set obj = ##class(%ZEN.proxyObject).%New()
        set obj.id = id
        set obj.name = name
        set obj.countryName = country
        set obj.cityName = city 
        do proxy.children.Insert(obj)           
    }
    
    &sql(CLOSE CursTrnYear)
    
    do proxy.%ToJSON()
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetTournamentsForGrid">
<Description>
Get all tournaments for grid</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
        
        set whereCondition = "IsActive = 1"
        
        // filters
        if (params.other.rankId '= "") && (params.other.statusId = ""){
            set whereCondition = whereCondition_" AND TRank="_..ParseParameter(params.other.rankId)
        }
        elseif (params.other.rankId = "") && (params.other.statusId '= ""){
            set whereCondition = whereCondition_" AND TStatus="_..ParseParameter(params.other.statusId)
        }
        elseif (params.other.rankId '= "") && (params.other.statusId '= ""){
            set whereCondition = whereCondition_" AND TRank="_..ParseParameter(params.other.rankId)_" AND TStatus="_..ParseParameter(params.other.statusId)
        }
        
        set convertParams = ##class(%ZEN.proxyObject).%New()
        set convertParams.loadName = $$$YES
        set convertParams.loadRank = $$$YES
        set convertParams.loadStatus = $$$YES
        set convertParams.loadLocation = $$$YES
        set convertParams.loadOrganizer = $$$YES
        set convertParams.loadUrls = $$$YES
        set convertParams.loadCompetitionsCount = $$$YES
        set convertParams.loadParticipantsCount = $$$YES
        
        do ..GetProxyObjectsForGrid("SELECT %NOLOCK ID FROM Dance_Data.Tournament", "Dance.Data.Tournament", params, convertParams, whereCondition).%ToJSON()
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="GetTournamentYears">
<Description>
Get all years of the tournaments for combobox</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.children = ##class(%ListOfDataTypes).%New()
    
    &sql(DECLARE CursYear CURSOR FOR 
            SELECT %NOLOCK DISTINCT DATEPART('year', StartDate) As Year
            FROM Dance_Data.Tournament
            WHERE IsActive = 1
            ORDER BY Year)  
        
    &sql(OPEN CursYear)
    for  
    {   
        &sql(FETCH CursYear INTO :year) 
        quit:(SQLCODE '= 0)
        do proxy.children.Insert(year)  
    }
    
    &sql(CLOSE CursYear)
    
    do proxy.%ToJSON()
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetTournamentRanks">
<Description>
Get tournament ranks for combobox</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.children = ##class(%ListOfObjects).%New()
    
    &sql(DECLARE TRCurFirst CURSOR FOR 
            SELECT %NOLOCK ID, Name->Value
            FROM Dance_Data.TournamentRank
            ORDER BY Name->Value)   
        
    &sql(OPEN TRCurFirst)
    for  
    {   
        &sql(FETCH TRCurFirst INTO :id, :name) 
        quit:(SQLCODE '= 0)
        set rankProxy = ##class(%ZEN.proxyObject).%New()
        set rankProxy.id = id
        set rankProxy.name = name
        do proxy.children.Insert(rankProxy)
    }
    &sql(CLOSE TRCurFirst)
    
    do proxy.%ToJSON()
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetTournamentStatuses">
<Description>
Get tournament statuses for combobox</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.children = ##class(%ListOfObjects).%New()
    
    &sql(DECLARE CR1 CURSOR FOR 
            SELECT %NOLOCK ID, Name->Value, Code
            FROM Dance_Data.TournamentStatus
            ORDER BY Sequence)  
        
    &sql(OPEN CR1)
    for  
    {   
        &sql(FETCH CR1 INTO :id, :name, :code) 
        quit:(SQLCODE '= 0)
        
        set tstatus = ##class(%ZEN.proxyObject).%New()  
        set tstatus.id = id
        set tstatus.name = name
        set tstatus.code = code
        
        do proxy.children.Insert(tstatus)   
    }
    
    &sql(CLOSE CR1)
    
    do proxy.%ToJSON()
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetTournamentDates">
<Description>
Get tournament dates for combobox</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.children = ##class(%ListOfDataTypes).%New()
    
    &sql(DECLARE CRS1 CURSOR FOR 
            SELECT DISTINCT(StartDate)
            FROM Dance_Data.Competition
            WHERE IsActive = 1 AND Tournament = :tournamentId
            ORDER BY StartDate) 
        
    &sql(OPEN CRS1)
    for  
    {   
        &sql(FETCH CRS1 INTO :startDate) 
        quit:(SQLCODE '= 0)
        
        do proxy.children.Insert($ZDATE(startDate, 3))  
    }
    
    &sql(CLOSE CRS1)
    
    do proxy.%ToJSON()
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetCompetitionById">
<Description>
====================================================================================================================
Competition                                                                                              Competition
====================================================================================================================

Get one competition by id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>competitionId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set convertParams = ##class(%ZEN.proxyObject).%New()
    set convertParams.loadDiscipline = $GET(%request.Data("loadDiscipline", 1), $$$NO) = $$$YES
    set convertParams.loadAgeCategory = $GET(%request.Data("loadAgeCategory", 1), $$$NO) = $$$YES
    set convertParams.loadDancerClasses = $GET(%request.Data("loadDancerClasses", 1), $$$NO) = $$$YES
    set convertParams.loadType = $GET(%request.Data("loadType", 1), $$$NO) = $$$YES
    set convertParams.loadWDSF = $GET(%request.Data("loadWDSF", 1), $$$NO) = $$$YES
    set convertParams.loadTournament = $GET(%request.Data("loadTournament", 1), $$$NO) = $$$YES
    if (convertParams.loadTournament){
        set convertParams.tournamentParams = ##class(%ZEN.proxyObject).%New()
        set convertParams.tournamentParams.loadName = $GET(%request.Data("loadTournamentName", 1), $$$NO) = $$$YES
        set convertParams.tournamentParams.loadFullName = $GET(%request.Data("loadTournamentFullName", 1), $$$NO) = $$$YES
        set convertParams.tournamentParams.loadLocation = $GET(%request.Data("loadTournamentLocation", 1), $$$NO) = $$$YES
        set convertParams.tournamentParams.loadOrganizer = $GET(%request.Data("loadTournamentOrganizer", 1), $$$NO) = $$$YES
        set convertParams.tournamentParams.loadRank = $GET(%request.Data("loadTournamentRank", 1), $$$NO) = $$$YES
        set convertParams.tournamentParams.loadStatus = $GET(%request.Data("loadTournamentStatus", 1), $$$NO) = $$$YES
        set convertParams.tournamentParams.loadParticipantsCount = $GET(%request.Data("loadTournamentParticipantsCount", 1), $$$NO) = $$$YES
        set convertParams.tournamentParams.loadParticipantsUniqueCount = $GET(%request.Data("loadTournamentParticipantsUniqueCount", 1), $$$NO) = $$$YES
        set convertParams.tournamentParams.loadCompetitionsCount = $GET(%request.Data("loadTournamentCompetitionsCount", 1), $$$NO) = $$$YES
    }
    
    do ##class(Dance.Data.Competition).%OpenId(competitionId).ConvertToProxyObject(convertParams).%ToJSON()
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetTournamentCompetitionsForGrid">
<Description>
Get all tournament competitions for grid</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
        
        set isClosedCondition = " AND cmpT.IsClosed = 0 "
        if (params.other.showClosed = $$$YES){
            set isClosedCondition = ""
        }
        
        set whereCondition = "cmpT.IsActive = 1 AND cmpT.Tournament = '"_..ParseParameter(params.other.tournamentId)_"' "_isClosedCondition
        
        if (params.other.date '= ""){
            set whereCondition = whereCondition_" AND cmpT.StartDate = "_$ZDATEH(params.other.date,15)
        }
        
        if (params.other.type = "UDSR"){
            set whereCondition = whereCondition_" AND cmpT.WDSF IS NULL "
        }
        elseif (params.other.type = "WDSF"){
            set whereCondition = whereCondition_" AND cmpT.WDSF IS NOT NULL "
        }
        elseif (params.other.type = "OTHER"){
            set whereCondition = whereCondition_" AND cmpT.WDSF IS NULL AND cmpT.IsInternational=1 "
        }
      
        do ..GetProxyObjectsForGrid("SELECT %NOLOCK cmpT.ID FROM Dance_Data.Competition as cmpT ", "Dance.Data.Competition", params, params.other.convertParams, whereCondition).%ToJSON()
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="GetCompetitionTypes">
<Description>
Get competition types for combobox</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.children = ##class(%ListOfObjects).%New()
    
    &sql(DECLARE CurCmpTypes CURSOR FOR 
            SELECT ID, Name->Value
            FROM Dance_Data.CompetitionType)    
        
    &sql(OPEN CurCmpTypes)
    for  
    {   
        &sql(FETCH CurCmpTypes INTO :id, :name) 
        quit:(SQLCODE '= 0)
        
        set type = ##class(%ZEN.proxyObject).%New() 
        set type.id = id
        set type.name = name
        
        do proxy.children.Insert(type)  
    }
    
    &sql(CLOSE CurCmpTypes)
    
    do proxy.%ToJSON()
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetAvailableCompetitionsForGrid">
<Description>
Available participants competitions for grid</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
        
        if (params.other.type = "UDSR"){
            set prtObj = ""
            if $ISOBJECT(params.other.couple){
                set prtObj = ##class(Dance.Data.CoupleUDSR).%OpenId(params.other.couple.id) 
            }
            else{
                set prtObj = ##class(Dance.Data.PersonUDSR).%OpenId(params.other.athlete.id)
            }
            
            set competitionsList = ..GetCompetitionsListForUDSRRegistration(params.other.tournamentId, prtObj)
        }
        elseif(params.other.type = "WDSF"){
            set prtObj = ""
            if $ISOBJECT(params.other.couple){
                set prtObj = ##class(Dance.Data.CoupleWDSF).%OpenId(params.other.couple.id) 
            }
            else{
                set prtObj = ##class(Dance.Data.PersonWDSF).%OpenId(params.other.athlete.id)
            }
            
            set competitionsList = ..GetCompetitionsListForWDSFRegistration(params.other.tournamentId, prtObj, params.other)
        }
        elseif (params.other.type = "OTHER"){
            set competitionsList = ..GetCompetitionsListForOTHERRegistration(params.other.tournamentId, params.other)
        }
        
       
        set proxyResult = ##class(%ZEN.proxyObject).%New()
        set proxyResult.children = ##class(%ZEN.proxyObject).%New()
        set proxyResult.children.items = ##class(%ListOfObjects).%New()
        set proxyResult.children.itemsTotal = competitionsList.Count()
        
        // Конвертируем в %ZEN.poxyObject
        for i=1:1:competitionsList.Count(){
            do proxyResult.children.items.Insert(competitionsList.GetAt(i).ConvertToProxyObject(params.other.convertParams))
        }
        
        do proxyResult.%ToJSON()
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="GetTournamentCompetitionsList">
<Description>
Список групп турнира выбранного типа</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String,isCouple:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    set competitionsList = ##class(%ListOfObjects).%New()         
    
    set sql = ""_
    "SELECT %NOLOCK ID "_
    "FROM Dance_Data.Competition "_
    "WHERE Tournament = '"_..ParseParameter(trnId)_"' AND IsActive = 1 AND IsClosed = 0 "
    
    if (isCouple = $$$YES){
        set sql = sql_" AND Type->Code = 'Couples' "
    }
    else{
        set sql = sql_" AND Type->Code = 'Solo' "
    }
    
    set sql = sql_" ORDER BY StartDate, IdInternal"
            
    set statement = ##class(%SQL.Statement).%New()  
    $$$THROWONERROR(st, statement.%Prepare(sql))        

    set rs = statement.%Execute()
    
    while (rs.%Next() '= 0){
        set cmp = ##class(Dance.Data.Competition).%OpenId(rs.%GetData(1),,.st)
        do competitionsList.Insert(cmp)
    }
    
    do rs.%Close()                      
    do statement.%Close()
    
    quit competitionsList
]]></Implementation>
</Method>

<Method name="GetCompetitionsListForUDSRRegistration">
<Description>
Отобрать только те группы, которые соответствуют правилам для регистрации СТСР</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String,prtData:%RegisteredObject</FormalSpec>
<Private>1</Private>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    #dim man As Dance.Data.PersonUDSR = ""
    #dim woman As Dance.Data.PersonUDSR = ""
    #dim athlete As Dance.Data.PersonUDSR = ""
    #dim couple As Dance.Data.CoupleUDSR = ""
    #dim coupleWDSF As Dance.Data.CoupleWDSF = ""
    set manRegionNumber = ""
    
    if ($CLASSNAME(prtData) = ##class(Dance.Data.PersonUDSR).%ClassName(1)){
        set athlete = prtData
        set man = prtData
        set woman = prtData
        set manRegionNumber = prtData.RegionNumber
    }
    elseif ($CLASSNAME(prtData) = ##class(Dance.Data.CoupleUDSR).%ClassName(1)){
        set couple = prtData
        set man = couple.Man
        set woman = couple.Woman
        
        set manRegionNumber = couple.Man.RegionNumber
        
        // Если есть WDSF версия, то открываем её
        if (##class(Dance.Data.MatchingCoupleUDSRWDSF).UDSRIdxExists(couple.%Id()) = $$$YES){
            set coupleWDSF = ##class(Dance.Data.MatchingCoupleUDSRWDSF).UDSRIdxOpen(couple.%Id(),,.st).WDSF
            set ageWDSFList = ##class(Dance.Data.AgeCategoryWDSF).GetAllAvailableList(coupleWDSF.AgeCategory) 
        }
    }
    
    set maleAge = $P($ZD($NOW(),3), "-", 1) - $P($ZDT(man.DOB, 3), "-", 1)
    set femaleAge = $P($ZD($NOW(),3), "-", 1) - $P($ZDT(woman.DOB, 3), "-", 1)
    set ageUDSRList = ##class(Dance.Data.AgeCategory).GetAllAvailableList(maleAge, femaleAge) 
    
    
    set sourceList = ..GetTournamentCompetitionsList(trnId, $ISOBJECT(couple))
    set resultList = ##class(%ListOfObjects).%New()
    
    for i=1:1:sourceList.Count(){
        #dim cmp As Dance.Data.Competition = sourceList.GetAt(i)
        
        // Если группа ограничена регионом, то сверяем регион, если пара|сольник не подходит, то пропускаем группу
        if (cmp.Regions.Count() > 0){
            set cmpId = cmp.%Id() 
            SET SQLCODE = ""
            &sql(SELECT TOP 1 ID
                 FROM Dance_Data.Competition_Regions
                 WHERE Competition = :cmpId AND :manRegionNumber %INLIST Regions->CodeNumbers)
            
            if (SQLCODE = 100){
                continue
            }
        }
        
        // Если СТСР пара|сольник уже записалась в эту группу, то исключаем эту группу
        if (##class(Dance.Data.Participant).IsParticipationExists(prtData.%Id(), prtData.%ClassName(1), cmp.%Id()) = $$$YES){
            continue
        }
            
        if ($ISOBJECT(couple)){   
            // Если WDSF версия пары уже записалась в эту группу, то исключаем эту группу
            if $ISOBJECT(coupleWDSF) && (##class(Dance.Data.Participant).IsParticipationExists(coupleWDSF.%Id(), coupleWDSF.%ClassName(1), cmp.%Id()) = $$$YES){
                continue
            }
        }
        
        // Если группа WDSF и есть у СТСР пары версия WDSF
        if $ISOBJECT(cmp.WDSF){
             if $ISOBJECT(coupleWDSF){
                // Если по возрасту нельзя записаться в группу, то переходим к следующей группе
                if ($LISTFIND(ageWDSFList, cmp.WDSF.AgeCategory.%Id()) = 0){
                    continue
                }
             }
             else{
                 // Если группа для WDSF и нет WDSF-версии пары, то пропускаем группу
                 continue
             }
        }
        else{       
            // Если по возрасту нельзя записаться в группу, то переходим к следующей группе
            if ($LISTFIND(ageUDSRList, cmp.AgeCategory.%Id()) = 0){
                continue
            }
        
            if $ISOBJECT(man.LAClass){
                // Если Латина и группа НЕ доступна для класса партнера, то НЕ добавляем в рез. список
                if (cmp.Discipline.Code = "Ла") && (##class(Dance.Data.Competition).IsAvailableForDancerClass(cmp.%Id(), man.LAClass.%Id()) = $$$NO){
                    continue            
                }
            }
            
            if $ISOBJECT(man.STClass){
                // Если Стандарт и группа НЕ доступна для класса партнера, то НЕ добавляем в рез. список
                if (cmp.Discipline.Code = "Ст") && (##class(Dance.Data.Competition).IsAvailableForDancerClass(cmp.%Id(), man.STClass.%Id()) = $$$NO){
                    continue            
                }
            }
        }
        
        do resultList.Insert(cmp)
    }
    
    quit resultList
]]></Implementation>
</Method>

<Method name="GetCompetitionsListForWDSFRegistration">
<Description>
Отобрать только те группы, которые соответствуют правилам для регистрации WDSF</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String,prtData:%RegisteredObject,params:%ZEN.proxyObject</FormalSpec>
<Private>1</Private>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    #dim man As Dance.Data.PersonUDSR = ""
    #dim woman As Dance.Data.PersonUDSR = ""
    #dim athlete As Dance.Data.PersonWDSF = ""
    #dim couple As Dance.Data.CoupleWDSF = ""
    #dim coupleUDSR As Dance.Data.CoupleWDSF = ""
    
    if ($CLASSNAME(prtData) = ##class(Dance.Data.PersonWDSF).%ClassName(1)){
        set athlete = prtData
    }
    elseif ($CLASSNAME(prtData) = ##class(Dance.Data.CoupleWDSF).%ClassName(1)){
        set couple = prtData
        
        // Если есть UDSR версия, то открываем её
        if (##class(Dance.Data.MatchingCoupleUDSRWDSF).WDSFIdxExists(couple.%Id()) = $$$YES){
            set coupleUDSR = ##class(Dance.Data.MatchingCoupleUDSRWDSF).WDSFIdxOpen(couple.%Id()).UDSR
            
            set man = coupleUDSR.Man
            set woman = coupleUDSR.Woman
    
            set maleAge = $P($ZD($NOW(),3), "-", 1) - $P($ZDT(coupleUDSR.Man.DOB, 3), "-", 1)
            set femaleAge = $P($ZD($NOW(),3), "-", 1) - $P($ZDT(coupleUDSR.Woman.DOB, 3), "-", 1)
            set ageUDSRList = ##class(Dance.Data.AgeCategory).GetAllAvailableList(maleAge, femaleAge) 
        }
        else{
            if (params.couple.man.dob '= "") && (params.couple.woman.dob '= ""){
                set maleAge = $P($ZD($NOW(),3), "-", 1) - $P(params.couple.man.dob, "-", 1)
                set femaleAge = $P($ZD($NOW(),3), "-", 1) - $P(params.couple.woman.dob, "-", 1)
                set ageUDSRList = ##class(Dance.Data.AgeCategory).GetAllAvailableList(maleAge, femaleAge) 
            }
            else{
                set wdsfAgeCategory = ##class(Dance.Data.AgeCategoryWDSF).NameIdxOpen(couple.AgeCategory)
                set ageUDSRList = ##class(Dance.Data.AgeCategory).GetAllAvailableList(wdsfAgeCategory.FromAge, wdsfAgeCategory.FromAge)
            }
        }
    }
    
    set ageWDSFList = ##class(Dance.Data.AgeCategoryWDSF).GetAllAvailableList(couple.AgeCategory) 
    
    set sourceList = ..GetTournamentCompetitionsList(trnId, $ISOBJECT(couple))
    set resultList = ##class(%ListOfObjects).%New()
    
    for i=1:1:sourceList.Count(){
        #dim cmp As Dance.Data.Competition = sourceList.GetAt(i)
        
        // Если WDSF версия пары уже записалась в эту группу, то исключаем эту группу
        if (##class(Dance.Data.Participant).IsParticipationExists(couple.%Id(), couple.%ClassName(1), cmp.%Id()) = $$$YES){
            continue
        }
        
         // Если СТСР пара уже записалась в эту группу, то исключаем эту группу
        if $ISOBJECT(coupleUDSR) && (##class(Dance.Data.Participant).IsParticipationExists(coupleUDSR.%Id(), coupleUDSR.%ClassName(1), cmp.%Id()) = $$$YES){
            continue
        }
        
        // Если группа WDSF и есть у WDSF пары версия UDSR
        if $ISOBJECT(cmp.WDSF){
            // Если по возрасту нельзя записаться в группу, то переходим к следующей группе
            if ($LISTFIND(ageWDSFList, cmp.WDSF.AgeCategory.%Id()) = 0){
                continue
            }
        }
        else{     
            // Если по возрасту нельзя записаться в группу, то переходим к следующей группе
            if ($LISTFIND(ageUDSRList, cmp.AgeCategory.%Id()) = 0){
                continue
            }
            
            // WDSF паре нельзя регистрироваться в группах только для СТСР.
            if ($ISOBJECT(coupleUDSR) = $$$NO) && (cmp.IsInternational = $$$NO){
                continue
            }
            else{
                // Если у WDSF пары есть СТСР версия, то проверяем классы 
                if $ISOBJECT(coupleUDSR){
                    if $ISOBJECT(man.LAClass){
                        // Если Латина и группа НЕ доступна для класса партнера, то НЕ добавляем в рез. список
                        if (cmp.Discipline.Code = "Ла") && (##class(Dance.Data.Competition).IsAvailableForDancerClass(cmp.%Id(), man.LAClass.%Id()) = $$$NO){
                            continue            
                        }
                    }
                
                    if $ISOBJECT(man.STClass){
                        // Если Стандарт и группа НЕ доступна для класса партнера, то НЕ добавляем в рез. список
                        if (cmp.Discipline.Code = "Ст") && (##class(Dance.Data.Competition).IsAvailableForDancerClass(cmp.%Id(), man.STClass.%Id()) = $$$NO){
                            continue            
                        }
                    }
                    
                    // Если группа ограничена регионом, то сверяем регион, если пара не подходит, то пропускаем группу
                    if (cmp.Regions.Count() > 0){
                        set cmpId = cmp.%Id() 
                        SET SQLCODE = ""
                        &sql(SELECT TOP 1 ID
                             FROM Dance_Data.Competition_Regions
                             WHERE Competition = :cmpId AND :coupleUDSR.Man.RegionNumber %INLIST Regions->CodeNumbers)
                        if (SQLCODE = 100){
                            continue
                        }
                    }
                }
            }
        }
        
        do resultList.Insert(cmp)
    }
    
    quit resultList
]]></Implementation>
</Method>

<Method name="GetCompetitionsListForOTHERRegistration">
<Description>
Отобрать только те группы, которые соответствуют правилам для регистрации ПРОЧИХ УЧАСТНИКОВ</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String,params:%ZEN.proxyObject</FormalSpec>
<Private>1</Private>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    set (man, woman) = ""
    set (athleteData, coupleData) = ""
    set (prtObjKey, prtObjClassName) = ""
    
    if $ISOBJECT(params.athlete){
        set athleteData = params.athlete
        set (man, woman) = params.athlete
        set prtObjKey = params.athlete.key
        set prtObjClassName = ##class(Dance.Data.ParticipantSingleOther).%ClassName(1)
    }
    elseif $ISOBJECT(params.couple){
        set coupleData = params.couple
        set man = params.couple.man
        set woman = params.couple.woman
        set prtObjKey = params.couple.key
        set prtObjClassName = ##class(Dance.Data.ParticipantCoupleOther).%ClassName(1)
    }
   
    set maleAge = $P($ZD($NOW(),3), "-", 1) - $P(man.dob, "-", 1)
    set femaleAge = $P($ZD($NOW(),3), "-", 1) - $P(woman.dob, "-", 1)
    set ageList = ##class(Dance.Data.AgeCategory).GetAllAvailableList(maleAge, femaleAge) 
        
    set sourceList = ..GetTournamentCompetitionsList(trnId, $ISOBJECT(coupleData))
    set resultList = ##class(%ListOfObjects).%New()
    
    for i=1:1:sourceList.Count(){
        #dim cmp As Dance.Data.Competition = sourceList.GetAt(i)
        
        // Если пара/соло уже записалась в эту группу, то пропускаем
        if (##class(Dance.Data.Participant).IsParticipationExists(prtObjKey, prtObjClassName, cmp.%Id()) = $$$YES){
            continue
        }
        
        // Нельзя допускать в WDSF группы и в группы, которые не разрешены для международников
        if $ISOBJECT(cmp.WDSF) || (cmp.IsInternational = $$$NO){
            continue
        }
        
        // Если по возрасту нельзя записаться в группу, то переходим к следующей группе
        if ($LISTFIND(ageList, cmp.AgeCategory.%Id()) = 0){
            continue
        }
        
        do resultList.Insert(cmp)
    }
    
    quit resultList
]]></Implementation>
</Method>

<Method name="GetAvailableCompetitionsWDSFByFilter">
<Description>
Get WDSF competitions by filter</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>countryId:%String,date:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        set dateYear = $P(date, "-", 1)
        set dateMonth = +$P(date, "-", 2)
               
        set list = ##class(%ListOfObjects).%New()
        
        &sql(DECLARE CmpWDSFCur1 CURSOR FOR
             SELECT %NOLOCK cmpWDSF.ID
             FROM Dance_Data.CompetitionWDSF as cmpWDSF
             WHERE cmpWDSF.Country = :countryId AND DATEPART(YEAR, cmpWDSF.StartDate) = :dateYear AND DATEPART(MONTH, cmpWDSF.StartDate) = :dateMonth 
             ORDER BY cmpWDSF.ID)
        
        &sql(OPEN CmpWDSFCur1)
        for{
            &sql(FETCH CmpWDSFCur1 INTO :id) 
            quit:(SQLCODE '= 0)
        
            do list.Insert(##class(Dance.Data.CompetitionWDSF).%OpenId(id).ConvertToProxyObject())  
        }
        
        &sql(CLOSE CmpWDSFCur1)
        
        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.children = list
        do proxy.%ToJSON()
    }
    catch(ex){
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetAllParticipantsForGrid">
<Description>

====================================================================================================================
Participant                                                                                              Participant
====================================================================================================================

Get all participants for grid</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
        
        set convertParams = ##class(%ZEN.proxyObject).%New()
        set convertParams.competitionParams = ##class(%ZEN.proxyObject).%New()
        set convertParams.competitionParams.loadTournament = $$$YES
        set convertParams.competitionParams.tournamentParams = ##class(%ZEN.proxyObject).%New()
        set convertParams.competitionParams.tournamentParams.loadLocation = $$$YES
        set convertParams.competitionParams.tournamentParams.loadName = params.other.loadTournamentName
        set convertParams.loadPrtObjCompetitionsCount = $$$YES
        
        set result = ..GetProxyObjectsForGrid("SELECT %NOLOCK ID FROM Dance_Data.Participant", "Dance.Data.Participant", params, convertParams, "IsActive=1 AND Tournament->IsActive = 1")
        do result.%ToJSON()
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="GetTournamentParticipantsForGrid">
<Description>
Get all participants of the tournament for grid</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
        
        set whereCondition = "Tournament = '"_..ParseParameter(params.other.tournamentId)_"' AND Competition->IsActive = 1 AND IsActive = 1 "
        
        set convertParams = ##class(%ZEN.proxyObject).%New()
        set convertParams.competitionParams = ##class(%ZEN.proxyObject).%New()
        set convertParams.competitionParams.loadTournament = $$$YES
        set convertParams.competitionParams.tournamentParams = ##class(%ZEN.proxyObject).%New()
        set convertParams.loadPrtObjCompetitionsCount = $$$YES
        set convertParams.loadPrtObjPaymentsCount = $$$YES
        
        set result = ..GetProxyObjectsForGrid("SELECT %NOLOCK MAX(ID) FROM Dance_Data.Participant", "Dance.Data.Participant", params, convertParams, whereCondition, "GROUP BY FullName->Value")
        do result.%ToJSON()
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="GetCompetitionParticipantsForGrid">
<Description>
Get all participants of the competition for grid</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.params, 1))
        
        set whereCondition = "IsActive = 1 AND Competition = '"_..ParseParameter(params.other.competitionId)_"' AND Competition->IsActive = 1 "
        
        set convertParams = ##class(%ZEN.proxyObject).%New()
        set convertParams.competitionParams = ##class(%ZEN.proxyObject).%New()
        set convertParams.competitionParams.loadTournament = $$$YES
        set convertParams.competitionParams.tournamentParams = ##class(%ZEN.proxyObject).%New()
        set convertParams.loadPrtObjCompetitionsCount = $$$YES       
        do ..GetProxyObjectsForGrid("SELECT ID FROM Dance_Data.Participant", "Dance.Data.Participant", params, convertParams, whereCondition, "GROUP BY FullName->Value").%ToJSON()
    }
    catch ex {
        set st = ex.AsStatus()
    }

    quit st
]]></Implementation>
</Method>

<Method name="GetAllDancerParticipants">
<Description>
Все группы участника в турнире</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK

    try{
        set shortView = $GET(%request.Data("shortView", 1), 1)
        set trnId = $GET(%request.Data("tournamentId", 1))
        set cplId = $GET(%request.Data("coupleId", 1))
        set athId = $GET(%request.Data("athleteId", 1))
        set cplKey = $GET(%request.Data("coupleKey", 1))
        set athKey = $GET(%request.Data("athleteKey", 1))
        
        set table = ""
        set where = "Competition->Tournament = '"_..ParseParameter(trnId)_"' "
        
        set convertParams = ##class(%ZEN.proxyObject).%New()
        set convertParams.competitionParams = ##class(%ZEN.proxyObject).%New()
        set convertParams.competitionParams.loadPaymentsCount = $$$YES
        
        if (shortView = $$$NO){
            set convertParams.competitionParams.loadDiscipline = $$$YES
            set convertParams.competitionParams.loadType = $$$YES
            set convertParams.competitionParams.loadDancerClasses = $$$YES
            set convertParams.competitionParams.loadAgeCategory = $$$YES
        }
        
        if (cplId '= ""){
            if (##class(Dance.Data.CoupleWDSF).%ExistsId(cplId)) {
                set table = "Dance_Data.ParticipantCoupleWDSF"
            }
            else{
                set table = "Dance_Data.ParticipantCoupleUDSR"
            }
            
            set where = where_" AND Couple = '"_..ParseParameter(cplId)_"' "        
        }
        elseif (athId '= ""){
            if (##class(Dance.Data.PersonWDSF).%ExistsId(athId)) {
                set table = "Dance_Data.ParticipantSingleWDSF"
            }
            else{
                set table = "Dance_Data.ParticipantSingleUDSR"
            }
            
            set where = where_" AND Athlete = '"_..ParseParameter(athId)_"' "       
        }
        elseif (cplKey '= ""){
            set cplKey = $REPLACE(cplKey, " ", "+")
            set table = "Dance_Data.ParticipantCoupleOther"
            set where = where_" AND CoupleKey = '"_cplKey_"' "      
        }
        elseif (athKey '= ""){
            set athKey = $REPLACE(athKey, " ", "+")
            set table = "Dance_Data.ParticipantSingleOther"
            set where = where_" AND AthleteKey = '"_athKey_"' "     
        }
        
        set sql = "SELECT %NOLOCK ID "_
                  "FROM "_table_" "_
                  "WHERE "_where_" "_
                  "ORDER BY Competition->StartDate, Competition->IdInternal"
        
        
        // Костыль
        if (cplId '= ""){ 
            if (##class(Dance.Data.CoupleUDSR).%ExistsId(cplId)) && (##class(Dance.Data.MatchingCoupleUDSRWDSF).UDSRIdxExists(cplId)){
                set sql = "SELECT %NOLOCK ID, Competition FROM Dance_Data.ParticipantCoupleUDSR WHERE Tournament = '"_..ParseParameter(trnId)_"' AND Couple = '"_..ParseParameter(cplId)_"' AND IsActive=1 "_
                          " UNION "_
                          "SELECT %NOLOCK ID, Competition FROM Dance_Data.ParticipantCoupleWDSF WHERE Tournament = '"_..ParseParameter(trnId)_"' AND Couple = '"_##class(Dance.Data.MatchingCoupleUDSRWDSF).UDSRIdxOpen(cplId).WDSF.%Id()_"' AND IsActive=1"         
            
             set sql = "SELECT ID "_ 
                      "FROM ( "_sql_" )"_
                      "GROUP BY Competition "_
                      "ORDER BY Competition->StartDate, Competition->IdInternal"
            }
            elseif (##class(Dance.Data.CoupleWDSF).%ExistsId(cplId)) && (##class(Dance.Data.MatchingCoupleUDSRWDSF).WDSFIdxExists(cplId)){
                set sql = "SELECT %NOLOCK ID, Competition FROM Dance_Data.ParticipantCoupleUDSR WHERE Tournament = '"_..ParseParameter(trnId)_"' AND Couple = '"_##class(Dance.Data.MatchingCoupleUDSRWDSF).WDSFIdxOpen(cplId).UDSR.%Id()_"' AND IsActive=1 "_
                          " UNION "_
                          "SELECT %NOLOCK ID, Competition FROM Dance_Data.ParticipantCoupleWDSF WHERE Tournament = '"_..ParseParameter(trnId)_"' AND Couple = '"_..ParseParameter(cplId)_"' AND IsActive=1 "
             
              set sql = "SELECT ID "_ 
                      "FROM ( "_sql_" )"_
                      "GROUP BY Competition "_
                      "ORDER BY Competition->StartDate, Competition->IdInternal"                     
            }
            
           
                      
        }
        
        set statement = ##class(%SQL.Statement).%New()  
        $$$THROWONERROR(st, statement.%Prepare(sql))        
        set rs = statement.%Execute()

        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.children = ##class(%ListOfObjects).%New()
        set ^temp("sql") = sql
        while (rs.%Next() '= 0){
            do proxy.children.Insert(##class(Dance.Data.Participant).%OpenId(rs.%GetData(1)).ConvertToProxyObject(convertParams))
        }
        
        do rs.%Close()                      
        do statement.%Close()
        
        do proxy.%ToJSON()
    }
    catch ex {
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetCoupleById">
<Description>

====================================================================================================================
Couple                                                                                                        Couple
====================================================================================================================

Get one couple by Id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set couple = ##class(Dance.Data.Couple).%OpenId(id)
    
    if $ISOBJECT(couple) {
        do couple.ConvertToProxyObject().%ToJSON()
    }
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetCoupleUDSRByNumbers">
<Description>
Get couple UDSR by numbers</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>manNumber:%String,womanNumber:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        if ($DATA(^Dance.Data.ManPartnersUDSR(+manNumber)) '= 1) || ($GET(^Dance.Data.ManPartnersUDSR(+manNumber)) '= +womanNumber){
            set ^Dance.Data.CoupleUDSRNotFoundByNumbers($ZDT($ZTS, 3)) = $LB(manNumber, womanNumber)
            //$$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("error_CoupleUDSRNotFoundByNumbers", " | Man - "_+manNumber_", Woman - "_+womanNumber))
        }
        
        set couple = ##class(Dance.Data.CoupleUDSR).GetByNumbers(+manNumber, +womanNumber, .st)
        $$$THROWONERROR(st, st)
        
        do ##class(Dance.Data.MatchingCoupleUDSRWDSF).CreateByUDSR(couple, .stWDSF)
            
        do couple.ConvertToProxyObject().%ToJSON()
    }
    catch(ex){
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetCoupleWDSFByNumbers">
<Description>
Get couple UDSR by numbers</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>manNumber:%String,womanNumber:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        set couple = ##class(Dance.Data.CoupleWDSF).GetByNumbers(manNumber, womanNumber, .st)
        $$$THROWONERROR(st, st)
        
        set match = ##class(Dance.Data.MatchingCoupleUDSRWDSF).CreateByWDSF(couple, .stUDSR)
        
        set proxyCouple = couple.ConvertToProxyObject()
        
        if $ISOBJECT(match){
            set coupleUDSRProxy = match.UDSR.ConvertToProxyObject()
            set proxyCouple.man.dob = coupleUDSRProxy.man.dob
            set proxyCouple.woman.dob = coupleUDSRProxy.woman.dob
            set proxyCouple.otherInfo.city = coupleUDSRProxy.otherInfo.city
            set proxyCouple.otherInfo.club = coupleUDSRProxy.otherInfo.club
            set proxyCouple.otherInfo.mainTrainer = coupleUDSRProxy.otherInfo.mainTrainer
            set proxyCouple.otherInfo.otherTrainers = coupleUDSRProxy.otherInfo.otherTrainers
        }
        
        do proxyCouple.%ToJSON()
        
        TCOMMIT
    }
    catch(ex){
        TROLLBACK
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetPersonByUDSRNumber">
<Description>

====================================================================================================================
Person                                                                                                        Person
====================================================================================================================

Get person UDSR by numbers</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>number:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        set athlete = ##class(Dance.Data.PersonUDSR).NumberUDSRIdxOpen(number,,.st)
        $$$THROWONERROR(st, st)
        do athlete.ConvertToProxyObject().%ToJSON()
    }
    catch(ex){
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetPersonByWDSFNumber">
<Description>
Get person UDSR by numbers</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>number:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        if (##class(Dance.Data.PersonWDSF).NumberWDSFIdxExists(number)){
            set athlete = ##class(Dance.Data.PersonWDSF).NumberWDSFIdxOpen(number,,.st)
            set diffDays = $SYSTEM.SQL.DATEDIFF("dd", $P(athlete.Updated, " ", 1), $P($ZDT($ZTS, 3), " ", 1))
            if (diffDays <= 7){
                return athlete.ConvertToProxyObject().%ToJSON()
            }       
        }
        
        set wdsfData = ##class(Dance.Wdsf.ControllerAPI).GetPerson(number, .st)
        $$$THROWONERROR(st, st)
        
        set athlete = ##class(Dance.Data.PersonWDSF).SaveFromWDSF(wdsfData, .st)        
        $$$THROWONERROR(st, st)
        
        do athlete.ConvertToProxyObject().%ToJSON()
    }
    catch(ex){
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetCountries">
<Description>

====================================================================================================================
Other                                                                                                          Other
====================================================================================================================

WDSF countries for combobox</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.children = ##class(%ListOfObjects).%New()
    
    &sql(DECLARE Curr1 CURSOR FOR 
            SELECT %NOLOCK ID, Name->Value
            FROM Dance_Data.Country
            ORDER BY Name->Value)   
        
    &sql(OPEN Curr1)
    for  
    {   
        &sql(FETCH Curr1 INTO :id, :name) 
        quit:(SQLCODE '= 0)
        
        set country = ##class(%ZEN.proxyObject).%New()  
        set country.id = id
        set country.name = name
        
        do proxy.children.Insert(country)   
    }
    
    &sql(CLOSE Curr1)
    
    do proxy.%ToJSON()
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetLanguages">
<Description>
All System languages for combobox</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set status = $$$OK
    
    try{        
        set list = ##class(%ListOfObjects).%New()
        
        &sql(DECLARE LangCurs CURSOR FOR
             SELECT %NOLOCK Code, Name 
             FROM Dance_Data_Localization.LTextLanguage
             ORDER BY Code)
        
        &sql(OPEN LangCurs)
        for{
            &sql(FETCH LangCurs INTO :code, :name) 
            quit:(SQLCODE '= 0)
            
            set proxy = ##class(%ZEN.proxyObject).%New()
            set proxy.code = code
            set proxy.name = name
            set proxy.flagUrl = "img/flags/"_code_".gif"
            
            do list.Insert(proxy)   
        }
        
        &sql(CLOSE LangCurs)
        
        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.children = list
        do proxy.%ToJSON()
    }
    catch(ex){
        set status = ex.AsStatus()
    }
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetDisciplines">
<Description>
All disciplines for combobox</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..WriteJsonFromSql("SELECT %NOLOCK ID as id, Name->Value as name FROM Dance_Data.Discipline")
]]></Implementation>
</Method>

<Method name="GetDancerClasses">
<Description>
All dancer classes for combobox</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ##class(Dance.Data.DancerClass).GetAll().%ToJSON()   
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetAgeCategories">
<Description>
All age categories for combobox</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.children = ##class(%ListOfObjects).%New()
    
    &sql(DECLARE CurAgeCategories CURSOR FOR 
            SELECT ID
            FROM Dance_Data.AgeCategory
            ORDER BY Name->Value)   
        
    &sql(OPEN CurAgeCategories)
    for  
    {   
        &sql(FETCH CurAgeCategories INTO :id) 
        quit:(SQLCODE '= 0)
        
        do proxy.children.Insert(##class(Dance.Data.AgeCategory).%OpenId(id).ConvertToProxyObject())    
    }
    
    &sql(CLOSE CurAgeCategories)
    
    do proxy.%ToJSON()
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateFeedBack">
<Description>
Feedback from users </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART
        
        $$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(10000000), "I", "UTF8"),,.data, 1))
        
        set fb = ##class(Dance.Data.FeedBack).%New()
        set fb.Author = data.author
        set fb.Email = data.email
        set fb.Subject = data.subject
        set fb.Msg = data.msg
        
        set st = fb.%Save()
        
        if $$$ISERR(st) $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("error_FeedBackSave"," | "_st))
        
        
        do ##class(Dance.Utils.Email).Send($GET(^Settings("Dance","OperatorEmail")), 
        "Танцы. Обратная связь "_$ZDT($ZTS,3), 
        "Автор: "_fb.Author_"<br>"_
        "Email: "_fb.Email_"<br>"_
        "Тема: "_fb.Subject_"<br>"_
        "Сообщение: <br>"_fb.Msg)
        
        do ##class(Dance.Utils.Email).Send("evgeny.shvarov@gmail.com", 
        "Танцы. Обратная связь "_$ZDT($ZTS,3), 
        "Автор: "_fb.Author_"<br>"_
        "Email: "_fb.Email_"<br>"_
        "Тема: "_fb.Subject_"<br>"_
        "Сообщение: <br>"_fb.Msg)
                
        
        TCOMMIT
    }
    catch ex {
        TROLLBACK
        set st = ex.AsStatus()
    }
            
    quit st
]]></Implementation>
</Method>

<Method name="GetPersonStatistics">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.allCount = 0
    set proxy.udsrCount = 0
    set proxy.wdsfCount = 0
    set proxy.otherCount = 0
    
    &sql(SELECT %NOLOCK COUNT(ID) INTO :proxy.allCount FROM Dance_Data.Person)
    &sql(SELECT %NOLOCK COUNT(ID) INTO :proxy.udsrCount FROM Dance_Data.PersonUDSR)
    &sql(SELECT %NOLOCK COUNT(ID) INTO :proxy.wdsfCount FROM Dance_Data.PersonWDSF)
    
    set proxy.udsrLastUpdated = $G(^Settings("Dance","UDSRPersonsLastUpdated"))
    
    do proxy.%ToJSON()
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetCountParticipantCompetitions">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set proxy = ##class(%ZEN.proxyObject).%New()
    set proxy.count = 0
    set st = $$$OK
    
    try{
        set trnId = $GET(%request.Data("tournamentId", 1))
        set cplId = $GET(%request.Data("coupleId", 1))
        set athId = $GET(%request.Data("athleteId", 1))
        set cplKey = $GET(%request.Data("coupleKey", 1))
        set athKey = $GET(%request.Data("athleteKey", 1))
        
        if (cplId '= ""){
            // WDSF or UDSR
            set couple = ##class(Dance.Data.Couple).%OpenId(cplId)

            if (##class(Dance.Data.MatchingCoupleUDSRWDSF).UDSRIdxExists(couple.%Id())) || (##class(Dance.Data.MatchingCoupleUDSRWDSF).WDSFIdxExists(couple.%Id())){
                set match = $CASE($CLASSNAME(couple), "Dance.Data.CoupleWDSF" : ##class(Dance.Data.MatchingCoupleUDSRWDSF).WDSFIdxOpen(couple.%Id()), "Dance.Data.CoupleUDSR" : ##class(Dance.Data.MatchingCoupleUDSRWDSF).UDSRIdxOpen(couple.%Id()))       
                set udsrCplId = match.UDSR.%Id()
                set wdsfCplId = match.WDSF.%Id()
                     
                &sql(SELECT %NOLOCK COUNT(DISTINCT Competition) INTO :proxy.count 
                     FROM (
                     SELECT %NOLOCK Competition
                     FROM Dance_Data.ParticipantCoupleUDSR 
                     WHERE Couple = :udsrCplId AND Tournament = :trnId AND IsActive = 1
                     UNION 
                     SELECT Competition
                     FROM Dance_Data.ParticipantCoupleWDSF 
                     WHERE Couple = :wdsfCplId AND Tournament = :trnId AND IsActive = 1))
                     
            }
            else{
                if ($CLASSNAME(couple) = "Dance.Data.CoupleUDSR") {
                    &sql(SELECT %NOLOCK COUNT(ID) INTO :proxy.count FROM Dance_Data.ParticipantCoupleUDSR WHERE Couple = :cplId AND Tournament = :trnId AND IsActive = 1)
                }
                else {
                    &sql(SELECT %NOLOCK COUNT(ID) INTO :proxy.count FROM Dance_Data.ParticipantCoupleWDSF WHERE Couple = :cplId AND Tournament = :trnId AND IsActive = 1)
                }
            }
        }
        elseif (athId '= ""){
            // WDSF or UDSR
            set athlete = ##class(Dance.Data.Person).%OpenId(athId)
            if ($CLASSNAME(athlete) = "Dance.Data.PersonUDSR") {
                &sql(SELECT %NOLOCK COUNT(ID) INTO :proxy.count FROM Dance_Data.ParticipantSingleUDSR WHERE Athlete = :athId AND Tournament = :trnId AND IsActive = 1)
            }
            else {
                &sql(SELECT %NOLOCK COUNT(ID) INTO :proxy.count FROM Dance_Data.ParticipantSingleWDSF WHERE Athlete = :athId AND Tournament = :trnId AND IsActive = 1)
            }
        }
        elseif (cplKey '= ""){
            // Other couple
            &sql(SELECT %NOLOCK COUNT(ID) INTO :proxy.count FROM Dance_Data.ParticipantCoupleOther WHERE CoupleKey = :cplKey AND Tournament = :trnId AND IsActive = 1)
        }
        elseif (athKey '= ""){
            // Other athlete
            &sql(SELECT %NOLOCK COUNT(ID) INTO :proxy.count FROM Dance_Data.ParticipantSingleOther WHERE AthleteKey = :athKey AND Tournament = :trnId AND IsActive = 1)
        }       
    }
    catch(ex){
        set st = ex.AsStatus()
    }
    
    do proxy.%ToJSON()
    
    quit st
]]></Implementation>
</Method>

<Method name="GetCompetitionRegions">
<Description>
Get all competition regions</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit ..WriteJsonFromSql("SELECT id as id, name || ' [' || LIST(CodeNumbers) ||  ']' as name FROM Dance_Data.CompetitionRegion GROUP BY ID")
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Web.LoginForm">
<Super>%CSP.Page</Super>
<TimeCreated>63288,68706.491812</TimeCreated>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<<html>
	<head>        
		<title>Dance sport</title>
        <script language="javascript" src="js/common.js"></script>
        <script language="javascript">
        	window.onload = function() {
	        	AppSettings.setCookie('urlDataCookie', window.location.toString(), {expires: 10});
  				window.document.forms['loginForm'].submit(); 
			};
       </script>
    </head>
	<body>
        <div style="display: none;">
            <form name="loginForm" class="form-signin" method="post" action="#($GET(^Settings("Dance", "WebApp"))_"/dance/index.csp")#">
                <p id="caption">Registration system</p>
                <input name="CacheLogin" value="1" type="hidden">
                <input id="CacheUserName" type="text" class="input-block-level" name="CacheUserName" placeholder="Login" value="ilson">
                <input type="password" class="input-block-level" name="CachePassword" placeholder="Password" value="podolko">
                <button class="btn btn-small btn-primary" type="submit" style="font-size: 1em;">Login</button>
            </form>
        </div>
	</body>
	</html>>
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Web.Report">
<Abstract>1</Abstract>
<TimeCreated>63497,79011.63075</TimeCreated>

<Parameter name="ContentType">
<Default>plain/text</Default>
</Parameter>

<Parameter name="CharSet">
<Default>windows-1251</Default>
</Parameter>

<Method name="TournamentParticipants">
<ClassMethod>1</ClassMethod>
<FormalSpec>lang:%String,trnId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ##class(%MessageDictionary).SetSessionLanguage(lang)
	set %session.Language = lang
	
	set %response.ContentType = ..#ContentType
	set %response.CharSet = ..#CharSet
	
	set status = $$$OK
	
	try{
		set trn = ##class(Dance.Data.Tournament).%OpenId(trnId)
		
		set fileName = trn.Name.Value_".csv"

		if ($FIND(%request.UserAgent, "Firefox") '= 0) {
			set fileName = $REPLACE(fileName, " ", "_")
		}		
		
		do %response.SetHeader("Content-Disposition","attachment;filename="_fileName)
		
		#dim udsrCouples As %ListOfObjects = ..GetReportDataCoupleUDSR(trnId)
		#dim udsrSingles As %ListOfObjects = ..GetReportDataSingleUDSR(trnId)
			
		#dim wdsfCouples As %ListOfObjects = ..GetReportDataCoupleWDSF(trnId)
		#dim wdsfSingles As %ListOfObjects = ..GetReportDataSingleWDSF(trnId)
		
		#dim otherCouples As %ListOfObjects = ..GetReportDataCoupleOther(trnId)
		#dim otherSingles As %ListOfObjects = ..GetReportDataSingleOther(trnId)
		
		set rowFormat = "%ManNumber;%ManLastName;%ManFirstName;%ManStClass;%ManLaClass;%ManDob;%WomanNumber;%WomanLastName;%WomanFirstName;%WomanStClass;%WomanLaClass;%WomanDob;%Competitions;%Club;%City;%Region;%Trainer1LastName;%Trainer1FirstName;%Trainer2LastName;%Trainer2FirstName"
		w "Книжка партнера;Фамилия партнера;Имя партнера;Класс партнера СТ;Класс партнера ЛА;Дата рождения партнера;Книжка партнерши;Фамилия партнерши;Имя партнерши;Класс партнерши СТ;Класс партнерши ЛА;Дата рождения партнерши;Группы;Клуб;Город;Регион;Тренер1 Фамилия;Тренер1 Имя;Тренер2 Фамилия;Тренер2 Имя",!
		
		do ..WriteToDeviceFromAnyCoupleList(udsrCouples, rowFormat)
		do ..WriteToDeviceFromAnyAthleteList(udsrSingles, rowFormat)
		
		do ..WriteToDeviceFromAnyCoupleList(wdsfCouples, rowFormat)
		do ..WriteToDeviceFromAnyAthleteList(wdsfSingles, rowFormat)
		
		do ..WriteToDeviceFromAnyCoupleList(otherCouples, rowFormat)
		do ..WriteToDeviceFromAnyAthleteList(otherSingles, rowFormat)
	}
	catch ex{
		set status = ex.AsStatus()	
	}
	
	q status
]]></Implementation>
</Method>

<Method name="WriteToDeviceFromAnyCoupleList">
<ClassMethod>1</ClassMethod>
<FormalSpec>list:%ListOfObjects,rowFormat:%String</FormalSpec>
<Implementation><![CDATA[
	for i=1:1:list.Count(){
		set couple = list.GetAt(i).couple
		set couple.otherInfo.mainTrainer = $REPLACE(couple.otherInfo.mainTrainer, $C(10), "")
		set couple.otherInfo.otherTrainers = $REPLACE(couple.otherInfo.otherTrainers, $C(10), "")
		set row = $REPLACE(rowFormat, "%ManNumber", couple.man.number)
		set row = $REPLACE(row, "%ManLastName", couple.man.lastName)
		set row = $REPLACE(row, "%ManFirstName", couple.man.firstName)
		set row = $REPLACE(row, "%ManStClass", couple.man.stClass.name)
		set row = $REPLACE(row, "%ManLaClass", couple.man.laClass.name)
		set row = $REPLACE(row, "%ManDob", couple.man.dob)
		set row = $REPLACE(row, "%WomanNumber", couple.woman.number)
		set row = $REPLACE(row, "%WomanLastName", couple.woman.lastName)
		set row = $REPLACE(row, "%WomanFirstName", couple.woman.firstName)
		set row = $REPLACE(row, "%WomanStClass", couple.woman.stClass.name)
		set row = $REPLACE(row, "%WomanLaClass", couple.woman.laClass.name)
		set row = $REPLACE(row, "%WomanDob", couple.woman.dob)
		set row = $REPLACE(row, "%Competitions", list.GetAt(i).competitions)
		set row = $REPLACE(row, "%Club", couple.otherInfo.club)
		set row = $REPLACE(row, "%City", couple.otherInfo.city)
		set row = $REPLACE(row, "%Region", couple.otherInfo.regionNumber)
		set row = $REPLACE(row, "%Trainer1LastName", $P(couple.otherInfo.mainTrainer, " ", 1))
		set row = $REPLACE(row, "%Trainer1FirstName", $P(couple.otherInfo.mainTrainer, " ", 2))
		set row = $REPLACE(row, "%Trainer2LastName", $P($P(couple.otherInfo.otherTrainers, ",", 1), " ", *-1))
		set row = $REPLACE(row, "%Trainer2FirstName",$P($P(couple.otherInfo.otherTrainers, ",", 1), " ", *))
		w row,!			
	}
]]></Implementation>
</Method>

<Method name="WriteToDeviceFromAnyAthleteList">
<ClassMethod>1</ClassMethod>
<FormalSpec>list:%ListOfObjects,rowFormat:%String</FormalSpec>
<Implementation><![CDATA[
	for i=1:1:list.Count(){
		set athlete = list.GetAt(i).athlete
		set athlete.otherInfo.mainTrainer = $REPLACE(athlete.otherInfo.mainTrainer, $C(10), "")
		set athlete.otherInfo.otherTrainers = $REPLACE(athlete.otherInfo.otherTrainers, $C(10), "")
		
		if (athlete.gender = "Male"){
			set row = $REPLACE(rowFormat, "%ManNumber", athlete.number)
			set row = $REPLACE(row, "%ManLastName", athlete.lastName)
			set row = $REPLACE(row, "%ManFirstName", athlete.firstName)
			set row = $REPLACE(row, "%ManStClass", athlete.stClass.name)
			set row = $REPLACE(row, "%ManLaClass", athlete.laClass.name)
			set row = $REPLACE(row, "%ManDob", athlete.dob)
			set row = $REPLACE(row, "%WomanNumber", "")
			set row = $REPLACE(row, "%WomanLastName", "")
			set row = $REPLACE(row, "%WomanFirstName", "")
			set row = $REPLACE(row, "%WomanStClass", "")
			set row = $REPLACE(row, "%WomanLaClass", "")
			set row = $REPLACE(row, "%WomanDob", "")
		}
		else {
			set row = $REPLACE(rowFormat, "%ManNumber", "")
			set row = $REPLACE(row, "%ManLastName", "")
			set row = $REPLACE(row, "%ManFirstName", "")
			set row = $REPLACE(row, "%ManStClass", "")
			set row = $REPLACE(row, "%ManLaClass", "")
			set row = $REPLACE(row, "%ManDob", "")
			set row = $REPLACE(row, "%WomanNumber", athlete.number)
			set row = $REPLACE(row, "%WomanLastName", athlete.lastName)
			set row = $REPLACE(row, "%WomanFirstName", athlete.firstName)
			set row = $REPLACE(row, "%WomanStClass", athlete.stClass.name)
			set row = $REPLACE(row, "%WomanLaClass", athlete.laClass.name)
			set row = $REPLACE(row, "%WomanDob", athlete.dob)
		}
		
		set row = $REPLACE(row, "%Competitions", list.GetAt(i).competitions)
		set row = $REPLACE(row, "%Club", athlete.otherInfo.club)
		set row = $REPLACE(row, "%City", athlete.otherInfo.city)
		set row = $REPLACE(row, "%Region", athlete.otherInfo.regionNumber)
		set row = $REPLACE(row, "%Trainer1LastName", $P(athlete.otherInfo.mainTrainer, " ", 1))
		set row = $REPLACE(row, "%Trainer1FirstName", $P(athlete.otherInfo.mainTrainer, " ", 2))
		set row = $REPLACE(row, "%Trainer2LastName", $P($P(athlete.otherInfo.otherTrainers, ",", 1), " ", *-1))
		set row = $REPLACE(row, "%Trainer2FirstName",$P($P(athlete.otherInfo.otherTrainers, ",", 1), " ", *))
		w row,!			
	}
]]></Implementation>
</Method>

<Method name="GetReportDataCoupleUDSR">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set list = ##class(%ListOfObjects).%New()
	
	&sql(DECLARE Cur1Top CURSOR FOR 
	 	 SELECT ID
		 FROM Dance_Data.CoupleUDSR
		 ORDER BY Man->LastName->Value)	
	
	&sql(OPEN Cur1Top)
	for  
	{	
		&sql(FETCH Cur1Top INTO :coupleId) 
		quit:(SQLCODE '= 0)
		
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.couple = ##class(Dance.Data.CoupleUDSR).%OpenId(coupleId).ConvertToProxyObject()
		set proxy.competitions = ""
		
		&sql(DECLARE Cur1Level1sub1 CURSOR FOR 
	 	 	 SELECT Competition->IdExternal
	 	 	 FROM Dance_Data.ParticipantCoupleUDSR
	 	 	 WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1 AND Couple = :coupleId 
	 	 	 ORDER BY Competition->StartDate)	
		&sql(OPEN Cur1Level1sub1)
		for  
		{	
			&sql(FETCH Cur1Level1sub1 INTO :cmpId) 
			quit:(SQLCODE '= 0)
			
			set proxy.competitions = proxy.competitions_","_cmpId
		}
		&sql(CLOSE Cur1Level1sub1)
		
		if (##class(Dance.Data.MatchingCoupleUDSRWDSF).UDSRIdxExists(coupleId) = $$$YES){
			set coupleWDSFId = ##class(Dance.Data.MatchingCoupleUDSRWDSF).UDSRIdxOpen(coupleId).WDSF.%Id()
			&sql(DECLARE Cur1Level1sub2 CURSOR FOR 
		 	 	 SELECT Competition->IdExternal
		 	 	 FROM Dance_Data.ParticipantCoupleWDSF
		 	 	 WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1 AND Couple = :coupleWDSFId 
		 	 	 ORDER BY Competition->StartDate)	
			&sql(OPEN Cur1Level1sub2)
			for  
			{	
				&sql(FETCH Cur1Level1sub2 INTO :cmpId) 
				quit:(SQLCODE '= 0)
				
				set proxy.competitions = proxy.competitions_","_cmpId
			}
			&sql(CLOSE Cur1Level1sub2)
		}
		
		if (proxy.competitions '= ""){
			set proxy.competitions = $E(proxy.competitions, 2, *)
			do list.Insert(proxy)
		}
	}
	
	&sql(CLOSE Cur1Top)
	
	quit list
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* old
ClassMethod GetReportDataCoupleUDSR(trnId As %String) As %ListOfObjects
{
	set list = ##class(%ListOfObjects).%New()
	
	&sql(DECLARE PrtUDSRCur CURSOR FOR 
	 	 SELECT DISTINCT Couple
	 	 FROM Dance_Data.ParticipantCoupleUDSR
	 	 WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1
	 	 ORDER BY FullName)	
	
	&sql(OPEN PrtUDSRCur)
	for  
	{	
		&sql(FETCH PrtUDSRCur INTO :coupleId) 
		quit:(SQLCODE '= 0)
		
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.couple = ##class(Dance.Data.CoupleUDSR).%OpenId(coupleId).ConvertToProxyObject()
		set proxy.competitions = ""
		
		&sql(DECLARE CmpCplUDSRCur CURSOR FOR 
	 	 	 SELECT Competition->IdExternal
	 	 	 FROM Dance_Data.ParticipantCoupleUDSR
	 	 	 WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND Couple = :coupleId 
	 	 	 ORDER BY Competition->StartDate)	
		&sql(OPEN CmpCplUDSRCur)
		for  
		{	
			&sql(FETCH CmpCplUDSRCur INTO :cmpId) 
			quit:(SQLCODE '= 0)
			
			set proxy.competitions = proxy.competitions_","_cmpId
		}
		&sql(CLOSE CmpCplUDSRCur)
		
		set proxy.competitions = $E(proxy.competitions, 2, *)
		do list.Insert(proxy)
	}
	
	&sql(CLOSE PrtUDSRCur)
	
	quit list
}
*/
]]></Content>
</UDLText>

<Method name="GetReportDataCoupleWDSF">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set list = ##class(%ListOfObjects).%New()
	
	set params = ##class(%ZEN.proxyObject).%New()
	set params.competitionParams = ##class(%ZEN.proxyObject).%New()
			
	&sql(DECLARE PrtWDSFCoupleCur CURSOR FOR 
	 	 SELECT pW.ID
	 	 FROM Dance_Data.ParticipantCoupleWDSF as pW
	 	 WHERE pW.Competition->Tournament = :trnId AND pW.Competition->IsActive = 1 AND pW.IsActive = 1 AND 0 = (SELECT COUNT(mt.ID) FROM Dance_Data.MatchingCoupleUDSRWDSF as mt WHERE mt.WDSF = pW.Couple)
	 	 GROUP BY pW.Couple
	 	 ORDER BY FullName)	
	
	&sql(OPEN PrtWDSFCoupleCur)
	for  
	{	
		&sql(FETCH PrtWDSFCoupleCur INTO :prtId) 
		quit:(SQLCODE '= 0)
		
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.couple = ##class(Dance.Data.ParticipantCoupleWDSF).%OpenId(prtId).ConvertToProxyObject(params).couple
		set proxy.couple.man.number = ""
		set proxy.couple.woman.number = ""
		set proxy.competitions = ""
		
		&sql(DECLARE CmpCplWDSFCur CURSOR FOR 
	 	 	 SELECT Competition->IdExternal
	 	 	 FROM Dance_Data.ParticipantCoupleWDSF
	 	 	 WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND Couple = :proxy.couple.id 
	 	 	 ORDER BY Competition->StartDate)	
		&sql(OPEN CmpCplWDSFCur)
		for  
		{	
			&sql(FETCH CmpCplWDSFCur INTO :cmpId) 
			quit:(SQLCODE '= 0)
			
			set proxy.competitions = proxy.competitions_","_cmpId
		}
		&sql(CLOSE CmpCplWDSFCur)
		
		set proxy.competitions = $E(proxy.competitions, 2, *)
		do list.Insert(proxy)
	}
	
	&sql(CLOSE PrtWDSFCoupleCur)
	
	quit list
]]></Implementation>
</Method>

<Method name="GetReportDataCoupleOther">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	try{
		set list = ##class(%ListOfObjects).%New()
		
		set params = ##class(%ZEN.proxyObject).%New()
		set params.competitionParams = ##class(%ZEN.proxyObject).%New()
	
		&sql(DECLARE PrtOtherCoupleCur CURSOR FOR 
		 	 SELECT ID
		 	 FROM Dance_Data.ParticipantCoupleOther
		 	 WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1 AND TicketStatus <> 'Not paid'
		 	 GROUP BY CoupleKey
		 	 ORDER BY FullName)	
		
		&sql(OPEN PrtOtherCoupleCur)
		for  
		{	
			&sql(FETCH PrtOtherCoupleCur INTO :prtId) 
			quit:(SQLCODE '= 0)
			
			set proxy = ##class(%ZEN.proxyObject).%New()
			set proxy.couple = ##class(Dance.Data.ParticipantCoupleOther).%OpenId(prtId).ConvertToProxyObject(params).couple
			set proxy.competitions = ""
			
			&sql(DECLARE CmpCplOtherCur CURSOR FOR 
		 	 	 SELECT Competition->IdExternal
		 	 	 FROM Dance_Data.ParticipantCoupleOther
		 	 	 WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND CoupleKey = :proxy.couple.key 
		 	 	 ORDER BY Competition->StartDate)	
			&sql(OPEN CmpCplOtherCur)
			for  
			{	
				&sql(FETCH CmpCplOtherCur INTO :cmpId) 
				quit:(SQLCODE '= 0)
				
				set proxy.competitions = proxy.competitions_","_cmpId
			}
			&sql(CLOSE CmpCplOtherCur)
			
			set proxy.competitions = $E(proxy.competitions, 2, *)
			do list.Insert(proxy)
		}
		
		&sql(CLOSE PrtOtherCoupleCur)
	}
	catch(ex){
		do $SYSTEM.OBJ.DisplayError(ex.AsStatus())
		
	}
	quit list
]]></Implementation>
</Method>

<Method name="GetReportDataSingleUDSR">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set list = ##class(%ListOfObjects).%New()
	
	&sql(DECLARE PrtSingleUDSRCur CURSOR FOR 
	 	 SELECT DISTINCT Athlete
	 	 FROM Dance_Data.ParticipantSingleUDSR
	 	 WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1
	 	 ORDER BY FullName)	
	
	&sql(OPEN PrtSingleUDSRCur)
	for  
	{	
		&sql(FETCH PrtSingleUDSRCur INTO :athId) 
		quit:(SQLCODE '= 0)
		
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.athlete = ##class(Dance.Data.ParticipantSingleUDSR).%OpenId(athId).ConvertToProxyObject()
		set proxy.competitions = ""
		
		&sql(DECLARE CmpAthUDSRCur CURSOR FOR 
	 	 	 SELECT Competition->IdExternal
	 	 	 FROM Dance_Data.ParticipantSingleUDSR
	 	 	 WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND Athlete = :athId 
	 	 	 ORDER BY Competition->StartDate)	
		&sql(OPEN CmpAthUDSRCur)
		for  
		{	
			&sql(FETCH CmpAthUDSRCur INTO :cmpId) 
			quit:(SQLCODE '= 0)
			
			set proxy.competitions = proxy.competitions_","_cmpId
		}
		&sql(CLOSE CmpAthUDSRCur)
		
		set proxy.competitions = $E(proxy.competitions, 2, *)
		do list.Insert(proxy)
	}
	
	&sql(CLOSE PrtSingleUDSRCur)
	
	quit list
]]></Implementation>
</Method>

<Method name="GetReportDataSingleWDSF">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set list = ##class(%ListOfObjects).%New()
	set params = ##class(%ZEN.proxyObject).%New()
	set params.competitionParams = ##class(%ZEN.proxyObject).%New()
	
	&sql(DECLARE PrtSingleWDSFCur CURSOR FOR 
	 	 SELECT ID
	 	 FROM Dance_Data.ParticipantSingleWDSF
	 	 WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1
	 	 GROUP BY Athlete
	 	 ORDER BY FullName)	
	
	&sql(OPEN PrtSingleWDSFCur)
	for  
	{	
		&sql(FETCH PrtSingleWDSFCur INTO :prtId) 
		quit:(SQLCODE '= 0)
		
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.athlete = ##class(Dance.Data.ParticipantSingleWDSF).%OpenId(prtId).ConvertToProxyObject(params).athlete
		set proxy.athlete.number = ""
		set proxy.competitions = ""
		
		&sql(DECLARE CmpAthWDSFCur CURSOR FOR 
	 	 	 SELECT Competition->IdExternal
	 	 	 FROM Dance_Data.ParticipantSingleWDSF
	 	 	 WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND Athlete = :proxy.athlete.id 
	 	 	 ORDER BY Competition->StartDate)	
		&sql(OPEN CmpAthWDSFCur)
		for  
		{	
			&sql(FETCH CmpAthWDSFCur INTO :cmpId) 
			quit:(SQLCODE '= 0)
			
			set proxy.competitions = proxy.competitions_","_cmpId
		}
		&sql(CLOSE CmpAthWDSFCur)
		
		set proxy.competitions = $E(proxy.competitions, 2, *)
		do list.Insert(proxy)
	}
	
	&sql(CLOSE PrtSingleWDSFCur)
	
	quit list
]]></Implementation>
</Method>

<Method name="GetReportDataSingleOther">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set list = ##class(%ListOfObjects).%New()
	set params = ##class(%ZEN.proxyObject).%New()
	set params.competitionParams = ##class(%ZEN.proxyObject).%New()
	
	&sql(DECLARE PrtOtherAthleteCur CURSOR FOR 
	 	 SELECT ID
	 	 FROM Dance_Data.ParticipantSingleOther
	 	 WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1 AND TicketStatus <> 'Not paid'
	 	 GROUP BY AthleteKey
	 	 ORDER BY FullName)	
	
	&sql(OPEN PrtOtherAthleteCur)
	for  
	{	
		&sql(FETCH PrtOtherAthleteCur INTO :prtId) 
		quit:(SQLCODE '= 0)
		
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.athlete = ##class(Dance.Data.ParticipantSingleOther).%OpenId(prtId).ConvertToProxyObject(params).athlete
		set proxy.competitions = ""
		
		&sql(DECLARE CmpAthOtherCur CURSOR FOR 
	 	 	 SELECT Competition->IdExternal
	 	 	 FROM Dance_Data.ParticipantSingleOther
	 	 	 WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND AthleteKey = :proxy.athlete.key
	 	 	 ORDER BY Competition->StartDate)	
		&sql(OPEN CmpAthOtherCur)
		for  
		{	
			&sql(FETCH CmpAthOtherCur INTO :cmpId) 
			quit:(SQLCODE '= 0)
			
			set proxy.competitions = proxy.competitions_","_cmpId
		}
		&sql(CLOSE CmpAthOtherCur)
		
		set proxy.competitions = $E(proxy.competitions, 2, *)
		do list.Insert(proxy)
	}
	
	&sql(CLOSE PrtOtherAthleteCur)
	
	quit list
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Web.ReportTournamentParticipants">
<Abstract>1</Abstract>
<TimeCreated>63520,63887.252488</TimeCreated>

<Parameter name="ContentType">
<Default>plain/text</Default>
</Parameter>

<Parameter name="CharSet">
<Default>windows-1251</Default>
</Parameter>

<Method name="GetReportLink">
<Description><![CDATA[
<Route Method="GET" Url="/report/:lang/tournament/:trnId/code/:code/participant" Call="Dance.Web.ReportTournamentParticipants:GetFileByAccessCode"/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%Status</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set link = "http://"_$GET(^Settings("Dance", "ServerAddress"), "localhost")_":"_$GET(^Settings("Dance","ServerPort"), 57772)_$GET(^Settings("Dance","WebAppUser"))_
    "/report/ru/tournament/"_trnId_"/code/"_..GetAccessHashForTournament(##class(Dance.Data.Tournament).%OpenId(trnId))_"/participant"
    
    quit link
]]></Implementation>
</Method>

<Method name="GetAccessHashForTournament">
<ClassMethod>1</ClassMethod>
<FormalSpec>trn:Dance.Data.Tournament</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit $REPLACE($REPLACE($SYSTEM.Encryption.Base64Encode($SYSTEM.Encryption.MD5Hash($ZCVT($P(trn.AccessCode, "-", 3)_trn.%Id()_trn.Hash, "L"))), "/", "SLASH"), "=", "EQL")
]]></Implementation>
</Method>

<Method name="GetFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>lang:%String,trnId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set trn = ##class(Dance.Data.Tournament).%OpenId(trnId)
    
    do ##class(%MessageDictionary).SetSessionLanguage(lang)
    set %session.Language = lang
    
    set %response.ContentType = ..#ContentType
    set %response.CharSet = ..#CharSet
    
    set status = $$$OK
    
    try{
        set fileName = trn.Name.Value_" [от "_$ZD($ZTS, 3)_"].csv"

        if ($FIND(%request.UserAgent, "Firefox") '= 0) {
            set fileName = $REPLACE(fileName, " ", "_")
        }       
        
        do %response.SetHeader("Content-Disposition","attachment;filename="_fileName)
        
        #dim udsrCouples As %ListOfObjects = ..GetReportDataCoupleUDSR(trnId)
        #dim udsrSingles As %ListOfObjects = ..GetReportDataSingleUDSR(trnId)
            
        #dim wdsfCouples As %ListOfObjects = ..GetReportDataCoupleWDSF(trnId)
        #dim wdsfSingles As %ListOfObjects = ..GetReportDataSingleWDSF(trnId)
        
        #dim otherCouples As %ListOfObjects = ..GetReportDataCoupleOther(trnId)
        #dim otherSingles As %ListOfObjects = ..GetReportDataSingleOther(trnId)
        
        set rowFormat = "%Created;%ManNumber;%ManLastName;%ManFirstName;%ManStClass;%ManLaClass;%ManDob;%WomanNumber;%WomanLastName;%WomanFirstName;%WomanStClass;%WomanLaClass;%WomanDob;%Competitions;%Club;%City;%Region;%Trainer1LastName;%Trainer1FirstName;%Trainer2LastName;%Trainer2FirstName"
        w "Дата регистрации;Книжка партнера;Фамилия партнера;Имя партнера;Класс партнера СТ;Класс партнера ЛА;Дата рождения партнера;Книжка партнерши;Фамилия партнерши;Имя партнерши;Класс партнерши СТ;Класс партнерши ЛА;Дата рождения партнерши;Группы;Клуб;Город;Регион;Тренер1 Фамилия;Тренер1 Имя;Тренер2 Фамилия;Тренер2 Имя",!
        
        do ..WriteToDeviceFromAnyCoupleList(udsrCouples, rowFormat)
        do ..WriteToDeviceFromAnyAthleteList(udsrSingles, rowFormat)
        
        do ..WriteToDeviceFromAnyCoupleList(wdsfCouples, rowFormat)
        do ..WriteToDeviceFromAnyAthleteList(wdsfSingles, rowFormat)
        
        do ..WriteToDeviceFromAnyCoupleList(otherCouples, rowFormat)
        do ..WriteToDeviceFromAnyAthleteList(otherSingles, rowFormat)
    }
    catch ex{
        set status = ex.AsStatus()  
    }
    
    q status
]]></Implementation>
</Method>

<Method name="GetFileByAccessCode">
<ClassMethod>1</ClassMethod>
<FormalSpec>lang:%String,trnId:%String,accessCode:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set trn = ##class(Dance.Data.Tournament).%OpenId(trnId)
    if (..GetAccessHashForTournament(trn) '= accessCode) {
        quit ##class(Dance.Utils.Msg).GetErrorStatus("Wrong access code for tournament")
    }
    
    q ..GetFile(lang, trnId)
]]></Implementation>
</Method>

<Method name="WriteToDeviceFromAnyCoupleList">
<ClassMethod>1</ClassMethod>
<FormalSpec>list:%ListOfObjects,rowFormat:%String</FormalSpec>
<Implementation><![CDATA[
    for i=1:1:list.Count(){
        set couple = list.GetAt(i).couple
        set couple.otherInfo.mainTrainer = $REPLACE(couple.otherInfo.mainTrainer, $C(10), "")
        set couple.otherInfo.otherTrainers = $REPLACE(couple.otherInfo.otherTrainers, $C(10), "")
        set row = $REPLACE(rowFormat, "%ManNumber", couple.man.number)
        set row = $REPLACE(row, "%ManLastName", couple.man.lastName)
        set row = $REPLACE(row, "%ManFirstName", couple.man.firstName)
        set row = $REPLACE(row, "%ManStClass", couple.man.stClass.name)
        set row = $REPLACE(row, "%ManLaClass", couple.man.laClass.name)
        set row = $REPLACE(row, "%ManDob", couple.man.dob)
        set row = $REPLACE(row, "%WomanNumber", couple.woman.number)
        set row = $REPLACE(row, "%WomanLastName", couple.woman.lastName)
        set row = $REPLACE(row, "%WomanFirstName", couple.woman.firstName)
        set row = $REPLACE(row, "%WomanStClass", couple.woman.stClass.name)
        set row = $REPLACE(row, "%WomanLaClass", couple.woman.laClass.name)
        set row = $REPLACE(row, "%WomanDob", couple.woman.dob)
        set row = $REPLACE(row, "%Competitions", list.GetAt(i).competitions)
        set row = $REPLACE(row, "%Club", couple.otherInfo.club)
        set row = $REPLACE(row, "%City", couple.otherInfo.city)
        set row = $REPLACE(row, "%Region", couple.otherInfo.regionNumber)
        set row = $REPLACE(row, "%Trainer1LastName", $P(couple.otherInfo.mainTrainer, " ", 1))
        set row = $REPLACE(row, "%Trainer1FirstName", $P(couple.otherInfo.mainTrainer, " ", 2))
        set row = $REPLACE(row, "%Trainer2LastName", $P($P(couple.otherInfo.otherTrainers, ",", 1), " ", *-1))
        set row = $REPLACE(row, "%Trainer2FirstName",$P($P(couple.otherInfo.otherTrainers, ",", 1), " ", *))
        set row = $REPLACE(row, "%Created", "["_couple.otherInfo.created_"]")
        
        w row,!         
    }
]]></Implementation>
</Method>

<Method name="WriteToDeviceFromAnyAthleteList">
<ClassMethod>1</ClassMethod>
<FormalSpec>list:%ListOfObjects,rowFormat:%String</FormalSpec>
<Implementation><![CDATA[
    for i=1:1:list.Count(){
        set athlete = list.GetAt(i).athlete
        set athlete.otherInfo.mainTrainer = $REPLACE(athlete.otherInfo.mainTrainer, $C(10), "")
        set athlete.otherInfo.otherTrainers = $REPLACE(athlete.otherInfo.otherTrainers, $C(10), "")
        
        if (athlete.gender = "Male"){
            set row = $REPLACE(rowFormat, "%ManNumber", athlete.number)
            set row = $REPLACE(row, "%ManLastName", athlete.lastName)
            set row = $REPLACE(row, "%ManFirstName", athlete.firstName)
            set row = $REPLACE(row, "%ManStClass", athlete.stClass.name)
            set row = $REPLACE(row, "%ManLaClass", athlete.laClass.name)
            set row = $REPLACE(row, "%ManDob", athlete.dob)
            set row = $REPLACE(row, "%WomanNumber", "")
            set row = $REPLACE(row, "%WomanLastName", "")
            set row = $REPLACE(row, "%WomanFirstName", "")
            set row = $REPLACE(row, "%WomanStClass", "")
            set row = $REPLACE(row, "%WomanLaClass", "")
            set row = $REPLACE(row, "%WomanDob", "")
        }
        else {
            set row = $REPLACE(rowFormat, "%ManNumber", "")
            set row = $REPLACE(row, "%ManLastName", "")
            set row = $REPLACE(row, "%ManFirstName", "")
            set row = $REPLACE(row, "%ManStClass", "")
            set row = $REPLACE(row, "%ManLaClass", "")
            set row = $REPLACE(row, "%ManDob", "")
            set row = $REPLACE(row, "%WomanNumber", athlete.number)
            set row = $REPLACE(row, "%WomanLastName", athlete.lastName)
            set row = $REPLACE(row, "%WomanFirstName", athlete.firstName)
            set row = $REPLACE(row, "%WomanStClass", athlete.stClass.name)
            set row = $REPLACE(row, "%WomanLaClass", athlete.laClass.name)
            set row = $REPLACE(row, "%WomanDob", athlete.dob)
        }
        
        set row = $REPLACE(row, "%Competitions", list.GetAt(i).competitions)
        set row = $REPLACE(row, "%Club", athlete.otherInfo.club)
        set row = $REPLACE(row, "%City", athlete.otherInfo.city)
        set row = $REPLACE(row, "%Region", athlete.otherInfo.regionNumber)
        set row = $REPLACE(row, "%Trainer1LastName", $P(athlete.otherInfo.mainTrainer, " ", 1))
        set row = $REPLACE(row, "%Trainer1FirstName", $P(athlete.otherInfo.mainTrainer, " ", 2))
        set row = $REPLACE(row, "%Trainer2LastName", $P($P(athlete.otherInfo.otherTrainers, ",", 1), " ", *-1))
        set row = $REPLACE(row, "%Trainer2FirstName",$P($P(athlete.otherInfo.otherTrainers, ",", 1), " ", *))
        set row = $REPLACE(row, "%Created", "["_athlete.otherInfo.created_"]")
        w row,!         
    }
]]></Implementation>
</Method>

<Method name="GetReportDataCoupleUDSR">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    set list = ##class(%ListOfObjects).%New()
    
    &sql(DECLARE Cur1Top CURSOR FOR 
         SELECT %NOLOCK ID
         FROM Dance_Data.CoupleUDSR
         ORDER BY Man->LastName->Value) 
    
    &sql(OPEN Cur1Top)
    for  
    {   
        &sql(FETCH Cur1Top INTO :coupleId) 
        quit:(SQLCODE '= 0)
        
        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.couple = ##class(Dance.Data.CoupleUDSR).%OpenId(coupleId).ConvertToProxyObject()
        set proxy.competitions = ""
        
        
        &sql(DECLARE Cur1Level1sub1 CURSOR FOR 
             SELECT Competition->IdExternal, Created
             FROM Dance_Data.ParticipantCoupleUDSR
             WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1 AND Couple = :coupleId 
             ORDER BY Competition->StartDate)   
        &sql(OPEN Cur1Level1sub1)
        for  
        {   
            &sql(FETCH Cur1Level1sub1 INTO :cmpId, :created) 
            quit:(SQLCODE '= 0)
            
            set proxy.competitions = proxy.competitions_","_cmpId
            set proxy.couple.otherInfo.created = created
        }
        &sql(CLOSE Cur1Level1sub1)
        
        if (##class(Dance.Data.MatchingCoupleUDSRWDSF).UDSRIdxExists(coupleId) = $$$YES){
            set coupleWDSFId = ##class(Dance.Data.MatchingCoupleUDSRWDSF).UDSRIdxOpen(coupleId).WDSF.%Id()
            &sql(DECLARE Cur1Level1sub2 CURSOR FOR 
                 SELECT Competition->IdExternal, Created
                 FROM Dance_Data.ParticipantCoupleWDSF
                 WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1 AND Couple = :coupleWDSFId 
                 ORDER BY Competition->StartDate)   
            &sql(OPEN Cur1Level1sub2)
            for  
            {   
                &sql(FETCH Cur1Level1sub2 INTO :cmpId, :created) 
                quit:(SQLCODE '= 0)
                
                set proxy.competitions = proxy.competitions_","_cmpId
                set proxy.couple.otherInfo.created = created
            }
            &sql(CLOSE Cur1Level1sub2)
        }
        
        if (proxy.competitions '= ""){
            set proxy.competitions = $E(proxy.competitions, 2, *)
            do list.Insert(proxy)
        }
    }
    
    &sql(CLOSE Cur1Top)
    
    quit list
]]></Implementation>
</Method>

<Method name="GetReportDataCoupleWDSF">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    set list = ##class(%ListOfObjects).%New()
    
    set params = ##class(%ZEN.proxyObject).%New()
    set params.competitionParams = ##class(%ZEN.proxyObject).%New()
            
    &sql(DECLARE PrtWDSFCoupleCur CURSOR FOR 
         SELECT %NOLOCK pW.ID
         FROM Dance_Data.ParticipantCoupleWDSF as pW
         WHERE pW.Competition->Tournament = :trnId AND pW.Competition->IsActive = 1 AND pW.IsActive = 1 AND 0 = (SELECT COUNT(mt.ID) FROM Dance_Data.MatchingCoupleUDSRWDSF as mt WHERE mt.WDSF = pW.Couple)
         GROUP BY pW.Couple
         ORDER BY FullName->Value)  
    
    &sql(OPEN PrtWDSFCoupleCur)
    for  
    {   
        &sql(FETCH PrtWDSFCoupleCur INTO :prtId) 
        quit:(SQLCODE '= 0)
        
        set proxy = ##class(%ZEN.proxyObject).%New()
        set prtProxy = ##class(Dance.Data.ParticipantCoupleWDSF).%OpenId(prtId).ConvertToProxyObject(params)
        set proxy.couple = prtProxy.couple
        set proxy.couple.otherInfo.created = prtProxy.created
        set proxy.couple.otherInfo.regionNumber = proxy.couple.otherInfo.country.name
        set proxy.couple.man.number = ""
        set proxy.couple.woman.number = ""
        
        if (proxy.couple.man.dob = ""){
            set proxy.couple.man.dob = proxy.couple.otherInfo.ageCategory
        }
        
        if (proxy.couple.woman.dob = ""){
            set proxy.couple.woman.dob = proxy.couple.otherInfo.ageCategory
        }
        
        set proxy.competitions = ""
        
        &sql(DECLARE CmpCplWDSFCur CURSOR FOR 
             SELECT Competition->IdExternal
             FROM Dance_Data.ParticipantCoupleWDSF
             WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND Couple = :proxy.couple.id 
             ORDER BY Competition->StartDate)   
        &sql(OPEN CmpCplWDSFCur)
        for  
        {   
            &sql(FETCH CmpCplWDSFCur INTO :cmpId) 
            quit:(SQLCODE '= 0)
            
            set proxy.competitions = proxy.competitions_","_cmpId
        }
        &sql(CLOSE CmpCplWDSFCur)
        
        set proxy.competitions = $E(proxy.competitions, 2, *)
        do list.Insert(proxy)
    }
    
    &sql(CLOSE PrtWDSFCoupleCur)
    
    quit list
]]></Implementation>
</Method>

<Method name="GetReportDataCoupleOther">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    try{
        set list = ##class(%ListOfObjects).%New()
        
        set params = ##class(%ZEN.proxyObject).%New()
        set params.competitionParams = ##class(%ZEN.proxyObject).%New()
    
        &sql(DECLARE PrtOtherCoupleCur CURSOR FOR 
             SELECT ID
             FROM Dance_Data.ParticipantCoupleOther
             WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1
             GROUP BY CoupleKey
             ORDER BY FullName->Value)  
        
        &sql(OPEN PrtOtherCoupleCur)
        for  
        {   
            &sql(FETCH PrtOtherCoupleCur INTO :prtId) 
            quit:(SQLCODE '= 0)
            
            set proxy = ##class(%ZEN.proxyObject).%New()
            set proxy.couple = ##class(Dance.Data.ParticipantCoupleOther).%OpenId(prtId).ConvertToProxyObject(params).couple
            set proxy.competitions = ""
            
            &sql(DECLARE CmpCplOtherCur CURSOR FOR 
                 SELECT Competition->IdExternal, Created
                 FROM Dance_Data.ParticipantCoupleOther
                 WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND CoupleKey = :proxy.couple.key 
                 ORDER BY Competition->StartDate)   
            &sql(OPEN CmpCplOtherCur)
            for  
            {   
                &sql(FETCH CmpCplOtherCur INTO :cmpId, :created) 
                quit:(SQLCODE '= 0)
                
                set proxy.competitions = proxy.competitions_","_cmpId
                set proxy.couple.otherInfo.created = created
                set proxy.couple.otherInfo.regionNumber = proxy.couple.otherInfo.country.name
            }
            &sql(CLOSE CmpCplOtherCur)
            
            set proxy.competitions = $E(proxy.competitions, 2, *)
            do list.Insert(proxy)
        }
        
        &sql(CLOSE PrtOtherCoupleCur)
    }
    catch(ex){
        do $SYSTEM.OBJ.DisplayError(ex.AsStatus())
        
    }
    quit list
]]></Implementation>
</Method>

<Method name="GetReportDataSingleUDSR">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    set list = ##class(%ListOfObjects).%New()
    
    &sql(DECLARE PrtSingleUDSRCur CURSOR FOR 
         SELECT %NOLOCK DISTINCT Athlete
         FROM Dance_Data.ParticipantSingleUDSR
         WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1
         ORDER BY FullName->Value)  
    
    &sql(OPEN PrtSingleUDSRCur)
    for  
    {   
        &sql(FETCH PrtSingleUDSRCur INTO :athId) 
        quit:(SQLCODE '= 0)
        
        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.athlete = ##class(Dance.Data.ParticipantSingleUDSR).%OpenId(athId).ConvertToProxyObject()
        set proxy.competitions = ""
        
        &sql(DECLARE CmpAthUDSRCur CURSOR FOR 
             SELECT %NOLOCK Competition->IdExternal, Created
             FROM Dance_Data.ParticipantSingleUDSR
             WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND Athlete = :athId 
             ORDER BY Competition->StartDate)   
        &sql(OPEN CmpAthUDSRCur)
        for  
        {   
            &sql(FETCH CmpAthUDSRCur INTO :cmpId, :created) 
            quit:(SQLCODE '= 0)
            
            set proxy.competitions = proxy.competitions_","_cmpId
            set proxy.athlete.otherInfo.created = created
        }
        &sql(CLOSE CmpAthUDSRCur)
        
        set proxy.competitions = $E(proxy.competitions, 2, *)
        do list.Insert(proxy)
    }
    
    &sql(CLOSE PrtSingleUDSRCur)
    
    quit list
]]></Implementation>
</Method>

<Method name="GetReportDataSingleWDSF">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    set list = ##class(%ListOfObjects).%New()
    set params = ##class(%ZEN.proxyObject).%New()
    set params.competitionParams = ##class(%ZEN.proxyObject).%New()
    
    &sql(DECLARE PrtSingleWDSFCur CURSOR FOR 
         SELECT ID
         FROM Dance_Data.ParticipantSingleWDSF
         WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1
         GROUP BY Athlete
         ORDER BY FullName->Value)  
    
    &sql(OPEN PrtSingleWDSFCur)
    for  
    {   
        &sql(FETCH PrtSingleWDSFCur INTO :prtId) 
        quit:(SQLCODE '= 0)
        
        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.athlete = ##class(Dance.Data.ParticipantSingleWDSF).%OpenId(prtId).ConvertToProxyObject(params).athlete
        set proxy.athlete.number = ""
        set proxy.competitions = ""
        
        &sql(DECLARE CmpAthWDSFCur CURSOR FOR 
             SELECT Competition->IdExternal, Created
             FROM Dance_Data.ParticipantSingleWDSF
             WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND Athlete = :proxy.athlete.id 
             ORDER BY Competition->StartDate)   
        &sql(OPEN CmpAthWDSFCur)
        for  
        {   
            &sql(FETCH CmpAthWDSFCur INTO :cmpId, :created) 
            quit:(SQLCODE '= 0)
            
            set proxy.competitions = proxy.competitions_","_cmpId
            set proxy.athlete.otherInfo.created = created
        }
        &sql(CLOSE CmpAthWDSFCur)
        
        set proxy.competitions = $E(proxy.competitions, 2, *)
        do list.Insert(proxy)
    }
    
    &sql(CLOSE PrtSingleWDSFCur)
    
    quit list
]]></Implementation>
</Method>

<Method name="GetReportDataSingleOther">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    set list = ##class(%ListOfObjects).%New()
    set params = ##class(%ZEN.proxyObject).%New()
    set params.competitionParams = ##class(%ZEN.proxyObject).%New()
    
    &sql(DECLARE PrtOtherAthleteCur CURSOR FOR 
         SELECT ID
         FROM Dance_Data.ParticipantSingleOther
         WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1
         GROUP BY AthleteKey
         ORDER BY FullName->Value)  
    
    &sql(OPEN PrtOtherAthleteCur)
    for  
    {   
        &sql(FETCH PrtOtherAthleteCur INTO :prtId) 
        quit:(SQLCODE '= 0)
        
        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.athlete = ##class(Dance.Data.ParticipantSingleOther).%OpenId(prtId).ConvertToProxyObject(params).athlete
        set proxy.competitions = ""
        
        &sql(DECLARE CmpAthOtherCur CURSOR FOR 
             SELECT %NOLOCK Competition->IdExternal, Created
             FROM Dance_Data.ParticipantSingleOther
             WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND AthleteKey = :proxy.athlete.key
             ORDER BY Competition->StartDate)   
        &sql(OPEN CmpAthOtherCur)
        for  
        {   
            &sql(FETCH CmpAthOtherCur INTO :cmpId, :created) 
            quit:(SQLCODE '= 0)
            
            set proxy.competitions = proxy.competitions_","_cmpId
            set proxy.athlete.otherInfo.created = created
        }
        &sql(CLOSE CmpAthOtherCur)
        
        set proxy.competitions = $E(proxy.competitions, 2, *)
        do list.Insert(proxy)
    }
    
    &sql(CLOSE PrtOtherAthleteCur)
    
    quit list
]]></Implementation>
</Method>
</Class>


<Class name="Dance.Web.ReportTournamentPayers">
<Abstract>1</Abstract>
<TimeCreated>63578,74712.386624</TimeCreated>

<Parameter name="ContentType">
<Default>plain/text</Default>
</Parameter>

<Parameter name="CharSet">
<Default>windows-1251</Default>
</Parameter>

<Method name="GetReportLink">
<Description><![CDATA[
<Route Method="GET" Url="/report/:lang/tournament/:trnId/code/:code/participant" Call="Dance.Web.ReportTournamentParticipants:GetFileByAccessCode"/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%Status</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set link = "http://"_$GET(^Settings("Dance", "ServerAddress"), "localhost")_":"_$GET(^Settings("Dance","ServerPort"), 57772)_$GET(^Settings("Dance","WebAppUser"))_
    "/report/ru/tournament/"_trnId_"/code/"_..GetAccessHashForTournament(##class(Dance.Data.Tournament).%OpenId(trnId))_"/payer"
    
    quit link
]]></Implementation>
</Method>

<Method name="GetAccessHashForTournament">
<ClassMethod>1</ClassMethod>
<FormalSpec>trn:Dance.Data.Tournament</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit $REPLACE($REPLACE($SYSTEM.Encryption.Base64Encode($SYSTEM.Encryption.MD5Hash("Payers"_$ZCVT($P(trn.AccessCode, "-", 3)_trn.%Id()_trn.Hash, "L"))), "/", "SLASH"), "=", "EQL")
]]></Implementation>
</Method>

<Method name="GetFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>lang:%String,trnId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set trn = ##class(Dance.Data.Tournament).%OpenId(trnId)
    
    do ##class(%MessageDictionary).SetSessionLanguage(lang)
    set %session.Language = lang
    
    set %response.ContentType = ..#ContentType
    set %response.CharSet = ..#CharSet
    
    set status = $$$OK
    
    try{
        set fileName = trn.Name.Value_" (оплатившие)[от "_$ZD($ZTS, 3)_"].csv"

        if ($FIND(%request.UserAgent, "Firefox") '= 0) {
            set fileName = $REPLACE(fileName, " ", "_")
        }       
        
        do %response.SetHeader("Content-Disposition","attachment;filename="_fileName)
        
        #dim udsrCouples As %ListOfObjects = ..GetReportDataCoupleUDSR(trnId)
        #dim udsrSingles As %ListOfObjects = ..GetReportDataSingleUDSR(trnId)
            
        #dim wdsfCouples As %ListOfObjects = ..GetReportDataCoupleWDSF(trnId)
        #dim wdsfSingles As %ListOfObjects = ..GetReportDataSingleWDSF(trnId)
        
        #dim otherCouples As %ListOfObjects = ..GetReportDataCoupleOther(trnId)
        #dim otherSingles As %ListOfObjects = ..GetReportDataSingleOther(trnId)
        
        set rowFormat = "%Created;%ManNumber;%ManLastName;%ManFirstName;%ManStClass;%ManLaClass;%ManDob;%WomanNumber;%WomanLastName;%WomanFirstName;%WomanStClass;%WomanLaClass;%WomanDob;%Competitions;%Club;%City;%Region;%Trainer1LastName;%Trainer1FirstName;%Trainer2LastName;%Trainer2FirstName"
        w "Дата регистрации;Книжка партнера;Фамилия партнера;Имя партнера;Класс партнера СТ;Класс партнера ЛА;Дата рождения партнера;Книжка партнерши;Фамилия партнерши;Имя партнерши;Класс партнерши СТ;Класс партнерши ЛА;Дата рождения партнерши;Группы;Клуб;Город;Регион;Тренер1 Фамилия;Тренер1 Имя;Тренер2 Фамилия;Тренер2 Имя",!
        
        do ..WriteToDeviceFromAnyCoupleList(udsrCouples, rowFormat)
        do ..WriteToDeviceFromAnyAthleteList(udsrSingles, rowFormat)
        
        do ..WriteToDeviceFromAnyCoupleList(wdsfCouples, rowFormat)
        do ..WriteToDeviceFromAnyAthleteList(wdsfSingles, rowFormat)
        
        do ..WriteToDeviceFromAnyCoupleList(otherCouples, rowFormat)
        do ..WriteToDeviceFromAnyAthleteList(otherSingles, rowFormat)
    }
    catch ex{
        set status = ex.AsStatus()  
    }
    
    q status
]]></Implementation>
</Method>

<Method name="GetFileByAccessCode">
<ClassMethod>1</ClassMethod>
<FormalSpec>lang:%String,trnId:%String,accessCode:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set trn = ##class(Dance.Data.Tournament).%OpenId(trnId)
    if (..GetAccessHashForTournament(trn) '= accessCode) {
        quit ##class(Dance.Utils.Msg).GetErrorStatus("Wrong access code for tournament")
    }
    
    q ..GetFile(lang, trnId)
]]></Implementation>
</Method>

<Method name="WriteToDeviceFromAnyCoupleList">
<ClassMethod>1</ClassMethod>
<FormalSpec>list:%ListOfObjects,rowFormat:%String</FormalSpec>
<Implementation><![CDATA[
    for i=1:1:list.Count(){
        set couple = list.GetAt(i).couple
        set couple.otherInfo.mainTrainer = $REPLACE(couple.otherInfo.mainTrainer, $C(10), "")
        set couple.otherInfo.otherTrainers = $REPLACE(couple.otherInfo.otherTrainers, $C(10), "")
        set row = $REPLACE(rowFormat, "%ManNumber", couple.man.number)
        set row = $REPLACE(row, "%ManLastName", couple.man.lastName)
        set row = $REPLACE(row, "%ManFirstName", couple.man.firstName)
        set row = $REPLACE(row, "%ManStClass", couple.man.stClass.name)
        set row = $REPLACE(row, "%ManLaClass", couple.man.laClass.name)
        set row = $REPLACE(row, "%ManDob", couple.man.dob)
        set row = $REPLACE(row, "%WomanNumber", couple.woman.number)
        set row = $REPLACE(row, "%WomanLastName", couple.woman.lastName)
        set row = $REPLACE(row, "%WomanFirstName", couple.woman.firstName)
        set row = $REPLACE(row, "%WomanStClass", couple.woman.stClass.name)
        set row = $REPLACE(row, "%WomanLaClass", couple.woman.laClass.name)
        set row = $REPLACE(row, "%WomanDob", couple.woman.dob)
        set row = $REPLACE(row, "%Competitions", list.GetAt(i).competitions)
        set row = $REPLACE(row, "%Club", couple.otherInfo.club)
        set row = $REPLACE(row, "%City", couple.otherInfo.city)
        set row = $REPLACE(row, "%Region", couple.otherInfo.regionNumber)
        set row = $REPLACE(row, "%Trainer1LastName", $P(couple.otherInfo.mainTrainer, " ", 1))
        set row = $REPLACE(row, "%Trainer1FirstName", $P(couple.otherInfo.mainTrainer, " ", 2))
        set row = $REPLACE(row, "%Trainer2LastName", $P($P(couple.otherInfo.otherTrainers, ",", 1), " ", *-1))
        set row = $REPLACE(row, "%Trainer2FirstName",$P($P(couple.otherInfo.otherTrainers, ",", 1), " ", *))
        set row = $REPLACE(row, "%Created", "["_couple.otherInfo.created_"]")
        
        w row,!         
    }
]]></Implementation>
</Method>

<Method name="WriteToDeviceFromAnyAthleteList">
<ClassMethod>1</ClassMethod>
<FormalSpec>list:%ListOfObjects,rowFormat:%String</FormalSpec>
<Implementation><![CDATA[
    for i=1:1:list.Count(){
        set athlete = list.GetAt(i).athlete
        set athlete.otherInfo.mainTrainer = $REPLACE(athlete.otherInfo.mainTrainer, $C(10), "")
        set athlete.otherInfo.otherTrainers = $REPLACE(athlete.otherInfo.otherTrainers, $C(10), "")
        
        if (athlete.gender = "Male"){
            set row = $REPLACE(rowFormat, "%ManNumber", athlete.number)
            set row = $REPLACE(row, "%ManLastName", athlete.lastName)
            set row = $REPLACE(row, "%ManFirstName", athlete.firstName)
            set row = $REPLACE(row, "%ManStClass", athlete.stClass.name)
            set row = $REPLACE(row, "%ManLaClass", athlete.laClass.name)
            set row = $REPLACE(row, "%ManDob", athlete.dob)
            set row = $REPLACE(row, "%WomanNumber", "")
            set row = $REPLACE(row, "%WomanLastName", "")
            set row = $REPLACE(row, "%WomanFirstName", "")
            set row = $REPLACE(row, "%WomanStClass", "")
            set row = $REPLACE(row, "%WomanLaClass", "")
            set row = $REPLACE(row, "%WomanDob", "")
        }
        else {
            set row = $REPLACE(rowFormat, "%ManNumber", "")
            set row = $REPLACE(row, "%ManLastName", "")
            set row = $REPLACE(row, "%ManFirstName", "")
            set row = $REPLACE(row, "%ManStClass", "")
            set row = $REPLACE(row, "%ManLaClass", "")
            set row = $REPLACE(row, "%ManDob", "")
            set row = $REPLACE(row, "%WomanNumber", athlete.number)
            set row = $REPLACE(row, "%WomanLastName", athlete.lastName)
            set row = $REPLACE(row, "%WomanFirstName", athlete.firstName)
            set row = $REPLACE(row, "%WomanStClass", athlete.stClass.name)
            set row = $REPLACE(row, "%WomanLaClass", athlete.laClass.name)
            set row = $REPLACE(row, "%WomanDob", athlete.dob)
        }
        
        set row = $REPLACE(row, "%Competitions", list.GetAt(i).competitions)
        set row = $REPLACE(row, "%Club", athlete.otherInfo.club)
        set row = $REPLACE(row, "%City", athlete.otherInfo.city)
        set row = $REPLACE(row, "%Region", athlete.otherInfo.regionNumber)
        set row = $REPLACE(row, "%Trainer1LastName", $P(athlete.otherInfo.mainTrainer, " ", 1))
        set row = $REPLACE(row, "%Trainer1FirstName", $P(athlete.otherInfo.mainTrainer, " ", 2))
        set row = $REPLACE(row, "%Trainer2LastName", $P($P(athlete.otherInfo.otherTrainers, ",", 1), " ", *-1))
        set row = $REPLACE(row, "%Trainer2FirstName",$P($P(athlete.otherInfo.otherTrainers, ",", 1), " ", *))
        set row = $REPLACE(row, "%Created", "["_athlete.otherInfo.created_"]")
        w row,!         
    }
]]></Implementation>
</Method>

<Method name="GetReportDataCoupleUDSR">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    set list = ##class(%ListOfObjects).%New()
    
    &sql(DECLARE Cur1Top CURSOR FOR 
         SELECT %NOLOCK ID
         FROM Dance_Data.CoupleUDSR
         ORDER BY Man->LastName->Value) 
    
    &sql(OPEN Cur1Top)
    for  
    {   
        &sql(FETCH Cur1Top INTO :coupleId) 
        quit:(SQLCODE '= 0)
        
        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.couple = ##class(Dance.Data.CoupleUDSR).%OpenId(coupleId).ConvertToProxyObject()
        set proxy.competitions = ""
        
        
        &sql(DECLARE Cur1Level1sub1 CURSOR FOR 
             SELECT %NOLOCK Competition->IdExternal, Created
             FROM Dance_Data.ParticipantCoupleUDSR
             WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1 AND Couple = :coupleId AND TicketStatus = 'Paid' 
             ORDER BY Competition->StartDate)   
        &sql(OPEN Cur1Level1sub1)
        for  
        {   
            &sql(FETCH Cur1Level1sub1 INTO :cmpId, :created) 
            quit:(SQLCODE '= 0)
            
            set proxy.competitions = proxy.competitions_","_cmpId
            set proxy.couple.otherInfo.created = created

        }
        &sql(CLOSE Cur1Level1sub1)
        
        if (##class(Dance.Data.MatchingCoupleUDSRWDSF).UDSRIdxExists(coupleId) = $$$YES){
            set coupleWDSFId = ##class(Dance.Data.MatchingCoupleUDSRWDSF).UDSRIdxOpen(coupleId).WDSF.%Id()
            &sql(DECLARE Cur1Level1sub2 CURSOR FOR 
                 SELECT %NOLOCK Competition->IdExternal, Created
                 FROM Dance_Data.ParticipantCoupleWDSF
                 WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1 AND Couple = :coupleWDSFId  AND TicketStatus = 'Paid'
                 ORDER BY Competition->StartDate)   
            &sql(OPEN Cur1Level1sub2)
            for  
            {   
                &sql(FETCH Cur1Level1sub2 INTO :cmpId, :created) 
                quit:(SQLCODE '= 0)
                
                set proxy.competitions = proxy.competitions_","_cmpId
                set proxy.couple.otherInfo.created = created
            }
            &sql(CLOSE Cur1Level1sub2)
        }
        
        if (proxy.competitions '= ""){
            set proxy.competitions = $E(proxy.competitions, 2, *)
            do list.Insert(proxy)
        }
    }
    
    &sql(CLOSE Cur1Top)
    
    quit list
]]></Implementation>
</Method>

<Method name="GetReportDataCoupleWDSF">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    set list = ##class(%ListOfObjects).%New()
    
    set params = ##class(%ZEN.proxyObject).%New()
    set params.competitionParams = ##class(%ZEN.proxyObject).%New()
            
    &sql(DECLARE PrtWDSFCoupleCur CURSOR FOR 
         SELECT %NOLOCK pW.ID
         FROM Dance_Data.ParticipantCoupleWDSF as pW
         WHERE pW.Competition->Tournament = :trnId AND pW.Competition->IsActive = 1 AND pW.IsActive = 1 AND pW.TicketStatus = 'Paid' AND 0 = (SELECT COUNT(mt.ID) FROM Dance_Data.MatchingCoupleUDSRWDSF as mt WHERE mt.WDSF = pW.Couple)
         GROUP BY pW.Couple
         ORDER BY FullName->Value)  
    
    &sql(OPEN PrtWDSFCoupleCur)
    for  
    {   
        &sql(FETCH PrtWDSFCoupleCur INTO :prtId) 
        quit:(SQLCODE '= 0)
        
        set proxy = ##class(%ZEN.proxyObject).%New()
        set prtProxy = ##class(Dance.Data.ParticipantCoupleWDSF).%OpenId(prtId).ConvertToProxyObject(params)
        set proxy.couple = prtProxy.couple
        set proxy.couple.otherInfo.regionNumber = proxy.couple.otherInfo.country.name
        set proxy.couple.otherInfo.created = prtProxy.created
        set proxy.couple.man.number = ""
        set proxy.couple.woman.number = ""
        
        if (proxy.couple.man.dob = ""){
            set proxy.couple.man.dob = proxy.couple.otherInfo.ageCategory
        }
        
        if (proxy.couple.woman.dob = ""){
            set proxy.couple.woman.dob = proxy.couple.otherInfo.ageCategory
        }
        
        set proxy.competitions = ""
        
        &sql(DECLARE CmpCplWDSFCur CURSOR FOR 
             SELECT %NOLOCK Competition->IdExternal
             FROM Dance_Data.ParticipantCoupleWDSF
             WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND Couple = :proxy.couple.id  AND TicketStatus = 'Paid' 
             ORDER BY Competition->StartDate)   
        &sql(OPEN CmpCplWDSFCur)
        for  
        {   
            &sql(FETCH CmpCplWDSFCur INTO :cmpId) 
            quit:(SQLCODE '= 0)
            
            set proxy.competitions = proxy.competitions_","_cmpId
        }
        &sql(CLOSE CmpCplWDSFCur)
        
        set proxy.competitions = $E(proxy.competitions, 2, *)
        do list.Insert(proxy)
    }
    
    &sql(CLOSE PrtWDSFCoupleCur)
    
    quit list
]]></Implementation>
</Method>

<Method name="GetReportDataCoupleOther">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    try{
        set list = ##class(%ListOfObjects).%New()
        
        set params = ##class(%ZEN.proxyObject).%New()
        set params.competitionParams = ##class(%ZEN.proxyObject).%New()
    
        &sql(DECLARE PrtOtherCoupleCur CURSOR FOR 
             SELECT ID
             FROM Dance_Data.ParticipantCoupleOther
             WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1 AND TicketStatus = 'Paid'
             GROUP BY CoupleKey
             ORDER BY FullName->Value)  
        
        &sql(OPEN PrtOtherCoupleCur)
        for  
        {   
            &sql(FETCH PrtOtherCoupleCur INTO :prtId) 
            quit:(SQLCODE '= 0)
            
            set proxy = ##class(%ZEN.proxyObject).%New()
            set proxy.couple = ##class(Dance.Data.ParticipantCoupleOther).%OpenId(prtId).ConvertToProxyObject(params).couple
            set proxy.couple.otherInfo.regionNumber = proxy.couple.otherInfo.country.name
            set proxy.competitions = ""
            
            &sql(DECLARE CmpCplOtherCur CURSOR FOR 
                 SELECT %NOLOCK Competition->IdExternal, Created
                 FROM Dance_Data.ParticipantCoupleOther
                 WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND CoupleKey = :proxy.couple.key AND TicketStatus = 'Paid' 
                 ORDER BY Competition->StartDate)   
            &sql(OPEN CmpCplOtherCur)
            for  
            {   
                &sql(FETCH CmpCplOtherCur INTO :cmpId, :created) 
                quit:(SQLCODE '= 0)
                
                set proxy.competitions = proxy.competitions_","_cmpId
                set proxy.couple.otherInfo.created = created
            }
            &sql(CLOSE CmpCplOtherCur)
            
            set proxy.competitions = $E(proxy.competitions, 2, *)
            do list.Insert(proxy)
        }
        
        &sql(CLOSE PrtOtherCoupleCur)
    }
    catch(ex){
        do $SYSTEM.OBJ.DisplayError(ex.AsStatus())
        
    }
    quit list
]]></Implementation>
</Method>

<Method name="GetReportDataSingleUDSR">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    set list = ##class(%ListOfObjects).%New()
    
    &sql(DECLARE PrtSingleUDSRCur CURSOR FOR 
         SELECT %NOLOCK DISTINCT Athlete
         FROM Dance_Data.ParticipantSingleUDSR
         WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1  AND TicketStatus = 'Paid'
         ORDER BY FullName->Value)  
    
    &sql(OPEN PrtSingleUDSRCur)
    for  
    {   
        &sql(FETCH PrtSingleUDSRCur INTO :athId) 
        quit:(SQLCODE '= 0)
        
        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.athlete = ##class(Dance.Data.ParticipantSingleUDSR).%OpenId(athId).ConvertToProxyObject()
        set proxy.competitions = ""
        
        &sql(DECLARE CmpAthUDSRCur CURSOR FOR 
             SELECT %NOLOCK Competition->IdExternal, Created
             FROM Dance_Data.ParticipantSingleUDSR
             WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND Athlete = :athId AND TicketStatus = 'Paid'
             ORDER BY Competition->StartDate)   
        &sql(OPEN CmpAthUDSRCur)
        for  
        {   
            &sql(FETCH CmpAthUDSRCur INTO :cmpId, :created) 
            quit:(SQLCODE '= 0)
            
            set proxy.competitions = proxy.competitions_","_cmpId
            set proxy.athlete.otherInfo.created = created
        }
        &sql(CLOSE CmpAthUDSRCur)
        
        set proxy.competitions = $E(proxy.competitions, 2, *)
        do list.Insert(proxy)
    }
    
    &sql(CLOSE PrtSingleUDSRCur)
    
    quit list
]]></Implementation>
</Method>

<Method name="GetReportDataSingleWDSF">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    set list = ##class(%ListOfObjects).%New()
    set params = ##class(%ZEN.proxyObject).%New()
    set params.competitionParams = ##class(%ZEN.proxyObject).%New()
    
    &sql(DECLARE PrtSingleWDSFCur CURSOR FOR 
         SELECT %NOLOCK ID
         FROM Dance_Data.ParticipantSingleWDSF
         WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1 AND TicketStatus = 'Paid'
         GROUP BY Athlete
         ORDER BY FullName->Value)  
    
    &sql(OPEN PrtSingleWDSFCur)
    for  
    {   
        &sql(FETCH PrtSingleWDSFCur INTO :prtId) 
        quit:(SQLCODE '= 0)
        
        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.athlete = ##class(Dance.Data.ParticipantSingleWDSF).%OpenId(prtId).ConvertToProxyObject(params).athlete
        set proxy.athlete.number = ""
        set proxy.competitions = ""
        
        &sql(DECLARE CmpAthWDSFCur CURSOR FOR 
             SELECT %NOLOCK Competition->IdExternal, Created
             FROM Dance_Data.ParticipantSingleWDSF
             WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND Athlete = :proxy.athlete.id  AND TicketStatus = 'Paid'
             ORDER BY Competition->StartDate)   
        &sql(OPEN CmpAthWDSFCur)
        for  
        {   
            &sql(FETCH CmpAthWDSFCur INTO :cmpId, :created) 
            quit:(SQLCODE '= 0)
            
            set proxy.competitions = proxy.competitions_","_cmpId
            set proxy.athlete.otherInfo.created = created
        }
        &sql(CLOSE CmpAthWDSFCur)
        
        set proxy.competitions = $E(proxy.competitions, 2, *)
        do list.Insert(proxy)
    }
    
    &sql(CLOSE PrtSingleWDSFCur)
    
    quit list
]]></Implementation>
</Method>

<Method name="GetReportDataSingleOther">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
    set list = ##class(%ListOfObjects).%New()
    set params = ##class(%ZEN.proxyObject).%New()
    set params.competitionParams = ##class(%ZEN.proxyObject).%New()
    
    &sql(DECLARE PrtOtherAthleteCur CURSOR FOR 
         SELECT %NOLOCK ID
         FROM Dance_Data.ParticipantSingleOther
         WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND IsActive = 1  AND TicketStatus = 'Paid'
         GROUP BY AthleteKey
         ORDER BY FullName->Value)  
    
    &sql(OPEN PrtOtherAthleteCur)
    for  
    {   
        &sql(FETCH PrtOtherAthleteCur INTO :prtId) 
        quit:(SQLCODE '= 0)
        
        set proxy = ##class(%ZEN.proxyObject).%New()
        set proxy.athlete = ##class(Dance.Data.ParticipantSingleOther).%OpenId(prtId).ConvertToProxyObject(params).athlete
        set proxy.competitions = ""
        
        &sql(DECLARE CmpAthOtherCur CURSOR FOR 
             SELECT %NOLOCK Competition->IdExternal, Created
             FROM Dance_Data.ParticipantSingleOther
             WHERE Competition->Tournament = :trnId AND Competition->IsActive = 1 AND AthleteKey = :proxy.athlete.key  AND TicketStatus = 'Paid'
             ORDER BY Competition->StartDate)   
        &sql(OPEN CmpAthOtherCur)
        for  
        {   
            &sql(FETCH CmpAthOtherCur INTO :cmpId, :created) 
            quit:(SQLCODE '= 0)
            
            set proxy.competitions = proxy.competitions_","_cmpId
            set proxy.athlete.otherInfo.created = created
        }
        &sql(CLOSE CmpAthOtherCur)
        
        set proxy.competitions = $E(proxy.competitions, 2, *)
        do list.Insert(proxy)
    }
    
    &sql(CLOSE PrtOtherAthleteCur)
    
    quit list
]]></Implementation>
</Method>
</Class>
</Export>
