<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Dance.Data.TicketDanceplat">
<Super>Dance.Data.Ticket</Super>
<TimeCreated>63436,51933.345197</TimeCreated>

<Property name="CodeOne">
<Type>%String</Type>
</Property>

<Property name="CodeTwo">
<Type>%String</Type>
</Property>

<Index name="NumberDPIdx">
<Properties>Number</Properties>
<Unique>1</Unique>
</Index>

<Method name="Save">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&st]]></FormalSpec>
<ReturnType>Ticket</ReturnType>
<Implementation><![CDATA[
    #dim obj As TicketDanceplat
    
    if (..NumberDPIdxExists(data.number)){
        set obj = ..NumberDPIdxOpen(data.number,,.st)   
    }
    else{
        set obj = ..%New()
        set obj.Number = data.number    
        set obj.Participant = ##class(Dance.Data.Participant).%OpenId(data.participant.id)
                
        // If another ticket already exists for this participant 
        if (..ParticipantIdxExists(data.participant.id)){
            set oldTiket = ..ParticipantIdxOpen(data.participant.id)
            
            if (oldTiket.TStatus.Code = "Canceled") && (##class(TicketStatus).%OpenId(data.status.id).Code = "Paid"){
                if ($System.SQL.DATEDIFF("ss", oldTiket.Created, data.paymentCreated) > 0){
                    do ##class(Dance.Utils.Journal).Create("Log", "Save TicketDanceplat", "Remove ticket #"_oldTiket.Number_" for participant "_obj.Participant.FullName_" becouse exists more new ticket #"_data.number)
                    set st = ..%DeleteId(oldTiket.%Id())
                    $$$THROWONERROR(st, st)
                }
                else{
                    do ##class(Dance.Utils.Journal).Create("Log", "Save TicketDanceplat", "DateDiffNotWork #"_oldTiket.Number_" "_oldTiket.Created_" for participant "_obj.Participant.FullName_" becouse exists more new ticket #"_data.number_" "_data.paymentCreated)
                }
            }
        }
    }
    
    set obj.PrtObjKey = ##class(Participant).GetPrtObjKey(obj.Participant.%Id())
    set obj.Amount = data.amount
    set obj.TStatus = ##class(TicketStatus).%OpenId(data.status.id)
    set obj.Title = data.title
    set obj.Created = data.paymentCreated
    set obj.Updated = $ZDT($ZTS, 3)
    
    set obj.CodeOne = data.codeOne
    set obj.CodeTwo = data.codeTwo
    
    set obj.Tournament = obj.Participant.Competition.Tournament
    
    set st = obj.%Save()

    quit obj
]]></Implementation>
</Method>

<Method name="SaveAllFromImportTable">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    do ##class(Dance.Utils.Journal).Create("Log", "Dance.Data.TicketDanceplat.SaveAllFromImportTable()", "Start")
    
    try{
        
        &sql(DECLARE TicketCurs CURSOR FOR 
             SELECT ID
             FROM Dance_Data_Import.TicketDanceplat as tic
             WHERE (SELECT cmp.Tournament->TStatus->Code 
                    FROM Dance_Data.Competition as cmp 
                    WHERE cmp.IdInternal = tic.GroupIdInternal) IN ('Registration','RegistrationClosed'))   
                    
        &sql(OPEN TicketCurs)
        for  
        {   
            &sql(FETCH TicketCurs INTO :id) 
            quit:(SQLCODE '= 0)
            
            set ticketImport = ##class(Dance.Data.Import.TicketDanceplat).%OpenId(id)
            set competition = ##class(Dance.Data.Competition).IdInternalIdxOpen(ticketImport.GroupIdInternal)
            if '$ISOBJECT(competition) continue
            
            set st = ..SaveOneFromImportTable(ticketImport, competition)
            if $$$ISERR(st){
                do ##class(Dance.Utils.Journal).Create("Log", "Dance.Data.TicketDanceplat.SaveAllFromImportTable() Error", $SYSTEM.Status.GetErrorText(st))
            }   
        }
        
        &sql(CLOSE TicketCurs)  
    }
    catch(ex){
        set st = ex.AsStatus()
        do ##class(Dance.Utils.Journal).Create("Error", "Dance.Data.TicketDanceplat.TaskTickets.SaveAllFromImportTable()", $SYSTEM.Status.GetErrorText(st))
    }
    
    do ##class(Dance.Utils.Journal).Create("Log", "Dance.Data.TicketDanceplat.TaskTickets.SaveAllFromImportTable()", "End")
    
    quit st
]]></Implementation>
</Method>

<Method name="SaveOneFromImportTable">
<ClassMethod>1</ClassMethod>
<FormalSpec>ticketImport:Dance.Data.Import.TicketDanceplat,competition:Dance.Data.Competition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    set isTrace = $$$YES
    w:(isTrace) !,!,"Start 'SaveOneFromImportTable' ticketId="_ticketImport.%Id()
    //do ##class(Dance.Utils.Journal).Create("Log", "Dance.Data.TicketDanceplat.SaveOneFromImportTable()", "Start for ticketId="_ticketImport.%Id())
    
    try{
        TSTART
        
        if (ticketImport.MaleLastName = "") && (ticketImport.FemaleLastName = ""){
            $$$THROWONERROR(st, ##class(Dance.Utils.Msg).GetErrorStatus("error_Ticket_EmptyFields"))
        }
        
        #dim participant As Dance.Data.Participant = ""
        
        // Find UDSR By Number
        #dim manUDSR As Dance.Data.PersonUDSR = ..GetPersonUDSRFromImportedTicket(ticketImport, "Male")
        #dim womanUDSR As Dance.Data.PersonUDSR = ..GetPersonUDSRFromImportedTicket(ticketImport, "Female")
        
        if ($ISOBJECT(manUDSR) && $ISOBJECT(womanUDSR)) || 
           ($ISOBJECT(manUDSR) && ticketImport.FemaleLastName = "") ||
           ($ISOBJECT(womanUDSR) && ticketImport.MaleLastName = ""){
            // In the case where an one athlete is in STSR but not another. We assume is other couple.
            
            // UDSR couple or athlete   
            set prtObject = ""
            set prtClassName = "Dance.Data.ParticipantSingleUDSR"
    
            if $ISOBJECT(manUDSR) && $ISOBJECT(womanUDSR){
                w:(isTrace) !,"--Find man and woman UDSR."
                
                // Couple UDSR
                set prtObject = ##class(Dance.Data.CoupleUDSR).GetByNumbers(manUDSR.Number, womanUDSR.Number,.st)   
                set prtClassName = "Dance.Data.ParticipantCoupleUDSR"
                $$$THROWONERROR(st, st)
                
                // Костыль на тот случай, если оплачивали межд. соревнования по данным стср, но оказывается есть межд. версия пары стср, вот её и надо взять. Капец :(
                if $ISOBJECT(competition.WDSF) && ##class(Dance.Data.MatchingCoupleUDSRWDSF).UDSRIdxExists(prtObject.%Id()){
                    set prtObject = ##class(Dance.Data.MatchingCoupleUDSRWDSF).UDSRIdxOpen(prtObject.%Id(),,.st).WDSF   
                    set prtClassName = "Dance.Data.ParticipantCoupleWDSF"
                    $$$THROWONERROR(st, st)
                }
            }
            elseif $ISOBJECT(manUDSR){
                w:(isTrace) !,"--Find man UDSR."
                
                // Athlete UDSR, Male
                set prtObject = manUDSR
            }
            elseif $ISOBJECT(womanUDSR){
                w:(isTrace) !,"--Find woman UDSR."
                
                // Athlete UDSR, Female
                set prtObject = womanUDSR
            }
            
            // Create participant   
            set participant = $CLASSMETHOD(prtClassName, "Create", ##class(Dance.Data.Recorder).GetSystemRecorder(), competition, prtObject.ConvertToProxyObject(), .st)
            $$$THROWONERROR(st, st)
        }
        else {
            // WDSF couple|athlete OR Other couple|athlete
            if (ticketImport.MaleLastName '= "") && (ticketImport.FemaleLastName '= ""){
                // Couple
                // Find WDSF couple
                set coupleWDSF = ..GetCoupleWDSFFromImportedTicket(ticketImport)
                if $ISOBJECT(coupleWDSF){
                    w:(isTrace) !,"---Find couple WDSF."
                    
                    set coupleWDSF = coupleWDSF.ConvertToProxyObject()
                    set coupleWDSF.man.dob = ..GetCorrectDOB(ticketImport.MaleDOBOrAge)
                    set coupleWDSF.woman.dob = ..GetCorrectDOB(ticketImport.FemaleDOBOrAge)
                    set coupleWDSF.otherInfo.city = ticketImport.City
                    set coupleWDSF.otherInfo.club = ticketImport.Club  
                    set participant = ##class(Dance.Data.ParticipantCoupleWDSF).Create(##class(Recorder).GetSystemRecorder(), competition, coupleWDSF, .st)
                    
                    // Find the double
                    set participantOther = ..GetParticipantOtherFromImportedTicket(ticketImport, competition, $$$NO, .st)
                    if $ISOBJECT(participantOther){
                        w:(isTrace) !,"---- Find couple other (double)."
                        set participantOther.IsActive = $$$NO
                        $$$THROWONERROR(st, participantOther.%Save())
                        
                        set participant.Created = participantOther.Created
                        $$$THROWONERROR(st, participant.%Save())
                    }
                    
                }
                else{
                    w:(isTrace) !,"---Create prt couple Other."
        
                    set participant = ..GetParticipantOtherFromImportedTicket(ticketImport, competition, $$$NO, .st)
                    
                    if $ISOBJECT(participant) = $$$NO {
                        // Create participantCoupleOther
                        set participant = ..CreateParticipantOtherByImportedTicket(ticketImport, competition, $$$NO, .st)
                    }                                     
                }
                
                $$$THROWONERROR(st, st)
            }
            else{
                // Athlete (Single, solo)
                // Find WDSF person
                set athleteWDSF = $SELECT(ticketImport.MaleLastName = "" : ..GetPersonWDSFFromImportedTicket(ticketImport, "Female"),
                                                                 $$$YES : ..GetPersonWDSFFromImportedTicket(ticketImport, "Male"))
            
                if $ISOBJECT(athleteWDSF){
                    w:(isTrace) !,"---Find person WDSF."
                    
                    set participantOther = ..GetParticipantOtherFromImportedTicket(ticketImport, competition, $$$NO, .st)
                    if $ISOBJECT(participantOther){
                        w:(isTrace) !,"---- Find single other (double)."
                        set participantOther.IsActive = $$$NO
                        $$$THROWONERROR(st, participantOther.%Save())
                    }
                    
                    set athleteWDSF = athleteWDSF.ConvertToProxyObject()
                    set athleteWDSF.dob = ..GetCorrectDOB($SELECT(ticketImport.MaleLastName = "" : ticketImport.FemaleDOBOrAge, $$$YES : ticketImport.MaleDOBOrAge))
                    set athleteWDSF.otherInfo.city = ticketImport.City
                    set athleteWDSF.otherInfo.club = ticketImport.Club 
                    
                    set participant = ##class(Dance.Data.ParticipantSingleWDSF).Create(##class(Recorder).GetSystemRecorder(), competition, athleteWDSF, .st)
                }
                else{
                    w:(isTrace) !,"---Create prt single Other."
        
                    set participant = ..GetParticipantOtherFromImportedTicket(ticketImport, competition, $$$YES, .st)
                    
                    if $ISOBJECT(participant) = $$$NO {
                        // Create participantSingleOther
                        set participant = ..CreateParticipantOtherByImportedTicket(ticketImport, competition, $$$YES, .st)
                    } 
                }
                
                $$$THROWONERROR(st, st)
            }   
        }
        
        if '$ISOBJECT(participant){
            $$$THROWONERROR(st, ##class(Dance.Utils.Msg).GetErrorStatus("error_Ticket_ImportedParticipantNotCreated"))
        }
        
        // Create ticket
        set ticketData = ##class(%ZEN.proxyObject).%New()
        set ticketData.participant = ##class(%ZEN.proxyObject).%New()
        set ticketData.participant.id = participant.%Id()
        set ticketData.number = ticketImport.IdInternal
        set ticketData.amount = ticketImport.Amount
        set ticketData.paymentCreated = ticketImport.PaymentCreated
        set ticketData.codeOne = ticketImport.CodeOne
        set ticketData.codeTwo = ticketImport.CodeTwo
        set ticketData.title = ticketImport.Description
        set ticketData.status = ##class(TicketStatus).CodeIdxOpen($CASE($ZCVT(ticketImport.TStatus, "L"), "pay" : "Paid", "cancel" : "Canceled", :"Not paid")).ConvertToProxyObject() 

        
        w:(isTrace) !,"Save ticket."
        do ..Save(ticketData, .st)
        
        $$$THROWONERROR(st, st)
        
        TCOMMIT
        
        w:(isTrace) " Success."
    }
    catch(ex){
        TROLLBACK
        set st = ex.AsStatus()
        do:(isTrace) $system.OBJ.DisplayError(st)
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="GetPersonUDSRFromImportedTicket">
<ClassMethod>1</ClassMethod>
<FormalSpec>ticketImport:Dance.Data.Import.TicketDanceplat,gender:%String</FormalSpec>
<ReturnType>Dance.Data.PersonUDSR</ReturnType>
<Implementation><![CDATA[
    set propertyHead = $CASE(gender, "Male" : "Male", : "Female")
    
    // Find by number
    #dim person As Dance.Data.PersonUDSR = ##class(Dance.Data.PersonUDSR).NumberUDSRIdxOpen($PROPERTY(ticketImport, propertyHead_"Number"))
    quit:$ISOBJECT(person) person
    
    // Find by filter in the table
    set filter = ##class(%ZEN.proxyObject).%New()
    set filter.lastName = $PROPERTY(ticketImport, propertyHead_"LastName")
    set filter.firstName = $PROPERTY(ticketImport, propertyHead_"FirstName")
    set filter.dob = $PROPERTY(ticketImport, propertyHead_"DOBOrAge")
    set filter.age = $PROPERTY(ticketImport, propertyHead_"DOBOrAge")   
    
    quit ##class(Dance.Data.PersonUDSR).GetByFilter(filter)
]]></Implementation>
</Method>

<Method name="GetPersonWDSFFromImportedTicket">
<ClassMethod>1</ClassMethod>
<FormalSpec>ticketImport:Dance.Data.Import.TicketDanceplat,gender:%String</FormalSpec>
<ReturnType>Dance.Data.PersonUDSR</ReturnType>
<Implementation><![CDATA[
    set propertyHead = $CASE(gender, "Male" : "Male", : "Female")
    quit:($ASCII($E($PROPERTY(ticketImport, propertyHead_"LastName"), 1)) > 1000) $$$NULLOREF
        
    // Find by filter in the table
    set filter = ##class(%ZEN.proxyObject).%New()
    set filter.lastName = $PROPERTY(ticketImport, propertyHead_"LastName")
    set filter.firstName = $PROPERTY(ticketImport, propertyHead_"FirstName")

    #dim person As Dance.Data.PersonWDSF = ##class(Dance.Data.PersonWDSF).GetByFilter(filter)
    quit:$ISOBJECT(person) person
    
    
    w !, "Searching in WDSF DB"
    
    // Find in the controller
    set ctrlData = ##class(Dance.Wdsf.ControllerAPI).GetPersonsByFullName(filter.lastName, filter.firstName, .st)
    if $$$ISOK(st) && (ctrlData.persons.Count() '= 0){
        set person = ##class(Dance.Data.PersonWDSF).SaveFromWDSF(ctrlData.persons.GetAt(1), .st)
        $$$THROWONERROR(st, st)
    }
    
    quit person
]]></Implementation>
</Method>

<Method name="GetCoupleWDSFFromImportedTicket">
<ClassMethod>1</ClassMethod>
<FormalSpec>ticketImport:Dance.Data.Import.TicketDanceplat</FormalSpec>
<ReturnType>CoupleWDSF</ReturnType>
<Implementation><![CDATA[
    // WDSF name contains only latin symbols
    quit:($ASCII($E(ticketImport.MaleLastName, 1)) > 1000) $$$NULLOREF
    
    set filter = ##class(%ZEN.proxyObject).%New()
    set filter.man = ##class(%ZEN.proxyObject).%New()
    set filter.man.lastName = ticketImport.MaleLastName
    set filter.man.firstName = ticketImport.MaleFirstName

    set filter.woman = ##class(%ZEN.proxyObject).%New()
    set filter.woman.lastName = ticketImport.FemaleLastName
    set filter.woman.firstName = ticketImport.FemaleFirstName
    
    // Find in DB
    w !, "Searching in PersonWDSF table"
    set couple = ##class(CoupleWDSF).GetByFilter(filter)
    quit:$ISOBJECT(couple) couple
    
    w !, "Searching in WDSF DB"
    // Find in controller DB
    set wdsfData = ##class(Dance.Wdsf.ControllerAPI).GetCoupleByName(ticketImport.MaleLastName_","_ticketImport.MaleFirstName, ticketImport.FemaleLastName_","_ticketImport.FemaleFirstName, .st)
    quit:$$$ISERR(st) $$$NULLOREF
    
    // Проверка на то, что если ничего не вернулось или вернулось, но сказало: Ахтунг! Я не нашел такой пары в WDSF базе!!!!! Ищите где-нибудь в другом месте
    if ($ISOBJECT(wdsfData) = $$$NO) || (wdsfData.code = 2045){
        w !, wdsfData.message
        q $$$NULLOREF
    }
    
    w !, "Searching completed ",wdsfData.man.id,"-", wdsfData.woman.id
    quit ##class(CoupleWDSF).GetByNumbers(wdsfData.man.id, wdsfData.woman.id, .st)
]]></Implementation>
</Method>

<Method name="GetParticipantOtherFromImportedTicket">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[ticketImport:Dance.Data.Import.TicketDanceplat,competition:Competition,isSolo:%Boolean,&st:%Status]]></FormalSpec>
<ReturnType>Participant</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    set data = ##class(%ZEN.proxyObject).%New()
    set data.competitionId = competition.%Id()
    set data.otherInfo = ##class(%ZEN.proxyObject).%New()
    set data.otherInfo.club = ticketImport.Club
    set data.otherInfo.city = ticketImport.City
    set data.otherInfo.mainTrainer = $P(ticketImport.Trainers, ",", 1)
    set data.otherInfo.otherTrainers = $P(ticketImport.Trainers, ",", 2, *)
    
    set prtClass = ""
    if (isSolo){
        if (ticketImport.FemaleLastName = ""){
            set data.lastName = ticketImport.MaleLastName
            set data.firstName = ticketImport.MaleFirstName
            set data.dob = ..GetCorrectDOB(ticketImport.MaleDOBOrAge)
        }
        else{
            set data.lastName = ticketImport.FemaleLastName
            set data.firstName = ticketImport.FemaleFirstName
            set data.dob = ..GetCorrectDOB(ticketImport.FemaleDOBOrAge)
        }
        
        set prtClass = "Dance.Data.ParticipantSingleOther"
    }
    else{
        set data.man = ##class(%ZEN.proxyObject).%New()
        set data.man.lastName = ticketImport.MaleLastName
        set data.man.firstName = ticketImport.MaleFirstName
        set data.man.dob = ..GetCorrectDOB(ticketImport.MaleDOBOrAge)
        
        set data.woman = ##class(%ZEN.proxyObject).%New()
        set data.woman.lastName = ticketImport.FemaleLastName
        set data.woman.firstName = ticketImport.FemaleFirstName
        set data.woman.dob = ..GetCorrectDOB(ticketImport.FemaleDOBOrAge)
        
        set prtClass = "Dance.Data.ParticipantCoupleOther"
    }
    
    // Find existed participant
    set prt = $CLASSMETHOD(prtClass, "GetByFilter", data)
    quit prt
]]></Implementation>
</Method>

<Method name="CreateParticipantOtherByImportedTicket">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[ticketImport:Dance.Data.Import.TicketDanceplat,competition:Competition,isSolo:%Boolean,&st:%Status]]></FormalSpec>
<ReturnType>Participant</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    set data = ##class(%ZEN.proxyObject).%New()
    set data.competitionId = competition.%Id()
    set data.otherInfo = ##class(%ZEN.proxyObject).%New()
    set data.otherInfo.club = ticketImport.Club
    set data.otherInfo.city = ticketImport.City
    set data.otherInfo.mainTrainer = $P(ticketImport.Trainers, ",", 1)
    set data.otherInfo.otherTrainers = $P(ticketImport.Trainers, ",", 2, *)
    
    set prtClass = ""
    if (isSolo){
        if (ticketImport.FemaleLastName = ""){
            set data.lastName = ticketImport.MaleLastName
            set data.firstName = ticketImport.MaleFirstName
            set data.dob = ..GetCorrectDOB(ticketImport.MaleDOBOrAge)
            set data.key = $SYSTEM.Encryption.Base64Encode($ZCVT(ticketImport.MaleLastName_","_ticketImport.MaleFirstName_","_data.man.dob, "O", "UTF8"))
        }
        else{
            set data.lastName = ticketImport.FemaleLastName
            set data.firstName = ticketImport.FemaleFirstName
            set data.dob = ..GetCorrectDOB(ticketImport.FemaleDOBOrAge)
            set data.key = $SYSTEM.Encryption.Base64Encode($ZCVT(ticketImport.FemaleLastName_","_ticketImport.FemaleFirstName_","_data.woman.dob, "O", "UTF8"))
        }
        
        set prtClass = "Dance.Data.ParticipantSingleOther"
    }
    else{
        set data.man = ##class(%ZEN.proxyObject).%New()
        set data.man.lastName = ticketImport.MaleLastName
        set data.man.firstName = ticketImport.MaleFirstName
        set data.man.dob = ..GetCorrectDOB(ticketImport.MaleDOBOrAge)
        
        set data.woman = ##class(%ZEN.proxyObject).%New()
        set data.woman.lastName = ticketImport.FemaleLastName
        set data.woman.firstName = ticketImport.FemaleFirstName
        set data.woman.dob = ..GetCorrectDOB(ticketImport.FemaleDOBOrAge)
        set data.key = $SYSTEM.Encryption.Base64Encode($ZCVT(ticketImport.MaleLastName_","_ticketImport.MaleFirstName_","_data.man.dob_";"_
                                                             ticketImport.FemaleLastName_","_ticketImport.FemaleFirstName_","_data.woman.dob, "O", "UTF8")) 
        
        set prtClass = "Dance.Data.ParticipantCoupleOther"
    }
    
    // Create
    set countryNameWDSF = "--Unknown--"
    &sql(SELECT TOP 1 CountryWDSFName INTO :countryNameWDSF 
         FROM 
         (
            SELECT Country->WDSFName As CountryWDSFName, City
            FROM Dance_Data.PersonUDSR
            UNION
            SELECT Couple->Man->Country->WDSFName As CountryWDSFName, City
            FROM Dance_Data.ParticipantCoupleWDSF
         )
         WHERE %UPPER(City) = %UPPER(TRIM(BOTH ' ' FROM :data.otherInfo.city)))

    set data.otherInfo.country = ##class(Country).GetByName(countryNameWDSF).ConvertToProxyObject()
    set data.key = $REPLACE($REPLACE(data.key, $C(13)_$C(10), ""), "/", "SLASH")
    
    set prt = $CLASSMETHOD(prtClass, "Create", ##class(Recorder).GetSystemRecorder(), competition, data, .st)
    quit prt
]]></Implementation>
</Method>

<Method name="GetCorrectDOB">
<ClassMethod>1</ClassMethod>
<FormalSpec>dob:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    if ($FIND(dob, "-") '= 0){
        // date YYYY-MM-DD
        return dob
    }
    if (+dob > 0) {
        // Now year - Age
        return ($P($ZD($H, 3), "-", 1) - dob)_"-01-01"
    }
    
    // 1840-12-31
    quit $ZD(0, 3)
]]></Implementation>
</Method>

<Method name="Test">
<Description>
do ##class(Dance.Data.TicketDanceplat).Test()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    TSTART
    set ticketImport = ##class(Dance.Data.Import.TicketDanceplat).%OpenId(11553)
    set competition = ##class(Dance.Data.Competition).IdInternalIdxOpen(ticketImport.GroupIdInternal)
    w !,..SaveOneFromImportTable(ticketImport, competition)
    TCOMMIT
]]></Implementation>
</Method>

<Method name="UpdatePrtKey">
<Description>
do ##class(Dance.Data.TicketDanceplat).UpdatePrtKey()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    set st = $$$OK
    try{
        TSTART
        
        &sql(DECLARE TicketUPDDCurs CURSOR FOR 
             SELECT ID
             FROM Dance_Data.Ticket)    
                    
        &sql(OPEN TicketUPDDCurs)
        for  
        {   
            &sql(FETCH TicketUPDDCurs INTO :id) 
            quit:(SQLCODE '= 0)
            
            set ticket = ..%OpenId(id)
            set ticket.PrtObjKey = ##class(Participant).GetPrtObjKey(ticket.Participant.%Id())
            set ticket.Tournament = ticket.Participant.Competition.Tournament
            $$$THROWONERROR(st, ticket.%Save())
        }
        
        &sql(CLOSE TicketUPDDCurs)
        
        TCOMMIT 
    }
    catch(ex){
        TROLLBACK
        
        set st = ex.AsStatus()
        w $SYSTEM.Status.GetErrorText(st)
    }
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>TicketDanceplatDefaultData</DefaultData>
<Data name="TicketDanceplatDefaultData">
<Subscript>"TicketDanceplat"</Subscript>
<Value name="1">
<Value>CodeOne</Value>
</Value>
<Value name="2">
<Value>CodeTwo</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
