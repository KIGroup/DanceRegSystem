<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Dance.Data.Import.ImportDanceplat">
<Abstract>1</Abstract>
<TimeCreated>63438,7022.551555</TimeCreated>

<Method name="Import">
<Description>
Import all objects from XML to table</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String,pageWithParameters:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	set ^test("pageWithParameters") = pageWithParameters
	try{
				
		set httprequest = ##class(%Net.HttpRequest).%New()
		set httprequest.Server = $G(^Settings("Dance", "ImportDanceplat", "Server"))
		set httprequest.Https = 1
		set httprequest.SSLConfiguration = "default"
		set httprequest.ContentEncoding = "UTF-8"
		set httprequest.Timeout = 430
		do httprequest.Get(pageWithParameters)
		
		if (httprequest.HttpResponse.Data = ""){
			$$$ThrowStatus($SYSTEM.Status.Error(5001, "Ответ от сервера не был получен."))
		}
		
		#dim testStream As %GlobalBinaryStream = httprequest.HttpResponse.Data
		//w !, test.ReadLine()
		//set ^testtt = $ZCVT(httprequest.HttpResponse.Data.Read(100000000), "O", "UTF8")
		
		#dim newStream = ##class(%GlobalBinaryStream).%New()
	
		set countLine = 0
		while 'testStream.AtEnd {
			set line = testStream.ReadLine()
			set line = $ZCVT(line, "O", "UTF8")
			set line = $REPLACE(line, "<strong>", "")
			set line = $REPLACE(line, "</strong>", "")
			set line = $REPLACE(line, $C(10), "")
			
			set countLine = countLine + 1
			
			d newStream.Write(line)
		}
		
		set stream = newStream.Read(10000000000)
		#dim reader As %XML.Reader = ##class(%XML.Reader).%New()
		
		if (className = ##class(Dance.Data.Import.TournamentDanceplat).%ClassName(1)){
			set stream = $REPLACE(stream, "xml version=""1.0""", "xml version=""1.0"" encoding=""UTF-8""")
		}
		
		$$$THROWONERROR(st, reader.OpenString(stream, "literal"))
		
		do reader.Correlate($CLASSMETHOD(className, "%GetParameter", "CorrelateName"), className)
		
		
		TSTART
		while reader.Next(.obj, .st)
		{			
			$$$THROWONERROR(st, $CLASSMETHOD(className, "Save", obj))
			kill obj
		}
		
		TCOMMIT		
	}
	catch(ex){
		if ($TLEVEL > 0){
			TROLLBACK
		}
		
		set st = ex.AsStatus()
		do ##class(Dance.Utils.Journal).Create("Error", "Dance.Data.Import.ImportDanceplat.Import", $SYSTEM.Status.GetErrorText(st))
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="Test">
<Description>
do ##class(Dance.Data.Import.ImportDanceplat).Test()</Description>
<ClassMethod>1</ClassMethod>
</Method>
</Class>
</Export>
