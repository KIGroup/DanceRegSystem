<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Dance.Utils.ImportRUSDSU">
<Description>
Импорт регистраций</Description>
<Abstract>1</Abstract>
<TimeCreated>64000,41228.823048</TimeCreated>

<Method name="ImportFromFile">
<Description>
do ##class(Dance.Utils.ImportRUSDSU).ImportFromFile("g:\Downloads\couples.csv")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fileName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    
    try{
        TSTART 
        w !,"TLEVEL=",$TLEVEL
        
        set stream = ##class(%Stream.FileCharacter).%New()
        set st = stream.LinkToFile(fileName)
        
        set countRow = 0
        set registrationsTotalCount = 0
        while 'stream.AtEnd {
            set countRow = countRow + 1
            
            //if (countRow = 11) quit 
            
            set line = stream.ReadLine()
            set listOfProperties = $LISTFROMSTRING(line, ";")
            
            set manNumber = $LIST(listOfProperties, 2)
            set womanNumber = $LIST(listOfProperties, 8)
            set competitions = $LISTFROMSTRING($LIST(listOfProperties, 14)) 
            
            
            set registrationsTotalCount = registrationsTotalCount + $LL(competitions)
            w !,!, "Строка №"_countRow
            $$$THROWONERROR(st, ..ImportCoupleRegistrations(manNumber, womanNumber, competitions))
        }
        
        w !,"RegistrationsTotalCount="_registrationsTotalCount
        w !,"TLEVEL=",$TLEVEL
        TCOMMIT 
    }
    catch(ex){
        TROLLBACK
        set st = ex.AsStatus()
        w !,$SYSTEM.Status.GetErrorText(st)
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="ImportCoupleRegistrations">
<ClassMethod>1</ClassMethod>
<FormalSpec>manNumber:%String,womanNumber:%String,competitions:%List</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    try{
        w !,"Пара ",manNumber," ",womanNumber_", competitions count = "_$LL(competitions)
        
        set coupleWDSF = ""
        set coupleUDSR = ##class(Dance.Data.CoupleUDSR).GetByNumbers(manNumber, womanNumber, .st)
        $$$THROWONERROR(st, st)
        
        set match = ##class(Dance.Data.MatchingCoupleUDSRWDSF).CreateByUDSR(coupleUDSR, .stWDSF)
        $$$THROWONERROR(stWDSF, stWDSF)
        
        if $ISOBJECT(match){
            w !, "Найдено совпадение ВДСФ"
            set coupleWDSF = match.WDSF
        }
        else{
            w !, "НЕ найдено совпадение ВДСФ. ВДСФ номера "_coupleUDSR.Man.NumberWDSF," ",coupleUDSR.Woman.NumberWDSF
        }
        
        
        set recorderHash = "kj0QTbIiDanJ3MsTQbG+XQEQLEQL"
        
        set proxyUDSRData = ##class(%ZEN.proxyObject).%New()
        set proxyUDSRData.recorderHash = recorderHash
        set proxyUDSRData.competitions = ##class(%ListOfDataTypes).%New()
        
        set proxyWDSFData = ##class(%ZEN.proxyObject).%New()
        set proxyWDSFData.recorderHash = recorderHash
        set proxyWDSFData.competitions = ##class(%ListOfDataTypes).%New()
        
        for i=1:1:$LL(competitions){
            set cmpId = ""
            set cmpIdExternal = $LIST(competitions, i)
            
            &sql(SELECT ID INTO :cmpId 
                 FROM Dance_Data.Competition
                 WHERE Tournament = 36 AND IdExternal = :cmpIdExternal)
                 
            set cmpObj = ##class(Dance.Data.Competition).%OpenId(cmpId)
            
            if $ISOBJECT(cmpObj.WDSF){
               do proxyWDSFData.competitions.Insert(cmpObj.%Id())
            }
            else{
               do proxyUDSRData.competitions.Insert(cmpObj.%Id())
            }
        }
        
        if $ISOBJECT(coupleUDSR){
            w !,"Регистрация СТСР Версии"
            //set proxyUDSRData.couple = coupleUDSR.ConvertToProxyObject()
            //do ##class(Dance.Web.JsonUser).RegistrationUDSR(proxyUDSRData)
        }
        
        if $ISOBJECT(coupleWDSF){
            w !,"Регистрация WDSF Версии"
            set proxyWDSFData.couple = coupleWDSF.ConvertToProxyObject()
            do ##class(Dance.Web.JsonUser).RegistrationWDSF(proxyWDSFData)
        }
    }
    catch(ex){
        set st = ex.AsStatus()
    }
    
    quit st
]]></Implementation>
</Method>

<Method name="IsExistInTournament">
<ClassMethod>1</ClassMethod>
<FormalSpec>trnId:%String,coupleUDSR:Dance.Data.CoupleUDSR,coupleWDSF:Dance.Data.CoupleWDSF</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set listOfUdsrCompetitions = ""
    set listOfWDSFCompetitions = ""
    set coupleUDSRID = coupleUDSR.%Id()
    
    &sql(SELECT LIST(Competition) INTO :listOfUdsrCompetitions 
         FROM Dance_Data.ParticipantCoupleUDSR 
         WHERE Competition->Tournament = :trnId AND Couple = :coupleUDSRID)
         
    if (listOfUdsrCompetitions '= ""){
        w !,"Найдены регистрации в СТСР "_listOfUdsrCompetitions
    }
    
    if (coupleWDSF){
        set coupleWDSFID = coupleWDSF.%Id()
        &sql(SELECT LIST(Competition) INTO :listOfWDSFCompetitions 
             FROM Dance_Data.ParticipantCoupleWDSF 
             WHERE Competition->Tournament = :trnId AND Couple = :coupleWDSFID)
             
        if (listOfWDSFCompetitions '= ""){
            w !,"Найдены регистрации в WDSF "_listOfWDSFCompetitions
        }
    }
]]></Implementation>
</Method>
</Class>
</Export>
